
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Feb 27 20:02:34 EST 2022
//----------------------------------------------------

package MPC;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Feb 27 20:02:34 EST 2022
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\007\000\002\002\004\000\002\002" +
    "\003\000\002\003\006\000\002\004\003\000\002\005\002" +
    "\000\002\005\005\000\002\005\005\000\002\006\003\000" +
    "\002\006\004\000\002\014\006\000\002\014\004\000\002" +
    "\007\003\000\002\007\004\000\002\010\006\000\002\010" +
    "\004\000\002\012\003\000\002\012\005\000\002\016\003" +
    "\000\002\017\003\000\002\024\003\000\002\024\003\000" +
    "\002\025\003\000\002\026\003\000\002\026\005\000\002" +
    "\026\005\000\002\026\007\000\002\026\006\000\002\026" +
    "\002\000\002\026\003\000\002\013\003\000\002\013\005" +
    "\000\002\027\002\000\002\027\004\000\002\011\003\000" +
    "\002\011\005\000\002\020\003\000\002\020\006\000\002" +
    "\020\005\000\002\020\010\000\002\015\003\000\002\015" +
    "\005\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\021\003\000\002\021\005\000\002\032\003\000\002" +
    "\022\003\000\002\022\005\000\002\033\003\000\002\023" +
    "\003\000\002\023\005\000\002\023\005\000\002\023\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\006\003\005\033\006\001\002\000\004\002" +
    "\146\001\002\000\004\002\uffff\001\002\000\004\072\007" +
    "\001\002\000\050\005\ufffd\013\ufffd\015\ufffd\016\ufffd\030" +
    "\ufffd\036\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd" +
    "\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\057" +
    "\ufffd\060\ufffd\001\002\000\004\051\011\001\002\000\010" +
    "\007\ufffc\011\ufffc\042\ufffc\001\002\000\010\007\017\011" +
    "\015\042\016\001\002\000\004\047\014\001\002\000\004" +
    "\002\001\001\002\000\006\003\133\072\007\001\002\000" +
    "\006\003\114\072\007\001\002\000\020\003\026\007\027" +
    "\016\uffe5\021\024\043\020\051\uffe5\072\007\001\002\000" +
    "\010\025\046\044\047\072\007\001\002\000\006\016\uffdf" +
    "\051\uffdf\001\002\000\012\015\uffea\016\uffea\051\uffea\060" +
    "\107\001\002\000\006\016\106\051\031\001\002\000\010" +
    "\025\046\044\047\072\007\001\002\000\046\005\uffdd\013" +
    "\uffdd\015\uffdd\016\uffdd\030\uffdd\036\uffdd\044\034\045\uffdd" +
    "\046\uffdd\047\035\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055" +
    "\uffdd\056\uffdd\057\uffdd\060\uffdd\001\002\000\010\015\uffe4" +
    "\016\uffe4\051\uffe4\001\002\000\020\003\026\007\027\016" +
    "\uffe5\021\024\043\020\051\uffe5\072\007\001\002\000\006" +
    "\016\032\051\031\001\002\000\020\003\026\007\027\016" +
    "\uffe5\021\024\043\020\051\uffe5\072\007\001\002\000\010" +
    "\015\uffe8\016\uffe8\051\uffe8\001\002\000\006\016\uffde\051" +
    "\uffde\001\002\000\010\025\046\044\047\072\007\001\002" +
    "\000\004\072\007\001\002\000\044\005\uffdb\013\uffdb\015" +
    "\uffdb\016\uffdb\030\uffdb\036\uffdb\044\037\045\uffdb\046\uffdb" +
    "\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057" +
    "\uffdb\060\uffdb\001\002\000\010\025\046\044\047\072\007" +
    "\001\002\000\040\005\072\013\uffd1\015\uffd1\016\uffd1\030" +
    "\uffd1\036\uffd1\045\uffd1\046\uffd1\051\uffd1\052\uffd1\053\uffd1" +
    "\054\uffd1\055\uffd1\056\uffd1\057\uffd1\001\002\000\040\005" +
    "\uffcb\013\uffcb\015\uffcb\016\uffcb\030\uffcb\036\uffcb\045\uffcb" +
    "\046\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056" +
    "\uffcb\057\uffcb\001\002\000\036\013\uffd9\015\uffd9\016\uffd9" +
    "\030\070\036\uffd9\045\uffd9\046\uffd9\051\uffd9\052\067\053" +
    "\061\054\063\055\062\056\064\057\060\001\002\000\006" +
    "\045\056\046\055\001\002\000\040\005\uffce\013\uffce\015" +
    "\uffce\016\uffce\030\uffce\036\uffce\045\uffce\046\uffce\051\uffce" +
    "\052\uffce\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce\001" +
    "\002\000\006\045\uffe3\046\uffe3\001\002\000\010\025\046" +
    "\044\047\072\007\001\002\000\012\003\050\025\046\044" +
    "\047\072\007\001\002\000\004\045\053\001\002\000\004" +
    "\045\052\001\002\000\040\005\uffca\013\uffca\015\uffca\016" +
    "\uffca\030\uffca\036\uffca\045\uffca\046\uffca\051\uffca\052\uffca" +
    "\053\uffca\054\uffca\055\uffca\056\uffca\057\uffca\001\002\000" +
    "\040\005\uffc9\013\uffc9\015\uffc9\016\uffc9\030\uffc9\036\uffc9" +
    "\045\uffc9\046\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055" +
    "\uffc9\056\uffc9\057\uffc9\001\002\000\040\005\uffc8\013\uffc8" +
    "\015\uffc8\016\uffc8\030\uffc8\036\uffc8\045\uffc8\046\uffc8\051" +
    "\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8" +
    "\001\002\000\010\025\046\044\047\072\007\001\002\000" +
    "\042\005\uffda\013\uffda\015\uffda\016\uffda\030\uffda\036\uffda" +
    "\045\uffda\046\uffda\051\uffda\052\uffda\053\uffda\054\uffda\055" +
    "\uffda\056\uffda\057\uffda\060\uffda\001\002\000\006\045\uffe2" +
    "\046\uffe2\001\002\000\010\025\uffd3\044\uffd3\072\uffd3\001" +
    "\002\000\010\025\uffd7\044\uffd7\072\uffd7\001\002\000\010" +
    "\025\uffd4\044\uffd4\072\uffd4\001\002\000\010\025\uffd2\044" +
    "\uffd2\072\uffd2\001\002\000\010\025\uffd6\044\uffd6\072\uffd6" +
    "\001\002\000\010\025\046\044\047\072\007\001\002\000" +
    "\010\025\046\044\047\072\007\001\002\000\010\025\uffd5" +
    "\044\uffd5\072\uffd5\001\002\000\010\025\uffcf\044\uffcf\072" +
    "\uffcf\001\002\000\040\005\072\013\uffd0\015\uffd0\016\uffd0" +
    "\030\uffd0\036\uffd0\045\uffd0\046\uffd0\051\uffd0\052\uffd0\053" +
    "\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\001\002\000\010" +
    "\025\uffcc\044\uffcc\072\uffcc\001\002\000\010\025\046\044" +
    "\047\072\007\001\002\000\040\005\uffcd\013\uffcd\015\uffcd" +
    "\016\uffcd\030\uffcd\036\uffcd\045\uffcd\046\uffcd\051\uffcd\052" +
    "\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\001\002" +
    "\000\022\013\uffd8\015\uffd8\016\uffd8\030\070\036\uffd8\045" +
    "\uffd8\046\uffd8\051\uffd8\001\002\000\006\045\077\046\055" +
    "\001\002\000\042\005\uffdc\013\uffdc\015\uffdc\016\uffdc\030" +
    "\uffdc\036\uffdc\045\uffdc\046\uffdc\051\uffdc\052\uffdc\053\uffdc" +
    "\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\001\002\000" +
    "\004\036\101\001\002\000\022\003\026\007\027\015\uffe5" +
    "\016\uffe5\021\024\043\020\051\uffe5\072\007\001\002\000" +
    "\010\015\103\016\uffe1\051\uffe1\001\002\000\022\003\026" +
    "\007\027\015\uffe5\016\uffe5\021\024\043\020\051\uffe5\072" +
    "\007\001\002\000\010\015\uffe7\016\uffe7\051\uffe7\001\002" +
    "\000\010\015\uffe0\016\uffe0\051\uffe0\001\002\000\004\047" +
    "\ufffe\001\002\000\010\025\046\044\047\072\007\001\002" +
    "\000\010\015\uffe9\016\uffe9\051\uffe9\001\002\000\004\013" +
    "\112\001\002\000\022\003\026\007\027\015\uffe5\016\uffe5" +
    "\021\024\043\020\051\uffe5\072\007\001\002\000\010\015" +
    "\uffe6\016\uffe6\051\uffe6\001\002\000\004\051\132\001\002" +
    "\000\014\003\114\007\ufffa\011\ufffa\042\ufffa\072\007\001" +
    "\002\000\014\003\ufff5\007\ufff5\011\ufff5\042\ufff5\072\ufff5" +
    "\001\002\000\006\046\121\050\122\001\002\000\006\046" +
    "\ufff1\050\ufff1\001\002\000\004\072\007\001\002\000\006" +
    "\003\123\072\007\001\002\000\004\051\uffec\001\002\000" +
    "\004\051\127\001\002\000\004\051\uffed\001\002\000\004" +
    "\051\uffeb\001\002\000\014\003\ufff3\007\ufff3\011\ufff3\042" +
    "\ufff3\072\ufff3\001\002\000\006\046\ufff0\050\ufff0\001\002" +
    "\000\014\003\ufff4\007\ufff4\011\ufff4\042\ufff4\072\ufff4\001" +
    "\002\000\014\003\ufff2\007\ufff2\011\ufff2\042\ufff2\072\ufff2" +
    "\001\002\000\004\051\145\001\002\000\014\003\ufff9\007" +
    "\ufff9\011\ufff9\042\ufff9\072\ufff9\001\002\000\014\003\133" +
    "\007\ufffb\011\ufffb\042\ufffb\072\007\001\002\000\004\053" +
    "\137\001\002\000\004\072\007\001\002\000\004\051\uffef" +
    "\001\002\000\004\051\143\001\002\000\004\051\uffee\001" +
    "\002\000\014\003\ufff7\007\ufff7\011\ufff7\042\ufff7\072\ufff7" +
    "\001\002\000\014\003\ufff8\007\ufff8\011\ufff8\042\ufff8\072" +
    "\ufff8\001\002\000\014\003\ufff6\007\ufff6\011\ufff6\042\ufff6" +
    "\072\ufff6\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\012\005\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\135\006\134\014\133\001\001\000\012\004\117\007" +
    "\114\010\115\012\116\001\001\000\012\004\024\011\022" +
    "\020\021\026\020\001\001\000\016\004\024\015\110\020" +
    "\040\021\041\022\037\023\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\004\024\015" +
    "\077\020\040\021\041\022\037\023\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\024\011\027\020" +
    "\021\026\020\001\001\000\002\001\001\000\010\004\024" +
    "\020\021\026\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\004\024\013\075\015\044\020\040\021\041" +
    "\022\037\023\043\001\001\000\004\004\035\001\001\000" +
    "\002\001\001\000\020\004\024\013\042\015\044\020\040" +
    "\021\041\022\037\023\043\001\001\000\004\033\072\001" +
    "\001\000\002\001\001\000\006\031\064\032\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\024\020\040\023\053\001\001\000\016\004\024" +
    "\015\050\020\040\021\041\022\037\023\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\004\024\015\056\020" +
    "\040\021\041\022\037\023\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\004\024\020\040\021\074\022\037\023\043\001\001\000" +
    "\012\004\024\020\040\022\070\023\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\072\001\001\000" +
    "\002\001\001\000\010\004\024\020\040\023\073\001\001" +
    "\000\002\001\001\000\004\032\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\024" +
    "\020\021\026\101\001\001\000\004\027\103\001\001\000" +
    "\010\004\024\020\021\026\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\004\024\015" +
    "\107\020\040\021\041\022\037\023\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\024\020\021\026" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\117\010\130\012\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\127\001\001" +
    "\000\010\004\125\024\123\025\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\135\014\143\001\001\000\002\001\001\000\010\004" +
    "\141\016\140\017\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  // this controls whether the parser offers extra debugging output
  public static boolean debug;

  // this indicates whether there was a parsing error
  public boolean error;

  private PrintStream errorStream;

  public Parser (MPCScanner s, PrintStream es) {
    super(s);
    errorStream = es;
  }

  public void syntax_error (Symbol currentToken) {
    Token t = (Token) currentToken.value;
    mpc.ShowError (currentToken.left, "Syntax Error: " + t.toPrettyString());
    error = true;
  }

  public static TypeId ROOT_TYPE = new TypeId(new Binding((TokenId)(TokenId.get("root")), -1, -1));


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= NOT factor 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TokenKey n = (TokenKey)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprUnary(TokenKey.NOT, e, nleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // factor ::= LPAREN error RPAREN 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TokenOp l = (TokenOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TokenOp r = (TokenOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprError(lleft, rright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // factor ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // factor ::= variable 
            {
              Expr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // multOp ::= AND 
            {
              Token RESULT =null;
		 RESULT = TokenKey.AND; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multOp",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // term ::= term multOp factor 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprBinary(op, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // term ::= factor 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // addOp ::= OR 
            {
              Token RESULT =null;
		 RESULT = TokenKey.OR;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addOp",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // simpleExpr ::= simpleExpr addOp term 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprBinary(op, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleExpr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // simpleExpr ::= term 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleExpr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // relOp ::= GT 
            {
              Token RESULT =null;
		 RESULT = TokenOp.GT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relOp",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // relOp ::= GE 
            {
              Token RESULT =null;
		 RESULT = TokenOp.GE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relOp",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // relOp ::= LE 
            {
              Token RESULT =null;
		 RESULT = TokenOp.LE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relOp",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // relOp ::= LT 
            {
              Token RESULT =null;
		 RESULT = TokenOp.LT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relOp",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // relOp ::= NE 
            {
              Token RESULT =null;
		 RESULT = TokenOp.NE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relOp",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // relOp ::= EQ 
            {
              Token RESULT =null;
		 RESULT = TokenOp.EQ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relOp",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= simpleExpr relOp simpleExpr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprBinary(op, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= simpleExpr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // variable ::= binding DOT binding LPAREN exprList RPAREN 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Binding bb = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expr> ee = (List<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TokenOp r = (TokenOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // variable ::= binding DOT binding 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Binding bb = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // variable ::= binding LPAREN exprList RPAREN 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expr> ee = (List<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TokenOp r = (TokenOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ExprCall cc = new ExprCall(false, b, new Exprs(ee, eeleft, eeright), bleft, rright);
     	     RESULT = cc; 
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // variable ::= binding 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprBinding(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmtList ::= stmtList SEMI stmt 
            {
              List<Stmt> RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Stmt> ss = (List<Stmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 (RESULT = ss).add(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmtList ::= stmt 
            {
              List<Stmt> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 (RESULT = new ArrayList<Stmt>(1)).add(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // optElse ::= ELSE stmt 
            {
              Stmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optElse",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // optElse ::= 
            {
              Stmt RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optElse",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exprList ::= exprList COMMA expr 
            {
              List<Expr> RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expr> ee = (List<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TokenOp c = (TokenOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			ee.add(e);
			RESULT = ee;	
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exprList ::= expr 
            {
              List<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ArrayList<Expr> ee = new ArrayList<Expr>();
		  		ee.add(e);
		  		RESULT = ee;
		  		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= error 
            {
              Stmt RESULT =null;
		 RESULT = new StmtEmpty(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= 
            {
              Stmt RESULT =null;
		 RESULT = new StmtEmpty(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= WHILE expr DO stmt 
            {
              Stmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TokenKey w = (TokenKey)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StmtWhile(e, s, wleft, sright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= IF expr THEN stmt optElse 
            {
              Stmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TokenKey i = (TokenKey)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stmt s1 = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s2 = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 int endPos = ((s2 == null) ? s1right : s2right);
             RESULT = new StmtIf(e, s1, s2, ileft, endPos);
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= BEGIN stmtList END 
            {
              Stmt RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TokenKey b = (TokenKey)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Stmt> ss = (List<Stmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TokenKey e = (TokenKey)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StmtCompound(new Stmts(ss, bleft, eright), bleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= variable ASSIGN expr 
            {
              Stmt RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StmtAssign(v, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= variable 
            {
              Stmt RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new StmtCall(v);
    	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // simpleType ::= binding 
            {
              Type RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeId(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleType",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= error 
            {
              Type RESULT =null;
		 RESULT = Type.theErrorType; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= simpleType 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // unsignedConstant ::= binding 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprBinding(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unsignedConstant",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // constant ::= unsignedConstant 
            {
              Expr RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr u = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = u; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bindingList ::= bindingList COMMA binding 
            {
              List<Binding> RESULT =null;
		int bbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Binding> bb = (List<Binding>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 (RESULT = bb).add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bindingList",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bindingList ::= binding 
            {
              List<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 (RESULT = new ArrayList<Binding>(1)).add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bindingList",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // varDecl ::= error SEMI 
            {
              List<Decl> RESULT =null;
		 RESULT = new ArrayList<Decl>(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDecl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // varDecl ::= bindingList COLON type SEMI 
            {
              List<Decl> RESULT =null;
		int bbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Binding> bb = (List<Binding>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Decl.varDeclsOf(bb, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDecl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // varDecls ::= varDecls varDecl 
            {
              List<Decl> RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Decl> dd = (List<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 (RESULT = dd).addAll(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDecls",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // varDecls ::= varDecl 
            {
              List<Decl> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDecls",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constDefn ::= error SEMI 
            {
              Decl RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constDefn",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constDefn ::= binding EQ constant SEMI 
            {
              Decl RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DeclConst(b, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constDefn",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constDefns ::= constDefns constDefn 
            {
              List<Decl> RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Decl> dd = (List<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 (RESULT = dd).add(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constDefns",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constDefns ::= constDefn 
            {
              List<Decl> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 (RESULT = new ArrayList<Decl>(1)).add(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constDefns",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // optDefns ::= optDefns VAR varDecls 
            {
              List<Decl> RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Decl> dd = (List<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Decl> vv = (List<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 (RESULT = dd).addAll(vv); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optDefns",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // optDefns ::= optDefns CONST constDefns 
            {
              List<Decl> RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Decl> dd = (List<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Decl> cc = (List<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 (RESULT = dd).addAll(cc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optDefns",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // optDefns ::= 
            {
              List<Decl> RESULT =null;
		 RESULT = new ArrayList<Decl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optDefns",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // binding ::= ID 
            {
              Binding RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TokenId n = (TokenId)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Binding(n, nleft, nright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binding",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // block ::= optDefns BEGIN stmtList END 
            {
              Block RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Decl> dd = (List<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TokenKey b = (TokenKey)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Stmt> ss = (List<Stmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TokenKey e = (TokenKey)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 int pos  = (dd == null) ? bleft : ddleft;
             int dEnd = (dd == null) ? bleft : ddright;
             RESULT = new Block(new Decls(dd, pos, dEnd), new Stmts(ss, bleft, eright), pos, eright);
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= error 
            {
              Program RESULT =null;
		 RESULT = (Program)null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM binding SEMI block DOT 
            {
              Program RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TokenKey p = (TokenKey)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int blkleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blkright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block blk = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dotleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dotright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TokenOp dot = (TokenOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
             Decl d = new DeclProgram(b);
             Decls dd = new Decls(d);
             RESULT = new Program(dd, blk, pleft, dotright);
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


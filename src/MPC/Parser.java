
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 02 00:13:43 EST 2022
//----------------------------------------------------

package MPC;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 02 00:13:43 EST 2022
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\202\000\002\002\007\000\002\002\004\000\002\002" +
    "\003\000\002\003\006\000\002\004\003\000\002\007\002" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\004\000\002\007\004\000\002\034\010\000\002" +
    "\035\012\000\002\010\003\000\002\010\004\000\002\015" +
    "\003\000\002\015\004\000\002\036\006\000\002\033\006" +
    "\000\002\033\004\000\002\011\003\000\002\011\004\000" +
    "\002\012\006\000\002\012\004\000\002\024\003\000\002" +
    "\024\005\000\002\040\003\000\002\040\003\000\002\040" +
    "\004\000\002\056\003\000\002\056\003\000\002\041\003" +
    "\000\002\041\003\000\002\050\003\000\002\050\010\000" +
    "\002\050\005\000\002\050\004\000\002\050\011\000\002" +
    "\050\010\000\002\050\003\000\002\046\005\000\002\005" +
    "\002\000\002\005\003\000\002\021\004\000\002\021\002" +
    "\000\002\022\003\000\002\022\004\000\002\022\005\000" +
    "\002\047\004\000\002\047\004\000\002\053\005\000\002" +
    "\052\007\000\002\006\002\000\002\006\004\000\002\014" +
    "\003\000\002\014\007\000\002\014\002\000\002\013\006" +
    "\000\002\013\005\000\002\032\002\000\002\032\004\000" +
    "\002\031\005\000\002\031\003\000\002\031\004\000\002" +
    "\020\002\000\002\020\003\000\002\016\003\000\002\016" +
    "\005\000\002\016\004\000\002\062\002\000\002\062\003" +
    "\000\002\017\005\000\002\027\005\000\002\027\003\000" +
    "\002\051\003\000\002\051\005\000\002\054\003\000\002" +
    "\054\005\000\002\054\005\000\002\054\007\000\002\054" +
    "\006\000\002\054\002\000\002\054\010\000\002\054\006" +
    "\000\002\054\012\000\002\054\012\000\002\054\003\000" +
    "\002\030\003\000\002\030\005\000\002\063\005\000\002" +
    "\026\003\000\002\026\005\000\002\025\003\000\002\025" +
    "\005\000\002\055\002\000\002\055\004\000\002\023\003" +
    "\000\002\023\005\000\002\042\003\000\002\042\006\000" +
    "\002\042\006\000\002\042\005\000\002\042\010\000\002" +
    "\042\004\000\002\037\003\000\002\037\005\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\043\003\000" +
    "\002\043\005\000\002\060\003\000\002\060\003\000\002" +
    "\060\003\000\002\044\003\000\002\044\005\000\002\061" +
    "\003\000\002\061\003\000\002\061\003\000\002\061\003" +
    "\000\002\045\003\000\002\045\005\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\045\005\000\002" +
    "\045\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\372\000\006\003\005\033\006\001\002\000\004\002" +
    "\374\001\002\000\004\002\uffff\001\002\000\004\072\007" +
    "\001\002\000\116\004\ufffd\005\ufffd\012\ufffd\013\ufffd\014" +
    "\ufffd\015\ufffd\016\ufffd\022\ufffd\023\ufffd\026\ufffd\027\ufffd" +
    "\030\ufffd\031\ufffd\036\ufffd\037\ufffd\041\ufffd\042\ufffd\044" +
    "\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd" +
    "\053\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd\060\ufffd\061" +
    "\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd\066\ufffd\067\ufffd" +
    "\072\ufffd\001\002\000\004\051\011\001\002\000\016\007" +
    "\ufffc\011\ufffc\020\ufffc\032\ufffc\040\ufffc\042\ufffc\001\002" +
    "\000\016\007\021\011\016\020\023\032\017\040\024\042" +
    "\015\001\002\000\004\047\014\001\002\000\004\002\001" +
    "\001\002\000\006\003\363\072\007\001\002\000\006\003" +
    "\352\072\007\001\002\000\004\072\007\001\002\000\016" +
    "\007\ufff8\011\ufff8\020\ufff8\032\ufff8\040\ufff8\042\ufff8\001" +
    "\002\000\026\003\205\007\210\010\207\016\uffb0\017\200" +
    "\021\204\035\177\043\176\051\uffb0\072\007\001\002\000" +
    "\016\007\ufff7\011\ufff7\020\ufff7\032\ufff7\040\ufff7\042\ufff7" +
    "\001\002\000\004\072\007\001\002\000\004\072\007\001" +
    "\002\000\020\007\ufff2\011\ufff2\020\ufff2\032\ufff2\040\ufff2" +
    "\042\ufff2\072\ufff2\001\002\000\020\007\ufffa\011\ufffa\020" +
    "\ufffa\032\ufffa\040\ufffa\042\ufffa\072\007\001\002\000\004" +
    "\053\030\001\002\000\030\003\045\004\uffd8\006\035\026" +
    "\uffd8\034\040\062\041\063\031\066\037\070\032\071\042" +
    "\072\007\001\002\000\006\070\uffe4\072\uffe4\001\002\000" +
    "\022\016\uffe1\022\uffe1\031\uffe1\046\uffe1\050\uffe1\051\uffe1" +
    "\065\uffe1\067\uffe1\001\002\000\006\070\032\072\007\001" +
    "\002\000\022\016\uffe6\022\uffe6\031\uffe6\046\uffe6\050\uffe6" +
    "\051\uffe6\065\uffe6\067\uffe6\001\002\000\004\064\154\001" +
    "\002\000\012\016\uffe0\022\uffe0\031\uffe0\051\uffe0\001\002" +
    "\000\004\072\007\001\002\000\004\072\007\001\002\000" +
    "\006\070\uffe3\072\uffe3\001\002\000\022\016\uffe7\022\uffe7" +
    "\031\uffe7\046\uffe7\050\uffe7\051\uffe7\065\uffe7\067\uffe7\001" +
    "\002\000\004\067\146\001\002\000\004\051\145\001\002" +
    "\000\012\016\uffda\022\uffda\031\uffda\051\uffda\001\002\000" +
    "\020\004\uffd7\016\uffb7\022\uffb7\026\uffd7\031\uffb7\051\uffb7" +
    "\067\uffe2\001\002\000\006\004\051\026\050\001\002\000" +
    "\012\016\uffc1\022\uffc1\031\uffc1\072\007\001\002\000\004" +
    "\026\052\001\002\000\012\016\uffc1\022\uffc1\031\uffc1\072" +
    "\007\001\002\000\010\016\uffd5\022\066\031\uffd5\001\002" +
    "\000\012\016\uffc0\022\uffc0\031\uffc0\051\064\001\002\000" +
    "\012\016\uffbf\022\uffbf\031\uffbf\051\uffbf\001\002\000\006" +
    "\046\uffe9\050\uffe9\001\002\000\006\046\060\050\061\001" +
    "\002\000\004\072\007\001\002\000\030\003\045\004\uffd8" +
    "\006\035\026\uffd8\034\040\062\041\063\031\066\037\070" +
    "\032\071\042\072\007\001\002\000\012\016\uffba\022\uffba" +
    "\031\uffba\051\uffba\001\002\000\006\046\uffe8\050\uffe8\001" +
    "\002\000\014\016\uffbd\022\uffbd\031\uffbd\051\uffbd\072\007" +
    "\001\002\000\012\016\uffbe\022\uffbe\031\uffbe\051\uffbe\001" +
    "\002\000\006\020\105\032\102\001\002\000\006\016\uffc6" +
    "\031\071\001\002\000\004\016\101\001\002\000\004\072" +
    "\007\001\002\000\006\016\uffc3\051\uffc3\001\002\000\004" +
    "\053\077\001\002\000\006\016\uffc5\051\075\001\002\000" +
    "\010\016\uffc2\051\uffc2\072\007\001\002\000\006\016\uffc4" +
    "\051\uffc4\001\002\000\004\072\007\001\002\000\006\016" +
    "\uffd9\051\uffd9\001\002\000\012\016\uffdc\022\uffdc\031\uffdc" +
    "\051\uffdc\001\002\000\004\072\007\001\002\000\010\016" +
    "\uffd6\031\uffd6\051\135\001\002\000\012\016\uffcd\031\uffcd" +
    "\051\uffcd\053\110\001\002\000\004\072\007\001\002\000" +
    "\010\016\uffd4\031\uffd4\051\uffd4\001\002\000\012\016\uffcd" +
    "\031\uffcd\051\uffcd\053\110\001\002\000\004\072\007\001" +
    "\002\000\010\016\uffd1\031\uffd1\051\uffd1\001\002\000\010" +
    "\016\uffcc\031\uffcc\051\uffcc\001\002\000\012\042\114\044" +
    "\116\050\uffc9\072\007\001\002\000\004\072\007\001\002" +
    "\000\014\016\uffcb\031\uffcb\050\uffcb\051\uffcb\053\uffcb\001" +
    "\002\000\012\042\114\044\116\051\uffc9\072\007\001\002" +
    "\000\006\046\060\050\123\001\002\000\004\050\121\001" +
    "\002\000\004\072\007\001\002\000\012\016\uffce\031\uffce" +
    "\051\uffce\053\uffce\001\002\000\004\072\007\001\002\000" +
    "\016\016\uffc7\031\uffc7\045\uffc7\050\uffc7\051\uffc7\053\uffc7" +
    "\001\002\000\004\051\126\001\002\000\006\042\114\072" +
    "\007\001\002\000\004\045\130\001\002\000\014\016\uffca" +
    "\031\uffca\050\uffca\051\uffca\053\uffca\001\002\000\006\046" +
    "\060\050\132\001\002\000\004\072\007\001\002\000\016" +
    "\016\uffc8\031\uffc8\045\uffc8\050\uffc8\051\uffc8\053\uffc8\001" +
    "\002\000\010\016\uffd0\031\uffd0\051\uffd0\001\002\000\014" +
    "\016\uffd3\020\105\031\uffd3\032\102\051\uffd3\001\002\000" +
    "\010\016\uffd2\031\uffd2\051\uffd2\001\002\000\020\016\uffc9" +
    "\031\uffc9\042\114\044\116\051\uffc9\053\uffc9\072\007\001" +
    "\002\000\012\016\uffcf\031\uffcf\051\uffcf\053\uffcf\001\002" +
    "\000\010\016\uffd5\022\066\031\uffd5\001\002\000\006\016" +
    "\uffc6\031\071\001\002\000\004\016\144\001\002\000\012" +
    "\016\uffdb\022\uffdb\031\uffdb\051\uffdb\001\002\000\020\007" +
    "\ufff0\011\ufff0\020\ufff0\032\ufff0\040\ufff0\042\ufff0\072\ufff0" +
    "\001\002\000\014\062\041\063\031\070\032\071\042\072" +
    "\007\001\002\000\014\016\uffb6\022\uffb6\031\uffb6\051\uffb6" +
    "\065\uffb6\001\002\000\022\016\uffe2\022\uffe2\031\uffe2\046" +
    "\uffe2\050\uffe2\051\uffe2\065\uffe2\067\uffe2\001\002\000\006" +
    "\016\152\051\064\001\002\000\012\016\uffde\022\uffde\031" +
    "\uffde\051\uffde\001\002\000\012\016\uffdd\022\uffdd\031\uffdd" +
    "\051\uffdd\001\002\000\014\062\041\063\031\070\032\071" +
    "\042\072\007\001\002\000\006\051\uffb8\065\uffb8\001\002" +
    "\000\010\051\uffb7\065\uffb7\067\uffe2\001\002\000\006\051" +
    "\161\065\160\001\002\000\004\027\163\001\002\000\014" +
    "\062\041\063\031\070\032\071\042\072\007\001\002\000" +
    "\006\051\uffb9\065\uffb9\001\002\000\030\003\045\004\uffd8" +
    "\006\035\026\uffd8\034\040\062\041\063\031\066\037\070" +
    "\032\071\042\072\007\001\002\000\012\016\uffdf\022\uffdf" +
    "\031\uffdf\051\uffdf\001\002\000\022\016\uffe5\022\uffe5\031" +
    "\uffe5\046\uffe5\050\uffe5\051\uffe5\065\uffe5\067\uffe5\001\002" +
    "\000\020\007\ufff1\011\ufff1\020\ufff1\032\ufff1\040\ufff1\042" +
    "\ufff1\072\ufff1\001\002\000\012\042\114\044\116\050\uffc9" +
    "\072\007\001\002\000\004\050\171\001\002\000\004\072" +
    "\007\001\002\000\004\051\173\001\002\000\016\007\ufffc" +
    "\011\ufffc\020\ufffc\032\ufffc\040\ufffc\042\ufffc\001\002\000" +
    "\004\051\175\001\002\000\016\007\ufff5\011\ufff5\020\ufff5" +
    "\032\ufff5\040\ufff5\042\ufff5\001\002\000\016\024\216\025" +
    "\225\044\226\070\215\071\222\072\007\001\002\000\026" +
    "\003\205\007\210\010\207\017\200\021\204\035\177\041" +
    "\uffb0\043\176\051\uffb0\072\007\001\002\000\004\072\007" +
    "\001\002\000\010\016\uffa1\041\uffa1\051\uffa1\001\002\000" +
    "\022\015\uffb5\016\uffb5\041\uffb5\047\276\051\uffb5\060\322" +
    "\064\274\066\275\001\002\000\006\016\321\051\212\001" +
    "\002\000\016\024\216\025\225\044\226\070\215\071\222" +
    "\072\007\001\002\000\012\015\uffab\016\uffab\041\uffab\051" +
    "\uffab\001\002\000\076\005\uff9f\012\uff9f\013\uff9f\014\uff9f" +
    "\015\uff9f\016\uff9f\023\uff9f\027\uff9f\030\uff9f\036\uff9f\037" +
    "\uff9f\041\uff9f\044\310\045\uff9f\046\uff9f\047\uff9f\051\uff9f" +
    "\052\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\060" +
    "\uff9f\061\uff9f\062\uff9f\063\uff9f\064\uff9f\065\uff9f\066\uff9f" +
    "\001\002\000\016\024\216\025\225\044\226\070\215\071" +
    "\222\072\007\001\002\000\026\003\205\007\210\010\207" +
    "\016\uffb0\017\200\021\204\035\177\043\176\051\uffb0\072" +
    "\007\001\002\000\006\016\213\051\212\001\002\000\030" +
    "\003\205\007\210\010\207\016\uffb0\017\200\021\204\035" +
    "\177\041\uffb0\043\176\051\uffb0\072\007\001\002\000\012" +
    "\015\uffb3\016\uffb3\041\uffb3\051\uffb3\001\002\000\010\016" +
    "\uffa0\041\uffa0\051\uffa0\001\002\000\064\005\uff84\012\uff84" +
    "\013\uff84\014\uff84\015\uff84\016\uff84\023\uff84\027\uff84\030" +
    "\uff84\036\uff84\037\uff84\041\uff84\045\uff84\046\uff84\051\uff84" +
    "\052\uff84\053\uff84\054\uff84\055\uff84\056\uff84\057\uff84\061" +
    "\uff84\062\uff84\063\uff84\065\uff84\001\002\000\064\005\uff82" +
    "\012\uff82\013\uff82\014\uff82\015\uff82\016\uff82\023\uff82\027" +
    "\uff82\030\uff82\036\uff82\037\uff82\041\uff82\045\uff82\046\uff82" +
    "\051\uff82\052\uff82\053\uff82\054\uff82\055\uff82\056\uff82\057" +
    "\uff82\061\uff82\062\uff82\063\uff82\065\uff82\001\002\000\064" +
    "\005\266\012\270\013\uff91\014\uff91\015\uff91\016\uff91\023" +
    "\265\027\uff91\030\uff91\036\uff91\037\uff91\041\uff91\045\uff91" +
    "\046\uff91\051\uff91\052\uff91\053\uff91\054\uff91\055\uff91\056" +
    "\uff91\057\uff91\061\271\062\uff91\063\uff91\065\uff91\001\002" +
    "\000\072\005\uff86\012\uff86\013\uff86\014\uff86\015\uff86\016" +
    "\uff86\023\uff86\027\uff86\030\uff86\036\uff86\037\uff86\041\uff86" +
    "\045\uff86\046\uff86\047\276\051\uff86\052\uff86\053\uff86\054" +
    "\uff86\055\uff86\056\uff86\057\uff86\061\uff86\062\uff86\063\uff86" +
    "\064\274\065\uff86\066\275\001\002\000\054\013\uff99\014" +
    "\uff99\015\uff99\016\uff99\027\uff99\030\263\036\uff99\037\uff99" +
    "\041\uff99\045\uff99\046\uff99\051\uff99\052\262\053\254\054" +
    "\256\055\255\056\257\057\252\062\253\063\251\065\uff99" +
    "\001\002\000\064\005\uff83\012\uff83\013\uff83\014\uff83\015" +
    "\uff83\016\uff83\023\uff83\027\uff83\030\uff83\036\uff83\037\uff83" +
    "\041\uff83\045\uff83\046\uff83\051\uff83\052\uff83\053\uff83\054" +
    "\uff83\055\uff83\056\uff83\057\uff83\061\uff83\062\uff83\063\uff83" +
    "\065\uff83\001\002\000\064\005\uff8c\012\uff8c\013\uff8c\014" +
    "\uff8c\015\uff8c\016\uff8c\023\uff8c\027\uff8c\030\uff8c\036\uff8c" +
    "\037\uff8c\041\uff8c\045\uff8c\046\uff8c\051\uff8c\052\uff8c\053" +
    "\uff8c\054\uff8c\055\uff8c\056\uff8c\057\uff8c\061\uff8c\062\uff8c" +
    "\063\uff8c\065\uff8c\001\002\000\004\027\234\001\002\000" +
    "\016\024\216\025\225\044\226\070\215\071\222\072\007" +
    "\001\002\000\020\003\227\024\216\025\225\044\226\070" +
    "\215\071\222\072\007\001\002\000\004\045\232\001\002" +
    "\000\004\045\231\001\002\000\064\005\uff85\012\uff85\013" +
    "\uff85\014\uff85\015\uff85\016\uff85\023\uff85\027\uff85\030\uff85" +
    "\036\uff85\037\uff85\041\uff85\045\uff85\046\uff85\051\uff85\052" +
    "\uff85\053\uff85\054\uff85\055\uff85\056\uff85\057\uff85\061\uff85" +
    "\062\uff85\063\uff85\065\uff85\001\002\000\064\005\uff81\012" +
    "\uff81\013\uff81\014\uff81\015\uff81\016\uff81\023\uff81\027\uff81" +
    "\030\uff81\036\uff81\037\uff81\041\uff81\045\uff81\046\uff81\051" +
    "\uff81\052\uff81\053\uff81\054\uff81\055\uff81\056\uff81\057\uff81" +
    "\061\uff81\062\uff81\063\uff81\065\uff81\001\002\000\064\005" +
    "\uff80\012\uff80\013\uff80\014\uff80\015\uff80\016\uff80\023\uff80" +
    "\027\uff80\030\uff80\036\uff80\037\uff80\041\uff80\045\uff80\046" +
    "\uff80\051\uff80\052\uff80\053\uff80\054\uff80\055\uff80\056\uff80" +
    "\057\uff80\061\uff80\062\uff80\063\uff80\065\uff80\001\002\000" +
    "\014\062\041\063\031\070\032\071\042\072\007\001\002" +
    "\000\006\016\uffaa\051\uffaa\001\002\000\006\016\uffbc\051" +
    "\245\001\002\000\006\046\uffa7\050\uffa7\001\002\000\006" +
    "\046\241\050\242\001\002\000\014\062\041\063\031\070" +
    "\032\071\042\072\007\001\002\000\026\003\205\007\210" +
    "\010\207\016\uffb0\017\200\021\204\035\177\043\176\051" +
    "\uffb0\072\007\001\002\000\006\016\uffa8\051\uffa8\001\002" +
    "\000\006\046\uffa6\050\uffa6\001\002\000\016\016\uffbb\062" +
    "\041\063\031\070\032\071\042\072\007\001\002\000\004" +
    "\016\247\001\002\000\012\015\uffaf\016\uffaf\041\uffaf\051" +
    "\uffaf\001\002\000\006\016\uffa9\051\uffa9\001\002\000\016" +
    "\024\uff8d\025\uff8d\044\uff8d\070\uff8d\071\uff8d\072\uff8d\001" +
    "\002\000\016\024\uff93\025\uff93\044\uff93\070\uff93\071\uff93" +
    "\072\uff93\001\002\000\016\024\uff8e\025\uff8e\044\uff8e\070" +
    "\uff8e\071\uff8e\072\uff8e\001\002\000\016\024\uff97\025\uff97" +
    "\044\uff97\070\uff97\071\uff97\072\uff97\001\002\000\016\024" +
    "\uff94\025\uff94\044\uff94\070\uff94\071\uff94\072\uff94\001\002" +
    "\000\016\024\uff92\025\uff92\044\uff92\070\uff92\071\uff92\072" +
    "\uff92\001\002\000\016\024\uff96\025\uff96\044\uff96\070\uff96" +
    "\071\uff96\072\uff96\001\002\000\016\024\216\025\225\044" +
    "\226\070\215\071\222\072\007\001\002\000\016\024\216" +
    "\025\225\044\226\070\215\071\222\072\007\001\002\000" +
    "\016\024\uff95\025\uff95\044\uff95\070\uff95\071\uff95\072\uff95" +
    "\001\002\000\016\024\uff8f\025\uff8f\044\uff8f\070\uff8f\071" +
    "\uff8f\072\uff8f\001\002\000\064\005\266\012\270\013\uff90" +
    "\014\uff90\015\uff90\016\uff90\023\265\027\uff90\030\uff90\036" +
    "\uff90\037\uff90\041\uff90\045\uff90\046\uff90\051\uff90\052\uff90" +
    "\053\uff90\054\uff90\055\uff90\056\uff90\057\uff90\061\271\062" +
    "\uff90\063\uff90\065\uff90\001\002\000\016\024\uff88\025\uff88" +
    "\044\uff88\070\uff88\071\uff88\072\uff88\001\002\000\016\024" +
    "\uff8a\025\uff8a\044\uff8a\070\uff8a\071\uff8a\072\uff8a\001\002" +
    "\000\016\024\216\025\225\044\226\070\215\071\222\072" +
    "\007\001\002\000\016\024\uff89\025\uff89\044\uff89\070\uff89" +
    "\071\uff89\072\uff89\001\002\000\016\024\uff87\025\uff87\044" +
    "\uff87\070\uff87\071\uff87\072\uff87\001\002\000\064\005\uff8b" +
    "\012\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b\023\uff8b\027" +
    "\uff8b\030\uff8b\036\uff8b\037\uff8b\041\uff8b\045\uff8b\046\uff8b" +
    "\051\uff8b\052\uff8b\053\uff8b\054\uff8b\055\uff8b\056\uff8b\057" +
    "\uff8b\061\uff8b\062\uff8b\063\uff8b\065\uff8b\001\002\000\040" +
    "\013\uff98\014\uff98\015\uff98\016\uff98\027\uff98\030\263\036" +
    "\uff98\037\uff98\041\uff98\045\uff98\046\uff98\051\uff98\062\253" +
    "\063\251\065\uff98\001\002\000\016\024\216\025\225\044" +
    "\226\070\215\071\222\072\007\001\002\000\074\005\uff9a" +
    "\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\023\uff9a\027" +
    "\uff9a\030\uff9a\036\uff9a\037\uff9a\041\uff9a\045\uff9a\046\uff9a" +
    "\047\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056" +
    "\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a" +
    "\065\uff9a\066\uff9a\001\002\000\004\072\007\001\002\000" +
    "\076\005\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c" +
    "\023\uff9c\027\uff9c\030\uff9c\036\uff9c\037\uff9c\041\uff9c\044" +
    "\300\045\uff9c\046\uff9c\047\uff9c\051\uff9c\052\uff9c\053\uff9c" +
    "\054\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\061\uff9c\062" +
    "\uff9c\063\uff9c\064\uff9c\065\uff9c\066\uff9c\001\002\000\016" +
    "\024\216\025\225\044\226\070\215\071\222\072\007\001" +
    "\002\000\006\045\304\046\303\001\002\000\010\045\uffa5" +
    "\046\uffa5\065\uffa5\001\002\000\016\024\216\025\225\044" +
    "\226\070\215\071\222\072\007\001\002\000\074\005\uff9b" +
    "\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\023\uff9b\027" +
    "\uff9b\030\uff9b\036\uff9b\037\uff9b\041\uff9b\045\uff9b\046\uff9b" +
    "\047\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b\056" +
    "\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b\063\uff9b\064\uff9b" +
    "\065\uff9b\066\uff9b\001\002\000\010\045\uffa4\046\uffa4\065" +
    "\uffa4\001\002\000\006\046\303\065\307\001\002\000\074" +
    "\005\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\023" +
    "\uff9d\027\uff9d\030\uff9d\036\uff9d\037\uff9d\041\uff9d\045\uff9d" +
    "\046\uff9d\047\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\055" +
    "\uff9d\056\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d" +
    "\064\uff9d\065\uff9d\066\uff9d\001\002\000\016\024\216\025" +
    "\225\044\226\070\215\071\222\072\007\001\002\000\006" +
    "\045\312\046\303\001\002\000\074\005\uff9e\012\uff9e\013" +
    "\uff9e\014\uff9e\015\uff9e\016\uff9e\023\uff9e\027\uff9e\030\uff9e" +
    "\036\uff9e\037\uff9e\041\uff9e\045\uff9e\046\uff9e\047\uff9e\051" +
    "\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e" +
    "\060\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e\065\uff9e\066" +
    "\uff9e\001\002\000\004\036\314\001\002\000\032\003\205" +
    "\007\210\010\207\015\uffb0\016\uffb0\017\200\021\204\035" +
    "\177\041\uffb0\043\176\051\uffb0\072\007\001\002\000\012" +
    "\015\316\016\uffa3\041\uffa3\051\uffa3\001\002\000\032\003" +
    "\205\007\210\010\207\015\uffb0\016\uffb0\017\200\021\204" +
    "\035\177\041\uffb0\043\176\051\uffb0\072\007\001\002\000" +
    "\012\015\uffb2\016\uffb2\041\uffb2\051\uffb2\001\002\000\012" +
    "\015\uffa2\016\uffa2\041\uffa2\051\uffa2\001\002\000\006\047" +
    "\ufffe\051\ufffe\001\002\000\016\024\216\025\225\044\226" +
    "\070\215\071\222\072\007\001\002\000\012\015\uffb4\016" +
    "\uffb4\041\uffb4\051\uffb4\001\002\000\004\060\325\001\002" +
    "\000\016\024\216\025\225\044\226\070\215\071\222\072" +
    "\007\001\002\000\006\014\330\037\327\001\002\000\016" +
    "\024\216\025\225\044\226\070\215\071\222\072\007\001" +
    "\002\000\016\024\216\025\225\044\226\070\215\071\222" +
    "\072\007\001\002\000\004\013\332\001\002\000\032\003" +
    "\205\007\210\010\207\015\uffb0\016\uffb0\017\200\021\204" +
    "\035\177\041\uffb0\043\176\051\uffb0\072\007\001\002\000" +
    "\012\015\uffac\016\uffac\041\uffac\051\uffac\001\002\000\004" +
    "\013\335\001\002\000\032\003\205\007\210\010\207\015" +
    "\uffb0\016\uffb0\017\200\021\204\035\177\041\uffb0\043\176" +
    "\051\uffb0\072\007\001\002\000\012\015\uffad\016\uffad\041" +
    "\uffad\051\uffad\001\002\000\006\041\340\051\212\001\002" +
    "\000\016\024\216\025\225\044\226\070\215\071\222\072" +
    "\007\001\002\000\012\015\uffae\016\uffae\041\uffae\051\uffae" +
    "\001\002\000\004\013\343\001\002\000\032\003\205\007" +
    "\210\010\207\015\uffb0\016\uffb0\017\200\021\204\035\177" +
    "\041\uffb0\043\176\051\uffb0\072\007\001\002\000\012\015" +
    "\uffb1\016\uffb1\041\uffb1\051\uffb1\001\002\000\012\042\114" +
    "\044\116\051\uffc9\072\007\001\002\000\004\051\347\001" +
    "\002\000\016\007\ufffc\011\ufffc\020\ufffc\032\ufffc\040\ufffc" +
    "\042\ufffc\001\002\000\004\051\351\001\002\000\016\007" +
    "\ufff6\011\ufff6\020\ufff6\032\ufff6\040\ufff6\042\ufff6\001\002" +
    "\000\004\051\362\001\002\000\022\003\ufff4\007\ufff4\011" +
    "\ufff4\020\ufff4\032\ufff4\040\ufff4\042\ufff4\072\ufff4\001\002" +
    "\000\022\003\352\007\ufffb\011\ufffb\020\ufffb\032\ufffb\040" +
    "\ufffb\042\ufffb\072\007\001\002\000\004\053\356\001\002" +
    "\000\014\062\041\063\031\070\032\071\042\072\007\001" +
    "\002\000\004\051\360\001\002\000\022\003\uffef\007\uffef" +
    "\011\uffef\020\uffef\032\uffef\040\uffef\042\uffef\072\uffef\001" +
    "\002\000\022\003\ufff3\007\ufff3\011\ufff3\020\ufff3\032\ufff3" +
    "\040\ufff3\042\ufff3\072\ufff3\001\002\000\022\003\uffee\007" +
    "\uffee\011\uffee\020\uffee\032\uffee\040\uffee\042\uffee\072\uffee" +
    "\001\002\000\004\051\373\001\002\000\022\003\363\007" +
    "\ufff9\011\ufff9\020\ufff9\032\ufff9\040\ufff9\042\ufff9\072\007" +
    "\001\002\000\022\003\uffed\007\uffed\011\uffed\020\uffed\032" +
    "\uffed\040\uffed\042\uffed\072\uffed\001\002\000\006\046\060" +
    "\050\367\001\002\000\030\003\045\004\uffd8\006\035\026" +
    "\uffd8\034\040\062\041\063\031\066\037\070\032\071\042" +
    "\072\007\001\002\000\004\051\371\001\002\000\022\003" +
    "\uffeb\007\uffeb\011\uffeb\020\uffeb\032\uffeb\040\uffeb\042\uffeb" +
    "\072\uffeb\001\002\000\022\003\uffec\007\uffec\011\uffec\020" +
    "\uffec\032\uffec\040\uffec\042\uffec\072\uffec\001\002\000\022" +
    "\003\uffea\007\uffea\011\uffea\020\uffea\032\uffea\040\uffea\042" +
    "\uffea\072\uffea\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\372\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\012\007\011\001\001\000" +
    "\006\034\017\035\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\055\011\363\012\364\024\365\001" +
    "\001\000\010\004\354\010\353\033\352\001\001\000\004" +
    "\004\344\001\001\000\002\001\001\000\012\004\205\023" +
    "\202\042\201\054\200\001\001\000\002\001\001\000\004" +
    "\004\166\001\001\000\010\004\026\015\025\036\024\001" +
    "\001\000\002\001\001\000\006\004\026\036\165\001\001" +
    "\000\002\001\001\000\020\004\045\005\046\040\042\041" +
    "\033\050\043\051\035\056\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\147\041\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\152\001\001\000\012\004\055\016\150\017\054\024" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\004\055\016\053\017\054" +
    "\020\140\024\056\001\001\000\002\001\001\000\014\004" +
    "\055\016\053\017\054\020\052\024\056\001\001\000\004" +
    "\021\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\062\001\001" +
    "\000\020\004\045\005\046\040\042\041\033\050\061\051" +
    "\035\056\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\055\017\064\024\056\001\001\000\002\001" +
    "\001\000\012\022\102\047\105\052\103\053\106\001\001" +
    "\000\004\032\067\001\001\000\002\001\001\000\010\004" +
    "\072\031\073\046\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\072\046\075\001" +
    "\001\000\002\001\001\000\004\004\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\136\001\001\000" +
    "\002\001\001\000\004\006\133\001\001\000\004\004\112" +
    "\001\001\000\002\001\001\000\004\006\110\001\001\000" +
    "\004\004\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\055\013\114\014\117\024\116\001\001\000" +
    "\006\004\055\024\130\001\001\000\002\001\001\000\012" +
    "\004\055\013\114\014\124\024\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\121\001\001\000\002" +
    "\001\001\000\004\004\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\055\013\126\024\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\047\135\052\103\053\106\001\001\000\002\001" +
    "\001\000\012\004\055\013\114\014\137\024\116\001\001" +
    "\000\002\001\001\000\004\021\141\001\001\000\004\032" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\147\040\146\041\033\056\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\004\155\027" +
    "\156\040\042\041\033\051\154\056\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\155\040\042\041\033\051\161\056\032" +
    "\001\001\000\002\001\001\000\020\004\045\005\046\040" +
    "\042\041\033\050\163\051\035\056\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\055\013\114\014\167\024\116\001\001\000\002\001\001" +
    "\000\004\004\171\001\001\000\002\001\001\000\006\003" +
    "\173\007\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\004\205\037\341\042\217\043\220\044\216\045" +
    "\222\001\001\000\012\004\205\023\336\042\201\054\200" +
    "\001\001\000\004\004\323\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\004\205\037\312" +
    "\042\217\043\220\044\216\045\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\004\205\037\223\042\217" +
    "\043\220\044\216\045\222\001\001\000\012\004\205\023" +
    "\210\042\201\054\200\001\001\000\002\001\001\000\010" +
    "\004\205\042\201\054\213\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\061\266\001\001\000\002\001\001\000\006\057\257\060" +
    "\260\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\205\042\217\045\232\001\001\000" +
    "\016\004\205\037\227\042\217\043\220\044\216\045\222" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\004\147" +
    "\026\237\030\235\040\236\041\033\056\032\063\234\001" +
    "\001\000\002\001\001\000\004\062\245\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\147\040\243\041" +
    "\033\056\032\001\001\000\010\004\205\042\201\054\242" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\004" +
    "\147\026\237\040\236\041\033\056\032\063\247\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\205\042\217\043\272\044\216\045\222" +
    "\001\001\000\012\004\205\042\217\044\263\045\222\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\266" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\205\042\217\045\271\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\060\260\001\001\000" +
    "\020\004\205\025\305\037\301\042\217\043\220\044\216" +
    "\045\222\001\001\000\002\001\001\000\004\004\276\001" +
    "\001\000\002\001\001\000\020\004\205\025\300\037\301" +
    "\042\217\043\220\044\216\045\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\004\205\037\304\042\217" +
    "\043\220\044\216\045\222\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\205\025\310\037\301\042\217\043\220\044\216\045" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\205\042\201\054\314\001\001\000" +
    "\004\055\316\001\001\000\010\004\205\042\201\054\317" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\004\205\037\322\042\217\043\220\044\216" +
    "\045\222\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\004\205\037\325\042\217\043\220\044\216\045\222" +
    "\001\001\000\002\001\001\000\016\004\205\037\333\042" +
    "\217\043\220\044\216\045\222\001\001\000\016\004\205" +
    "\037\330\042\217\043\220\044\216\045\222\001\001\000" +
    "\002\001\001\000\010\004\205\042\201\054\332\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\205\042" +
    "\201\054\335\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\004\205\037\340\042\217\043\220\044\216\045" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\205\042\201\054\343\001\001\000\002\001\001\000" +
    "\012\004\055\013\114\014\345\024\116\001\001\000\002" +
    "\001\001\000\006\003\347\007\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\354\033\360\001\001\000\002\001\001\000" +
    "\012\004\147\040\356\041\033\056\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\055\012\371\024\365" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\004" +
    "\045\005\046\040\042\041\033\050\367\051\035\056\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  // this controls whether the parser offers extra debugging output
  public static boolean debug;

  // this indicates whether there was a parsing error
  public boolean error;

  private PrintStream errorStream;

  public Parser (MPCScanner s, PrintStream es) {
    super(s);
    errorStream = es;
  }

  public void syntax_error (Symbol currentToken) {
    Token t = (Token) currentToken.value;
    mpc.ShowError (currentToken.left, "Syntax Error: " + t.toPrettyString());
    error = true;
  }

  public static TypeId ROOT_TYPE = new TypeId(new Binding((TokenId)(TokenId.get("root")), -1, -1));


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // factor ::= NOT factor 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TokenKey n = (TokenKey)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprUnary(TokenKey.NOT, e, nleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // factor ::= LPAREN error RPAREN 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TokenOp l = (TokenOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TokenOp r = (TokenOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprError(lleft, rright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // factor ::= NIL 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TokenKey n = (TokenKey)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprNil(nleft, nright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // factor ::= STRING 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TokenString s = (TokenString)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprString(s, sleft,sright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // factor ::= INT 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TokenInt i = (TokenInt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprInt(i, ileft,iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // factor ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // factor ::= variable 
            {
              Expr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // multOp ::= AST 
            {
              Token RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TokenOp a = (TokenOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multOp",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // multOp ::= MOD 
            {
              Token RESULT =null;
		 RESULT = TokenKey.MOD; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multOp",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // multOp ::= DIV 
            {
              Token RESULT =null;
		 RESULT = TokenKey.DIV; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multOp",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // multOp ::= AND 
            {
              Token RESULT =null;
		 RESULT = TokenKey.AND; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multOp",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // term ::= term multOp factor 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprBinary(op, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // term ::= factor 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // addOp ::= MINUS 
            {
              Token RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TokenOp m = (TokenOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = m;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addOp",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // addOp ::= PLUS 
            {
              Token RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TokenOp p = (TokenOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addOp",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // addOp ::= OR 
            {
              Token RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TokenKey o = (TokenKey)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = o;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addOp",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // simpleExpr ::= simpleExpr addOp term 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprBinary(op, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleExpr",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // simpleExpr ::= term 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleExpr",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // relOp ::= GT 
            {
              Token RESULT =null;
		 RESULT = TokenOp.GT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relOp",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // relOp ::= GE 
            {
              Token RESULT =null;
		 RESULT = TokenOp.GE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relOp",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // relOp ::= LE 
            {
              Token RESULT =null;
		 RESULT = TokenOp.LE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relOp",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // relOp ::= LT 
            {
              Token RESULT =null;
		 RESULT = TokenOp.LT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relOp",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // relOp ::= NE 
            {
              Token RESULT =null;
		 RESULT = TokenOp.NE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relOp",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // relOp ::= EQ 
            {
              Token RESULT =null;
		 RESULT = TokenOp.EQ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relOp",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expr ::= simpleExpr relOp simpleExpr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprBinary(op, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expr ::= simpleExpr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // variable ::= variable CARET 
            {
              Expr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TokenOp c = (TokenOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprUnary(c, v, vleft, cright);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // variable ::= variable DOT binding LPAREN exprList RPAREN 
            {
              Expr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TokenOp d = (TokenOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expr> ee = (List<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TokenOp r = (TokenOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		   Expr bb = new ExprBinding(b); 
		   Expr a = new ExprBinary(d, v, bb); 
		   a.subscriptedExprOf(a,ee);
		   RESULT = a;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // variable ::= variable DOT binding 
            {
              Expr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TokenOp d = (TokenOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Expr bb = new ExprBinding(b); 
		  RESULT = new ExprBinary(d, v, bb);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // variable ::= variable LBRACK exprList RBRACK 
            {
              Expr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expr> ee = (List<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TokenOp r = (TokenOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		v.subscriptedExprOf(v,ee);
		RESULT= v;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // variable ::= binding LPAREN exprList RPAREN 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expr> ee = (List<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TokenOp r = (TokenOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ExprCall cc = new ExprCall(false, b, new Exprs(ee, eeleft, eeright), bleft, rright);
     	     RESULT = cc; 
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // variable ::= binding 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprBinding(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // stmtList ::= stmtList SEMI stmt 
            {
              List<Stmt> RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Stmt> ss = (List<Stmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 (RESULT = ss).add(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // stmtList ::= stmt 
            {
              List<Stmt> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 (RESULT = new ArrayList<Stmt>(1)).add(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // optElse ::= ELSE stmt 
            {
              Stmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optElse",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // optElse ::= 
            {
              Stmt RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optElse",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // exprList ::= exprList COMMA expr 
            {
              List<Expr> RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expr> ee = (List<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TokenOp c = (TokenOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			ee.add(e);
			RESULT = ee;	
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprList",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // exprList ::= expr 
            {
              List<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ArrayList<Expr> ee = new ArrayList<Expr>();
		  		ee.add(e);
		  		RESULT = ee;
		  		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprList",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // constantList ::= constantList COMMA constant 
            {
              List<Expr> RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expr> cl = (List<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			cl.add(c);
	 		RESULT = cl;
	 		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constantList",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // constantList ::= constant 
            {
              List<Expr> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  ArrayList<Expr> ls = new ArrayList<>();
			ls.add(c);
			RESULT = ls;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constantList",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // caseElement ::= constantList COLON stmt 
            {
              CaseElement RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expr> cl = (List<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  CaseLabelList cll = new CaseLabelList(cl,clleft,clright);
			RESULT = new CaseElement(cll,s,clleft,sright);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caseElement",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // caseElementList ::= caseElementList SEMI caseElement 
            {
              List<CaseElement> RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<CaseElement> cl = (List<CaseElement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CaseElement ce = (CaseElement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  cl.add(ce); 
	    	RESULT = cl;
	    	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caseElementList",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // caseElementList ::= caseElement 
            {
              List<CaseElement> RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CaseElement ce = (CaseElement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 	ArrayList<CaseElement> cl = new ArrayList<>();
			cl.add(ce);
			RESULT = cl;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caseElementList",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // stmt ::= error 
            {
              Stmt RESULT =null;
		 RESULT = new StmtEmpty(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // stmt ::= FOR binding ASSIGN expr DOWNTO expr DO stmt 
            {
              Stmt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		TokenKey f = (TokenKey)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StmtFor(b, e1, false, e2, s, fleft, sright);
     	  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // stmt ::= FOR binding ASSIGN expr TO expr DO stmt 
            {
              Stmt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		TokenKey f = (TokenKey)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StmtFor(b, e1, true, e2, s, fleft, sright);
     	  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // stmt ::= REPEAT stmtList UNTIL expr 
            {
              Stmt RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TokenKey r = (TokenKey)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Stmt> ss = (List<Stmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
     	  	Stmts a = new Stmts(ss,ssleft,ssright); 
     	    RESULT = new StmtRepeat(a, e, rleft, eright);
     	  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // stmt ::= CASE expr OF caseElementList optSemi END 
            {
              Stmt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TokenKey c = (TokenKey)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<CaseElement> cl = (List<CaseElement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int edleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int edright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TokenKey ed = (TokenKey)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  	  	 
     	  	RESULT = new StmtCase(e, cl, cleft, edright);
     	  	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // stmt ::= 
            {
              Stmt RESULT =null;
		 RESULT = new StmtEmpty(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // stmt ::= WHILE expr DO stmt 
            {
              Stmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TokenKey w = (TokenKey)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StmtWhile(e, s, wleft, sright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // stmt ::= IF expr THEN stmt optElse 
            {
              Stmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TokenKey i = (TokenKey)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stmt s1 = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s2 = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 int endPos = ((s2 == null) ? s1right : s2right);
             RESULT = new StmtIf(e, s1, s2, ileft, endPos);
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // stmt ::= BEGIN stmtList END 
            {
              Stmt RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TokenKey b = (TokenKey)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Stmt> ss = (List<Stmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TokenKey e = (TokenKey)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StmtCompound(new Stmts(ss, bleft, eright), bleft, eright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // stmt ::= variable ASSIGN expr 
            {
              Stmt RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StmtAssign(v, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // stmt ::= variable 
            {
              Stmt RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new StmtCall(v);
    	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // simpleType ::= constant DOTDOT constant 
            {
              Type RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr c1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr c2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeRange(c1,c2);
      	  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleType",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // simpleType ::= binding 
            {
              Type RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeId(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleType",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // simpleTypeList ::= simpleType 
            {
              List<Type> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type s = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ArrayList stl = new ArrayList<Expr>();
	      stl.add(s);
	      RESULT = stl;
	      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleTypeList",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // simpleTypeList ::= simpleTypeList SEMI simpleType 
            {
              List<Type> RESULT =null;
		int stlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Type> stl = (List<Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type s = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		stl.add(s);
		  RESULT = stl;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleTypeList",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // field ::= bindingList COLON type 
            {
              List<DeclField> RESULT =null;
		int bbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Binding> bb = (List<Binding>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
          RESULT = Decl.fieldDeclsOf(bb,t); 
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // optSemi ::= SEMI 
            {
              Token RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TokenOp s = (TokenOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = TokenOp.SEMI;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optSemi",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // optSemi ::= 
            {
              Token RESULT =null;
		RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optSemi",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // fieldList ::= fieldList SEMI 
            {
              List<DeclField> RESULT =null;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DeclField> fds = (List<DeclField>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = fds;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldList",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // fieldList ::= fieldList SEMI field 
            {
              List<DeclField> RESULT =null;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<DeclField> fds = (List<DeclField>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DeclField> fd = (List<DeclField>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		(RESULT = fds).addAll(fd);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldList",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // fieldList ::= field 
            {
              List<DeclField> RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DeclField> fd = (List<DeclField>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	 ArrayList<DeclField> ls = new ArrayList<>();
	 ls.addAll(fd);
	 RESULT = ls;
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldList",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // optFieldList ::= fieldList 
            {
              List<DeclField> RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DeclField> fl = (List<DeclField>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = fl;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optFieldList",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // optFieldList ::= 
            {
              List<DeclField> RESULT =null;
		RESULT = new ArrayList<DeclField>(0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optFieldList",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // overrides ::= overrides SEMI 
            {
              List<Overriding> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Overriding> ls = (List<Overriding>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		RESULT = ls;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("overrides",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // overrides ::= override 
            {
              List<Overriding> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Overriding o = (Overriding)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ArrayList<Overriding> ls = new ArrayList<>();
		RESULT = ls;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("overrides",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // overrides ::= overrides SEMI override 
            {
              List<Overriding> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Overriding> ls = (List<Overriding>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Overriding o = (Overriding)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ls.add(o);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("overrides",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // optOverRideList ::= OVERRIDES overrides 
            {
              List<Overriding> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Overriding> ls = (List<Overriding>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = ls;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optOverRideList",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // optOverRideList ::= 
            {
              List<Overriding> RESULT =null;
		RESULT = new ArrayList<Overriding>(0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optOverRideList",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // parameterGroup ::= bindingList COLON binding 
            {
              List<Decl> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Binding> bl = (List<Binding>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Decl.formalDeclsOf(false, bl, new TypeId(b), bright);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterGroup",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parameterGroup ::= VAR bindingList COLON binding 
            {
              List<Decl> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Binding> bl = (List<Binding>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	Type t = new TypeId(b);
	RESULT = Decl.formalDeclsOf(true, bl, new TypeId(b), bright);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterGroup",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // formalParameters ::= 
            {
              List<Decl> RESULT =null;
		RESULT = new ArrayList<Decl>();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalParameters",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // formalParameters ::= LPAREN formalParameters SEMI parameterGroup RPAREN 
            {
              List<Decl> RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Decl> fp = (List<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Decl> pg = (List<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		fp.addAll(pg);
		  RESULT = fp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalParameters",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // formalParameters ::= parameterGroup 
            {
              List<Decl> RESULT =null;
		int pgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Decl> pg = (List<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ArrayList<Decl> ls = new ArrayList<>();
		ls.addAll(pg);
		RESULT = ls;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalParameters",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // optAs ::= EQ binding 
            {
              Binding RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TokenOp e = (TokenOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = b   ;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optAs",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // optAs ::= 
            {
              Binding RESULT =null;
		RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optAs",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // functionHeader ::= FUNCTION binding formalParameters COLON binding 
            {
              TypeProcFunc RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TokenKey f = (TokenKey)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Decl> fp = (List<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Binding bb = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	RESULT = new TypeProcFunc(b, new Decls(fp), new TypeId(bb), fleft, fpright);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionHeader",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // procedureHeader ::= PROCEDURE binding formalParameters 
            {
              TypeProcFunc RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TokenKey p = (TokenKey)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Decl> fp = (List<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	  RESULT = new TypeProcFunc(b, new Decls(fp), null, pleft, fpright);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedureHeader",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // method ::= functionHeader optAs 
            {
              DeclMethod RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeProcFunc f = (TypeProcFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Binding o = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DeclMethod(f, o, fleft, oright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // method ::= procedureHeader optAs 
            {
              DeclMethod RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeProcFunc p = (TypeProcFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Binding o = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DeclMethod(p, o, pleft, oright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // methodList ::= methodList SEMI method 
            {
              List<DeclMethod> RESULT =null;
		int mlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<DeclMethod> ml = (List<DeclMethod>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclMethod mt = (DeclMethod)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		(RESULT = ml).add(mt);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodList",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // methodList ::= methodList SEMI 
            {
              List<DeclMethod> RESULT =null;
		int mlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DeclMethod> ml = (List<DeclMethod>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = ml;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodList",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // methodList ::= method 
            {
              List<DeclMethod> RESULT =null;
		int mtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclMethod mt = (DeclMethod)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ArrayList<DeclMethod> ls = new ArrayList<>();
    ls.add(mt);
    RESULT = ls;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodList",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // optMtdList ::= 
            {
              List<DeclMethod> RESULT =null;
		RESULT = new ArrayList<DeclMethod>(0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optMtdList",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // optMtdList ::= METHODS methodList 
            {
              List<DeclMethod> RESULT =null;
		int mlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DeclMethod> ml = (List<DeclMethod>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT =ml;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optMtdList",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // optBinding ::= binding 
            {
              Binding RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optBinding",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // optBinding ::= 
            {
              Binding RESULT =null;
		RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optBinding",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // override ::= binding EQ binding 
            {
              Overriding RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Binding b1 = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Binding b2 = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Overriding(b1,b2,b1left,b2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("override",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type ::= error 
            {
              Type RESULT =null;
		 RESULT = Type.theErrorType; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type ::= optBinding OBJECT optFieldList optMtdList optOverRideList END 
            {
              Type RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<DeclField> fds = (List<DeclField>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int omlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int omlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<DeclMethod> oml = (List<DeclMethod>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ooleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ooright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Overriding> oo = (List<Overriding>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int edleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int edright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TokenKey ed = (TokenKey)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new TypeObject(new TypeId(b), fds, oml, oo, false, bleft, edright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type ::= optBinding ABSTRACT OBJECT optFieldList optMtdList optOverRideList END 
            {
              Type RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<DeclField> fds = (List<DeclField>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int omlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int omlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<DeclMethod> oml = (List<DeclMethod>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ooleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ooright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Overriding> oo = (List<Overriding>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int edleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int edright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TokenKey ed = (TokenKey)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new TypeObject(new TypeId(b),fds,oml,oo,true, bleft,edright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type ::= CARET binding 
            {
              Type RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 TypeId i = new TypeId(b); 
     		RESULT = new TypePointer(i);
     	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type ::= RECORD fieldList END 
            {
              Type RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TokenKey r = (TokenKey)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ffleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ffright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DeclField> ff = (List<DeclField>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TokenKey e = (TokenKey)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
     		RESULT = new TypeRecord(ff,ffleft,ffright);
     		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type ::= ARRAY LBRACK simpleTypeList RBRACK OF type 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TokenKey a = (TokenKey)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int splleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int splright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Type> spl = (List<Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type e = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new TypeArray(e, e, aleft, eright);
      	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type ::= simpleType 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // unsignedConstant ::= INT 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TokenInt i = (TokenInt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprInt(i, ileft,iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unsignedConstant",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // unsignedConstant ::= binding 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprBinding(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unsignedConstant",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sign ::= PLUS 
            {
              Token RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TokenOp p = (TokenOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = TokenOp.PLUS;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sign",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sign ::= MINUS 
            {
              Token RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TokenOp m = (TokenOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = TokenOp.MINUS;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sign",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // constant ::= sign unsignedConstant 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr u = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprUnary(s, u, sleft, uright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // constant ::= unsignedConstant 
            {
              Expr RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr u = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = u; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // constant ::= STRING 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TokenString s = (TokenString)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprString(s,sleft,sright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bindingList ::= bindingList COMMA binding 
            {
              List<Binding> RESULT =null;
		int bbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Binding> bb = (List<Binding>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 (RESULT = bb).add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bindingList",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bindingList ::= binding 
            {
              List<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 (RESULT = new ArrayList<Binding>(1)).add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bindingList",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // varDecl ::= error SEMI 
            {
              List<Decl> RESULT =null;
		 RESULT = new ArrayList<Decl>(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDecl",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // varDecl ::= bindingList COLON type SEMI 
            {
              List<Decl> RESULT =null;
		int bbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Binding> bb = (List<Binding>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Decl.varDeclsOf(bb, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDecl",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // varDecls ::= varDecls varDecl 
            {
              List<Decl> RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Decl> dd = (List<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 (RESULT = dd).addAll(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDecls",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // varDecls ::= varDecl 
            {
              List<Decl> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDecls",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // constDefn ::= error SEMI 
            {
              Decl RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constDefn",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // constDefn ::= binding EQ constant SEMI 
            {
              Decl RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DeclConst(b, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constDefn",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // typeDefn ::= binding EQ type SEMI 
            {
              Decl RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new DeclType(b,t,bleft,tright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeDefn",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // typeDefns ::= typeDefns typeDefn 
            {
              List<Decl> RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Decl> dd = (List<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 (RESULT = dd).add(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeDefns",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // typeDefns ::= typeDefn 
            {
              List<Decl> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 (RESULT = new ArrayList<Decl>(1)).add(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeDefns",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // constDefns ::= constDefns constDefn 
            {
              List<Decl> RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Decl> dd = (List<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 (RESULT = dd).add(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constDefns",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // constDefns ::= constDefn 
            {
              List<Decl> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 (RESULT = new ArrayList<Decl>(1)).add(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constDefns",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // funcDecl ::= FUNCTION binding formalParameters COLON binding SEMI block SEMI 
            {
              Decl RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		TokenKey f = (TokenKey)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Decl> fp = (List<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Binding b2 = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TokenOp s1 = (TokenOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int blkleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blkright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block blk = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TokenOp s2 = (TokenOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new DeclProcFunc(new TypeProcFunc(b, new Decls(fp), new TypeId(b2), bleft, s1right), blk, fleft,s2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcDecl",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // procDecl ::= PROCEDURE binding formalParameters SEMI block SEMI 
            {
              Decl RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TokenKey p = (TokenKey)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Decl> fp = (List<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TokenOp s1 = (TokenOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int blkleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blkright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block blk = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TokenOp s2 = (TokenOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new DeclProcFunc(new TypeProcFunc(b,new Decls(fp),null,bleft,s1right), blk, pleft,s2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procDecl",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // optDefns ::= optDefns funcDecl 
            {
              List<Decl> RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Decl> dd = (List<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ffleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ffright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decl ff = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		dd.add(ff); 
     	  RESULT = dd;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optDefns",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // optDefns ::= optDefns procDecl 
            {
              List<Decl> RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Decl> dd = (List<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decl pp = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		dd.add(pp); 
     	  RESULT = dd;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optDefns",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // optDefns ::= optDefns VAR varDecls 
            {
              List<Decl> RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Decl> dd = (List<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Decl> vv = (List<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 (RESULT = dd).addAll(vv); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optDefns",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // optDefns ::= optDefns TYPE typeDefns 
            {
              List<Decl> RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Decl> dd = (List<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ffleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ffright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Decl> ff = (List<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 (RESULT = dd).addAll(ff);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optDefns",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // optDefns ::= optDefns CONST constDefns 
            {
              List<Decl> RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Decl> dd = (List<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Decl> cc = (List<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 (RESULT = dd).addAll(cc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optDefns",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // optDefns ::= 
            {
              List<Decl> RESULT =null;
		 RESULT = new ArrayList<Decl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optDefns",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // binding ::= ID 
            {
              Binding RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TokenId n = (TokenId)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Binding(n, nleft, nright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binding",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // block ::= optDefns BEGIN stmtList END 
            {
              Block RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Decl> dd = (List<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TokenKey b = (TokenKey)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Stmt> ss = (List<Stmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TokenKey e = (TokenKey)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 int pos  = (dd == null) ? bleft : ddleft;
             int dEnd = (dd == null) ? bleft : ddright;
             RESULT = new Block(new Decls(dd, pos, dEnd), new Stmts(ss, bleft, eright), pos, eright);
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= error 
            {
              Program RESULT =null;
		 RESULT = (Program)null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM binding SEMI block DOT 
            {
              Program RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TokenKey p = (TokenKey)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int blkleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blkright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block blk = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dotleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dotright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TokenOp dot = (TokenOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
             Decl d = new DeclProgram(b);
             Decls dd = new Decls(d);
             RESULT = new Program(dd, blk, pleft, dotright);
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


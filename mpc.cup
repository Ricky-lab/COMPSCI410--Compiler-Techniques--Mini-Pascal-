// JavaCup specification for Mini-Pascal Compiler (mpc) parser

package MPC;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;

parser code {:

  // this controls whether the parser offers extra debugging output
  public static boolean debug;

  // this indicates whether there was a parsing error
  public boolean error;

  private PrintStream errorStream;

  public Parser (MPCScanner s, PrintStream es) {
    super(s);
    errorStream = es;
  }

  public void syntax_error (Symbol currentToken) {
    Token t = (Token) currentToken.value;
    mpc.ShowError (currentToken.left, "Syntax Error: " + t.toPrettyString());
    error = true;
  }

  public static TypeId ROOT_TYPE = new TypeId(new Binding((TokenId)(TokenId.get("root")), -1, -1));

:}

// Terminals (tokens returned by the scanner).
// Note: does not include EOF, which is included automatically.

// Keywords
terminal TokenKey ABSTRACT, AND, ARRAY, BEGIN, CASE, CONST, DIV, DO, DOWNTO, ELSE, END;
terminal TokenKey FOR, FUNCTION, IF, METHODS, MOD, NIL, NOT, OBJECT, OF, OR;
terminal TokenKey OVERRIDES, PROCEDURE, PROGRAM, RECORD, REPEAT, THEN, TO, TYPE;
terminal TokenKey UNTIL, VAR, WHILE;

// Operators
terminal TokenOp LPAREN, RPAREN, COMMA, DOT, COLON, SEMI, LT, EQ, GT;
terminal TokenOp LE, NE, GE, ASSIGN;
terminal TokenOp AST, PLUS, MINUS, LBRACK, RBRACK, CARET, DOTDOT;


// Terminals with values
terminal TokenInt    INT;
terminal TokenString STRING;
terminal TokenId     ID;

// Non-terminal symbols with their Java types
non terminal Program     program;

non terminal Block       block;

non terminal Binding     binding;
non terminal Binding 	 optBinding, optAs;

non terminal List<Decl> optDefns, constDefns, varDecls, varDecl, parameterGroup,formalParameters,typeDefns;
non terminal List<DeclField> fieldList, field,optFieldList;
non terminal List<DeclMethod> optMtdList, methodList;
non terminal List<Stmt> stmtList;
non terminal List<Binding> bindingList;
non terminal List<Expr> exprList;
non terminal List<Expr> constantList;
non terminal List<Type> simpleTypeList;
non terminal List<CaseElement> caseElementList;
non terminal List<Overriding> overrides,optOverRideList;

non terminal Decl        constDefn, procDecl, funcDecl,typeDefn;
non terminal Expr        expr, constant, unsignedConstant, variable;
non terminal Expr        simpleExpr, term, factor;
non terminal Overriding  override;
non terminal DeclMethod  method;

non terminal Type        type, simpleType;
non terminal TypeProcFunc functionHeader, procedureHeader;
non terminal Stmt        stmt, optElse;

non terminal Token       sign, relOp, addOp, multOp, optSemi;

non terminal CaseElement caseElement;



// The grammar
program
    ::= PROGRAM:p binding:b SEMI block:blk DOT:dot
          {:
             Decl d = new DeclProgram(b);
             Decls dd = new Decls(d);
             RESULT = new Program(dd, blk, pleft, dotright);
           :}
     |  error {: RESULT = (Program)null; :}
     ;

block
    ::= optDefns:dd BEGIN:b stmtList:ss END:e
          {: int pos  = (dd == null) ? bleft : ddleft;
             int dEnd = (dd == null) ? bleft : ddright;
             RESULT = new Block(new Decls(dd, pos, dEnd), new Stmts(ss, bleft, eright), pos, eright);
           :}
     ;


		
binding
    ::= ID:n {: RESULT = new Binding(n, nleft, nright); :}
     ;

// The empty RHS rule, which occurs first in the input, creates an empty
// ArrayList of Decl nodes; other rules either tack a whole list onto it or add a
// single element. Each should be some kind of Decl node.

optDefns
    ::=
          {: RESULT = new ArrayList<Decl>(); :}
     |  optDefns:dd CONST constDefns:cc
          {: (RESULT = dd).addAll(cc); :}
     |	optDefns:dd TYPE typeDefns:ff
     	  {: (RESULT = dd).addAll(ff);:}
     |  optDefns:dd VAR   varDecls:vv
          {: (RESULT = dd).addAll(vv); :}
     |	optDefns:dd procDecl:pp
     	  {:dd.add(pp); 
     	  RESULT = dd;:}
     |  optDefns:dd funcDecl:ff
     	  {:dd.add(ff); 
     	  RESULT = dd;:}
     ;

procDecl
	::= PROCEDURE:p binding:b formalParameters:fp SEMI:s1 block:blk SEMI:s2
		{:RESULT = new DeclProcFunc(new TypeProcFunc(b,new Decls(fp),null,bleft,s1right), blk, pleft,s2right);:}
		;

funcDecl
	::= FUNCTION:f binding:b formalParameters:fp COLON binding:b2 SEMI:s1 block:blk SEMI:s2
		{:RESULT = new DeclProcFunc(new TypeProcFunc(b, new Decls(fp), new TypeId(b2), bleft, s1right), blk, fleft,s2right);:}
		;

// The single-item rule, which occurs first in the input, creates an empty
// ArrayList and adds the item to it. The second rule adds one item to an
// existing list.

constDefns
    ::= constDefn:d                 {: (RESULT = new ArrayList<Decl>(1)).add(d); :}
     |  constDefns:dd constDefn:d   {: (RESULT = dd).add(d); :}
     ;
     
typeDefns
    ::= typeDefn:d                 {: (RESULT = new ArrayList<Decl>(1)).add(d); :}
     |  typeDefns:dd typeDefn:d   {: (RESULT = dd).add(d); :}
     ;
     
typeDefn
	::= binding:b EQ type:t SEMI
	{:RESULT = new DeclType(b,t,bleft,tright);:}; 
	
	
constDefn
    ::= binding:b EQ constant:c SEMI
          {: RESULT = new DeclConst(b, c); :}
     |  error SEMI
          {: RESULT = null; :}
        // try to prevent errors from flowing into other declarations
     ;

// built-up somewhat like constDefns

varDecls
    ::= varDecl:d               {: RESULT = d; :}
     |  varDecls:dd varDecl:d   {: (RESULT = dd).addAll(d); :}
     ;

varDecl
    ::= bindingList:bb COLON type:t SEMI
          {: RESULT = Decl.varDeclsOf(bb, t); :}
     |  error SEMI
          {: RESULT = new ArrayList<Decl>(0); :}
     ;

bindingList
    ::= binding:b
          {: (RESULT = new ArrayList<Binding>(1)).add(b); :}
     |  bindingList:bb COMMA binding:b
          {: (RESULT = bb).add(b); :}
     ;

constant
    ::= STRING:s
    	  {: RESULT = new ExprString(s,sleft,sright); :} 
     | unsignedConstant:u
          {: RESULT = u; :}
     | sign:s unsignedConstant:u
          {: RESULT = new ExprUnary(s, u, sleft, uright); :}
     ;

sign
	::= MINUS:m {:RESULT = TokenOp.MINUS;:}
	| 	PLUS:p  {:RESULT = TokenOp.PLUS;:};

unsignedConstant
    ::= binding:b   {: RESULT = new ExprBinding(b); :}
    |	INT:i       {: RESULT = new ExprInt(i, ileft,iright); :}
     ;

type
    ::= simpleType:t
          {: RESULT = t; :}
     |
      	ARRAY:a LBRACK simpleTypeList:spl RBRACK OF type:e
      	{:RESULT = new TypeArray(e, e, aleft, eright);
      	   :}
     |
     	RECORD:r fieldList:ff END:e
     	{: 
     		RESULT = new TypeRecord(ff,ffleft,ffright);
     		:}
     |  CARET binding:b 
     	{: TypeId i = new TypeId(b); 
     		RESULT = new TypePointer(i);
     	:}
     |  
     	optBinding:b ABSTRACT OBJECT optFieldList:fds optMtdList:oml optOverRideList:oo END:ed
     	{:RESULT = new TypeObject(new TypeId(b),fds,oml,oo,true, bleft,edright); :}
     |  
     	optBinding:b  OBJECT optFieldList:fds optMtdList:oml optOverRideList:oo END:ed
     	{:RESULT = new TypeObject(new TypeId(b), fds, oml, oo, false, bleft, edright); :}
     |   error
          {: RESULT = Type.theErrorType; :}
     ;
     
     

	
override
	::= binding:b1 EQ binding:b2
	{: RESULT = new Overriding(b1,b2,b1left,b2right);:};
     
optBinding
	::= 	{:RESULT = null;:}
	|	binding:b
		{:RESULT = b;:};
     
optMtdList
	::=	METHODS methodList:ml {:RESULT =ml;:}	
		|	{:RESULT = new ArrayList<DeclMethod>(0);:};

methodList
    ::= method:mt
    {:
    ArrayList<DeclMethod> ls = new ArrayList<>();
    ls.add(mt);
    RESULT = ls;
    :} 
    |
    methodList:ml SEMI
    {:RESULT = ml;:}
    |
    methodList:ml SEMI method:mt
    {:(RESULT = ml).add(mt);:}
    ;

		
method
	::= procedureHeader:p optAs:o
		{: RESULT = new DeclMethod(p, o, pleft, oright); :}
	|	functionHeader:f optAs:o
		{: RESULT = new DeclMethod(f, o, fleft, oright); :}
		;
		
procedureHeader
	::= PROCEDURE:p binding:b formalParameters:fp
	{:
	  RESULT = new TypeProcFunc(b, new Decls(fp), null, pleft, fpright);
		:};
	
functionHeader 
	::= FUNCTION:f binding:b formalParameters:fp COLON binding:bb
	{:
	RESULT = new TypeProcFunc(b, new Decls(fp), new TypeId(bb), fleft, fpright);
	:};
	
optAs
	::= {:RESULT = null;:}
	| EQ:e binding:b
		{:RESULT = b   ;
		:};
	
formalParameters
	::= SEMI parameterGroup:pg formalParameters:fp
		{:
		fp.addAll(pg);
		RESULT = fp;
		:}
	|	LPAREN  parameterGroup:pg formalParameters:fp RPAREN
		{:fp.addAll(pg);
		  RESULT = fp;:}
	|	{:RESULT = new ArrayList<Decl>();:}	  
	;
		  
parameterGroup
	::= VAR bindingList:bl COLON binding:b
	{:
	Type t = new TypeId(b);
	RESULT = Decl.formalDeclsOf(true, bl, new TypeId(b), bright);
	:}
	|		bindingList:bl COLON binding:b
	{:RESULT = Decl.formalDeclsOf(false, bl, new TypeId(b), bright);
	:}
	;
		


optOverRideList
	::=		{:RESULT = new ArrayList<Overriding>(0);:}
	|	OVERRIDES overrides:ls
		{:	RESULT = ls;:}
	;

overrides
	::= overrides:ls SEMI override:o 
		{:ls.add(o);:}
		
	|	override:o 
		{:ArrayList<Overriding> ls = new ArrayList<>();
		RESULT = ls;
		:}
	|	overrides:ls SEMI
		{:
		RESULT = ls;
		:}
		;
		

		


optFieldList
	::= {:RESULT = new ArrayList<DeclField>(0);:}
	|
	fieldList:fl{:RESULT = fl;:}
	;

fieldList
	::= 
	field:fd 
	{:
	 ArrayList<DeclField> ls = new ArrayList<>();
	 ls.addAll(fd);
	 RESULT = ls;
	 :}
	|
	fieldList:fds SEMI field:fd 
	{:(RESULT = fds).addAll(fd);:}
	|
	fieldList:fds SEMI {:RESULT = fds;:}
    ;
	 		
optSemi
	::= 	 {:RESULT = null;:}
	| SEMI:s {: RESULT = TokenOp.SEMI;:} 
	;
	    
field
	::= bindingList:bb COLON type:t 
          {: 
          RESULT = Decl.fieldDeclsOf(bb,t); 
          :};
	    
	   
simpleTypeList
	::= simpleTypeList:stl SEMI simpleType:s
		{:stl.add(s);
		  RESULT = stl;
		  :}
	 |  simpleType:s
	    {:ArrayList stl = new ArrayList<Expr>();
	      stl.add(s);
	      RESULT = stl;
	      :}
	      ;

simpleType
    ::= binding:b
          {: RESULT = new TypeId(b); :}
      | constant:c1 DOTDOT constant:c2
      	  {: RESULT = new TypeRange(c1,c2);
      	  :}
     ;

stmt
    ::= variable:v/*call statement*/
    	  {:RESULT = new StmtCall(v);
    	    :}
     |  variable:v ASSIGN expr:e/*assign statement*/
          {: RESULT = new StmtAssign(v, e); :}
     |  BEGIN:b stmtList:ss END:e 
          {: RESULT = new StmtCompound(new Stmts(ss, bleft, eright), bleft, eright); :}
     |  IF:i expr:e THEN stmt:s1 optElse:s2 /*if statement*/
          {: int endPos = ((s2 == null) ? s1right : s2right);
             RESULT = new StmtIf(e, s1, s2, ileft, endPos);
           :}
     |  WHILE:w expr:e DO stmt:s/*while statement*/
          {: RESULT = new StmtWhile(e, s, wleft, sright); :}
     |                                             /*empty statement*/
          {: RESULT = new StmtEmpty(); :}
     |  CASE:c expr:e OF caseElementList:cl optSemi END:ed
     	  {:  	  	 
     	  	RESULT = new StmtCase(e, cl, cleft, edright);
     	  	:}
     |  REPEAT:r stmtList:ss UNTIL expr:e
     	  {:
     	  	Stmts a = new Stmts(ss,ssleft,ssright); 
     	    RESULT = new StmtRepeat(a, e, rleft, eright);
     	  :}
     |  FOR:f binding:b ASSIGN expr:e1 TO expr:e2 DO stmt:s
     	  {: RESULT = new StmtFor(b, e1, true, e2, s, fleft, sright);
     	  :}
     |  FOR:f binding:b ASSIGN expr:e1 DOWNTO expr:e2 DO stmt:s
     	  {: RESULT = new StmtFor(b, e1, false, e2, s, fleft, sright);
     	  :}
     | error /*error statement*/
          {: RESULT = new StmtEmpty(); :}
     ;
     
caseElementList ::= 
		caseElement:ce
		{: 	ArrayList<CaseElement> cl = new ArrayList<>();
			cl.add(ce);
			RESULT = cl;
			:}
	 |  caseElementList:cl SEMI caseElement:ce
	    {:  cl.add(ce); 
	    	RESULT = cl;
	    	:}
	 ;
	 
caseElement ::=
		constantList:cl COLON stmt:s
		{:  CaseLabelList cll = new CaseLabelList(cl,clleft,clright);
			RESULT = new CaseElement(cll,s,clleft,sright);
			:};
	 
constantList ::=
		constant:c
		{:  ArrayList<Expr> ls = new ArrayList<>();
			ls.add(c);
			RESULT = ls;
			:}
	 |  constantList:cl COMMA constant:c	
	 	{:	cl.add(c);
	 		RESULT = cl;
	 		:}
	 	;		
     
exprList
	::= expr:e 
		  {: ArrayList<Expr> ee = new ArrayList<Expr>();
		  		ee.add(e);
		  		RESULT = ee;
		  		:}
	|  exprList:ee COMMA:c expr:e 
			{:
			ee.add(e);
			RESULT = ee;	
			:} 
	;

optElse
    ::=               {: RESULT = null; :}
     |  ELSE stmt:s   {: RESULT = s;    :}
     ;

// carefully designed to allow empty statements where
// appropriate but without ambiguity in parsing

stmtList
    ::= stmt:s                    {: (RESULT = new ArrayList<Stmt>(1)).add(s); :}
     |  stmtList:ss SEMI stmt:s   {: (RESULT = ss).add(s); :}
     ;

variable
    ::= binding:b   {: RESULT = new ExprBinding(b); :}
    |  binding:b LPAREN exprList:ee RPAREN:r
     	{: ExprCall cc = new ExprCall(false, b, new Exprs(ee, eeleft, eeright), bleft, rright);
     	     RESULT = cc; 
		:}
	|  variable:v LBRACK exprList:ee RBRACK:r
		{: 
		v.subscriptedExprOf(v,ee);
		RESULT= v;
		:}
	|  variable:v DOT:d binding:b 
		{:Expr bb = new ExprBinding(b); 
		  RESULT = new ExprBinary(d, v, bb);
		:}
	|  variable:v DOT:d binding:b LPAREN exprList:ee RPAREN:r
		{: 
		   Expr bb = new ExprBinding(b); 
		   Expr a = new ExprBinary(d, v, bb); 
		   a.subscriptedExprOf(a,ee);
		   RESULT = a;
		:}
	|  variable:v CARET:c
		{: RESULT = new ExprUnary(c, v, vleft, cright);
		:}
     ;
expr
    ::= simpleExpr:e
          {: RESULT = e; :}
     |  simpleExpr:e1 relOp:op simpleExpr:e2
          {: RESULT = new ExprBinary(op, e1, e2); :}
     ;

relOp
    ::= EQ   {: RESULT = TokenOp.EQ; :}
     |  NE   {: RESULT = TokenOp.NE; :}
     |  LT   {: RESULT = TokenOp.LT; :}
     |  LE   {: RESULT = TokenOp.LE; :}
     |  GE   {: RESULT = TokenOp.GE; :}
     |  GT   {: RESULT = TokenOp.GT; :}
     ;

simpleExpr
    ::= term:e
          {: RESULT = e; :}
     |  simpleExpr:e1 addOp:op term:e2
          {: RESULT = new ExprBinary(op, e1, e2); :}
     ;

addOp
    ::= OR:o      {: RESULT = o;   :}
     |	PLUS:p	{: RESULT = p; :}
     |  MINUS:m	{: RESULT = m;:}
     ;

term
    ::= factor:e
          {: RESULT = e; :}
     |  term:e1 multOp:op factor:e2
          {: RESULT = new ExprBinary(op, e1, e2); :}
     ;

multOp
    ::= AND   {: RESULT = TokenKey.AND; :}
    |   DIV	  {: RESULT = TokenKey.DIV; :}
    |	MOD	  {: RESULT = TokenKey.MOD; :}
    |	AST:a	  {: RESULT = a; :}
     ;

factor
    ::= variable:v
          {: RESULT = v; :}
     |  LPAREN expr:e RPAREN
          {: RESULT = e; :}
     |	INT:i
     	  {: RESULT = new ExprInt(i, ileft,iright); :}
     |	STRING:s
     	  {: RESULT = new ExprString(s, sleft,sright); :}
     |	NIL:n
     	  {: RESULT = new ExprNil(nleft, nright); :}
     |  LPAREN:l error RPAREN:r
          {: RESULT = new ExprError(lleft, rright); :}
     |  NOT:n factor:e
          {: RESULT = new ExprUnary(TokenKey.NOT, e, nleft, eright); :}
     ;

testparse.err:
0a1,45
> line -1: Syntax Error: #10
> line 10: Syntax Error: @^
> line 11: Syntax Error: record
> line -1: Syntax Error: #0
> line -1: Syntax Error: #0
> line -1: Syntax Error: #1
> line -1: Syntax Error: #2
> line -1: Syntax Error: #3
> line -1: Syntax Error: #4
> line -1: Syntax Error: #5
> line -1: Syntax Error: #6
> line -1: Syntax Error: #1
> line 28: Syntax Error: array
> line 29: Syntax Error: array
> line 31: Syntax Error: function
> line -1: Syntax Error: #2
> line 36: Syntax Error: @-
> line 37: Syntax Error: @+
> line 39: Syntax Error: @*
> line 46: Syntax Error: 'Enter integer between 1 and 10: '
> line -1: Syntax Error: #1
> line -1: Syntax Error: #10
> line 49: Syntax Error: 'Invalid'
> line -1: Syntax Error: #5
> line 53: Syntax Error: 'Valid'
> line 54: Syntax Error: 'Enter date between Sunday and Saturday[0..6]: '
> line 56: Syntax Error: case
> line 57: Syntax Error: 'Sunday'
> line 58: Syntax Error: 'Monday'
> line 59: Syntax Error: 'Tuesday'
> line 60: Syntax Error: 'Wednesday'
> line 61: Syntax Error: 'Thursday'
> line 62: Syntax Error: 'Friday'
> line 63: Syntax Error: 'Saturday'
> line -1: Syntax Error: #1
> line 83: Syntax Error: @+
> line -1: Syntax Error: #1
> line 86: Syntax Error: @[
> line -1: Syntax Error: #1
> line -1: Syntax Error: #1
> line -1: Syntax Error: #5
> line 92: Syntax Error: @[
> line 94: Syntax Error: '<5'
> line 97: Syntax Error: '>=5'
> line 98: Syntax Error: @+


testparse.parse:
1,467d0
< (program: 
<   (decls: 
<     (decl->program: tester[1]))
<   (block: 
<     (decls: 
<       (decl->const: arraysize[4]
<         (expr->[value=10] int: 10
<           type->(type->kind=integer)))
<       (decl->type: recordtype[6]
<         (type->kind=record:
<           (fields: 
<             (decl->field: val[7]
<               (type->kind=ident: integer[7]))
<             (decl->field: use[8]
<               (type->kind=ident: boolean[8])))))
<       (decl->type: ptr[10]
<         (type->kind=pointer:
<           ))
<       (decl->type: node[11]
<         (type->kind=record:
<           (fields: 
<             (decl->field: val[12]
<               (type->kind=ident: integer[12]))
<             (decl->field: prev[13]
<               (type->kind=ident: ptr[14]))
<             (decl->field: next[14]
<               (type->kind=ident: ptr[14])))))
<       (decl->type: week[16]
<         (type->kind=subrange:
<           (expr->[value=0] int: 0
<             type->(type->kind=integer))
<           (expr->[value=6] int: 6
<             type->(type->kind=integer))))
<       (decl->const: sunday[18]
<         (expr->[value=0] int: 0
<           type->(type->kind=integer)))
<       (decl->const: monday[19]
<         (expr->[value=1] int: 1
<           type->(type->kind=integer)))
<       (decl->const: tuesday[20]
<         (expr->[value=2] int: 2
<           type->(type->kind=integer)))
<       (decl->const: wednesday[21]
<         (expr->[value=3] int: 3
<           type->(type->kind=integer)))
<       (decl->const: thursday[22]
<         (expr->[value=4] int: 4
<           type->(type->kind=integer)))
<       (decl->const: friday[23]
<         (expr->[value=5] int: 5
<           type->(type->kind=integer)))
<       (decl->const: saturday[24]
<         (expr->[value=6] int: 6
<           type->(type->kind=integer)))
<       (decl->variable: day[26]
<         (type->kind=ident: integer[26]))
<       (decl->variable: size[26]
<         (type->kind=ident: integer[26]))
<       (decl->variable: i[27]
<         (type->kind=subrange:
<           (expr->[value=1] int: 1
<             type->(type->kind=integer))
<           (expr-> binding: arraysize[27])))
<       (decl->variable: j[27]
<         (type->kind=subrange:
<           (expr->[value=1] int: 1
<             type->(type->kind=integer))
<           (expr-> binding: arraysize[27])))
<       (decl->variable: list[28]
<         (type->kind=array:(type->kind=subrange:
<             (expr->[value=1] int: 1
<               type->(type->kind=integer))
<             (expr-> binding: arraysize[28]))
<           (type->kind=ident: recordtype[28])))
<       (decl->variable: tarr[29]
<         (type->kind=array:(type->kind=subrange:
<             (expr->[value=1] int: 1
<               type->(type->kind=integer))
<             (expr-> binding: arraysize[29]))
<           (type->kind=array:(type->kind=subrange:
<               (expr->[value=1] int: 1
<                 type->(type->kind=integer))
<               (expr->[value=5] int: 5
<                 type->(type->kind=integer)))
<             (type->kind=ident: integer[29]))))
<       (decl->variable: weekday[30]
<         (type->kind=ident: week[30]))
<       (decl->function: double[31]
<         (formals: 
<           (decl->formal x[31]
<             (varmode=true)
<             (type->kind=ident: integer[31])))
<         (type->kind=ident: integer[31])
<         (block: 
<           (decls: 
<             (decl->variable: i[32]
<               (type->kind=ident: integer[32]))
<             (decl->variable: j[32]
<               (type->kind=ident: integer[32]))
<             (decl->variable: k[32]
<               (type->kind=ident: integer[32]))
<             (decl->variable: b[33]
<               (type->kind=ident: boolean[33])))
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: i[35])
<               (expr-> binexp: *
<                 (expr->[value=2] int: 2
<                   type->(type->kind=integer))
<                 (expr-> binding: arraysize[35])))
<             (stmt->assignstmt:
<               (expr-> binding: j[36])
<               (expr-> unexp: -
<                 (expr-> binding: arraysize[36])))
<             (stmt->assignstmt:
<               (expr-> binding: k[37])
<               (expr-> binexp: div
<                 (expr-> binexp: +
<                   (expr-> binding: i[37])
<                   (expr-> binding: j[37]))
<                 (expr-> binding: arraysize[37])))
<             (stmt->assignstmt:
<               (expr-> binding: b[38])
<               (expr-> binexp: >
<                 (expr-> binding: i[38])
<                 (expr-> binding: j[38])))
<             (stmt->assignstmt:
<               (expr-> binding: double[39])
<               (expr-> binexp: *
<                 (expr-> binding: x[39])
<                 (expr-> binding: i[39])))
<             (stmt->emptystmt:)))))
<     (stmts: 
<       (stmt->forstmt:i[42]
<         (expr->[value=1] int: 1
<           type->(type->kind=integer))
<         (expr-> binding: arraysize[42])
<         (upward:true)
<         (stmt->forstmt:j[43]
<           (expr->[value=1] int: 1
<             type->(type->kind=integer))
<           (expr->[value=5] int: 5
<             type->(type->kind=integer))
<           (upward:true)
<           (stmt->assignstmt:
<             (expr-> binexp: [
<               (expr-> binexp: [
<                 (expr-> binding: tarr[44])
<                 (expr-> binding: i[44]))
<               (expr-> binding: j[44]))
<             (expr->[value=0] int: 0
<               type->(type->kind=integer)))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false write[46]
<           (exprs: 
<             (expr->[value='Enter integer between 1 and 10: '] string: 'Enter integer between 1 and 10: '
<               type->(type->kind=string)))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false readln[47]
<           (exprs: 
<             (expr-> binding: size[47]))))
<       (stmt->ifstmt: 
<         (expr-> binexp: or
<           (expr-> binexp: <
<             (expr-> binding: size[48])
<             (expr->[value=1] int: 1
<               type->(type->kind=integer)))
<           (expr-> binexp: >
<             (expr-> binding: size[48])
<             (expr->[value=10] int: 10
<               type->(type->kind=integer))))
<         (stmt->compoundstmt:
<           (stmts: 
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=false writeln[49]
<                 (exprs: 
<                   (expr->[value='Invalid'] string: 'Invalid'
<                     type->(type->kind=string)))))
<             (stmt->assignstmt:
<               (expr-> binding: size[50])
<               (expr->[value=5] int: 5
<                 type->(type->kind=integer)))
<             (stmt->emptystmt:)))
<         (else: 
<           (stmt->callstmt:
<             (expr-> call: isMethodCall=false writeln[53]
<               (exprs: 
<                 (expr->[value='Valid'] string: 'Valid'
<                   type->(type->kind=string)))))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false write[54]
<           (exprs: 
<             (expr->[value='Enter date between Sunday and Saturday[0..6]: '] string: 'Enter date between Sunday and Saturday[0..6]: '
<               type->(type->kind=string)))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false readln[55]
<           (exprs: 
<             (expr-> binding: day[55]))))
<       (stmt->casestmt:
<         (expr-> binding: day[56])
<         (caselist: 
<           (labellist: 
<             (expr->[value=0] int: 0
<               type->(type->kind=integer)))
<           (stmt->compoundstmt:
<             (stmts: 
<               (stmt->assignstmt:
<                 (expr-> binding: weekday[57])
<                 (expr-> binding: sunday[57]))
<               (stmt->callstmt:
<                 (expr-> call: isMethodCall=false writeln[57]
<                   (exprs: 
<                     (expr->[value='Sunday'] string: 'Sunday'
<                       type->(type->kind=string)))))
<               (stmt->emptystmt:)))
<           (labellist: 
<             (expr->[value=1] int: 1
<               type->(type->kind=integer)))
<           (stmt->compoundstmt:
<             (stmts: 
<               (stmt->assignstmt:
<                 (expr-> binding: weekday[58])
<                 (expr-> binding: monday[58]))
<               (stmt->callstmt:
<                 (expr-> call: isMethodCall=false writeln[58]
<                   (exprs: 
<                     (expr->[value='Monday'] string: 'Monday'
<                       type->(type->kind=string)))))
<               (stmt->emptystmt:)))
<           (labellist: 
<             (expr->[value=2] int: 2
<               type->(type->kind=integer)))
<           (stmt->compoundstmt:
<             (stmts: 
<               (stmt->assignstmt:
<                 (expr-> binding: weekday[59])
<                 (expr-> binding: tuesday[59]))
<               (stmt->callstmt:
<                 (expr-> call: isMethodCall=false writeln[59]
<                   (exprs: 
<                     (expr->[value='Tuesday'] string: 'Tuesday'
<                       type->(type->kind=string)))))
<               (stmt->emptystmt:)))
<           (labellist: 
<             (expr->[value=3] int: 3
<               type->(type->kind=integer)))
<           (stmt->compoundstmt:
<             (stmts: 
<               (stmt->assignstmt:
<                 (expr-> binding: weekday[60])
<                 (expr-> binding: wednesday[60]))
<               (stmt->callstmt:
<                 (expr-> call: isMethodCall=false writeln[60]
<                   (exprs: 
<                     (expr->[value='Wednesday'] string: 'Wednesday'
<                       type->(type->kind=string)))))
<               (stmt->emptystmt:)))
<           (labellist: 
<             (expr->[value=4] int: 4
<               type->(type->kind=integer)))
<           (stmt->compoundstmt:
<             (stmts: 
<               (stmt->assignstmt:
<                 (expr-> binding: weekday[61])
<                 (expr-> binding: thursday[61]))
<               (stmt->callstmt:
<                 (expr-> call: isMethodCall=false writeln[61]
<                   (exprs: 
<                     (expr->[value='Thursday'] string: 'Thursday'
<                       type->(type->kind=string)))))
<               (stmt->emptystmt:)))
<           (labellist: 
<             (expr->[value=5] int: 5
<               type->(type->kind=integer)))
<           (stmt->compoundstmt:
<             (stmts: 
<               (stmt->assignstmt:
<                 (expr-> binding: weekday[62])
<                 (expr-> binding: friday[62]))
<               (stmt->callstmt:
<                 (expr-> call: isMethodCall=false writeln[62]
<                   (exprs: 
<                     (expr->[value='Friday'] string: 'Friday'
<                       type->(type->kind=string)))))
<               (stmt->emptystmt:)))
<           (labellist: 
<             (expr->[value=6] int: 6
<               type->(type->kind=integer)))
<           (stmt->compoundstmt:
<             (stmts: 
<               (stmt->assignstmt:
<                 (expr-> binding: weekday[63])
<                 (expr-> binding: saturday[63]))
<               (stmt->callstmt:
<                 (expr-> call: isMethodCall=false writeln[63]
<                   (exprs: 
<                     (expr->[value='Saturday'] string: 'Saturday'
<                       type->(type->kind=string)))))
<               (stmt->emptystmt:)))))
<       (stmt->casestmt:
<         (expr-> binding: weekday[65])
<         (caselist: 
<           (labellist: 
<             (expr-> binding: monday[66])
<             (expr-> binding: wednesday[67])
<             (expr-> binding: friday[68]))
<           (stmt->callstmt:
<             (expr-> call: isMethodCall=false writeln[68]
<               (exprs: 
<                 (expr->[value='Work hours : 8:00am - 5:00pm'] string: 'Work hours : 8:00am - 5:00pm'
<                   type->(type->kind=string)))))
<           (labellist: 
<             (expr-> binding: tuesday[69])
<             (expr-> binding: thursday[70]))
<           (stmt->callstmt:
<             (expr-> call: isMethodCall=false writeln[70]
<               (exprs: 
<                 (expr->[value='Work hours : 8:00am - 1:00pm'] string: 'Work hours : 8:00am - 1:00pm'
<                   type->(type->kind=string)))))
<           (labellist: 
<             (expr-> binding: saturday[71])
<             (expr-> binding: sunday[72]))
<           (stmt->callstmt:
<             (expr-> call: isMethodCall=false writeln[72]
<               (exprs: 
<                 (expr->[value='No work hours'] string: 'No work hours'
<                   type->(type->kind=string)))))))
<       (stmt->forstmt:i[74]
<         (expr->[value=1] int: 1
<           type->(type->kind=integer))
<         (expr-> binding: size[74])
<         (upward:true)
<         (stmt->compoundstmt:
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binexp: .
<                 (expr-> binexp: [
<                   (expr-> binding: list[76])
<                   (expr-> binding: i[76]))
<                 (expr-> id: val))
<               (expr-> binding: i[76]))
<             (stmt->assignstmt:
<               (expr-> binexp: .
<                 (expr-> binexp: [
<                   (expr-> binding: list[77])
<                   (expr-> binding: i[77]))
<                 (expr-> id: use))
<               (expr-> binding: true[77]))
<             (stmt->emptystmt:))))
<       (stmt->assignstmt:
<         (expr-> binding: i[79])
<         (expr->[value=1] int: 1
<           type->(type->kind=integer)))
<       (stmt->repeatstmt:
<         (expr-> binexp: >=
<           (expr-> binding: i[84])
<           (expr->[value=10] int: 10
<             type->(type->kind=integer)))
<         (stmts: 
<           (stmt->assignstmt:
<             (expr-> binexp: .
<               (expr-> binexp: [
<                 (expr-> binding: list[81])
<                 (expr-> binding: i[81]))
<               (expr-> id: val))
<             (expr->[value=0] int: 0
<               type->(type->kind=integer)))
<           (stmt->assignstmt:
<             (expr-> binexp: .
<               (expr-> binexp: [
<                 (expr-> binding: list[82])
<                 (expr-> binding: i[82]))
<               (expr-> id: use))
<             (expr-> binding: false[82]))
<           (stmt->assignstmt:
<             (expr-> binding: i[83])
<             (expr-> binexp: +
<               (expr-> binding: i[83])
<               (expr->[value=1] int: 1
<                 type->(type->kind=integer))))
<           (stmt->emptystmt:)))
<       (stmt->assignstmt:
<         (expr-> binding: i[85])
<         (expr->[value=1] int: 1
<           type->(type->kind=integer)))
<       (stmt->whilestmt:
<         (expr-> binexp: <>
<           (expr-> binexp: .
<             (expr-> binexp: [
<               (expr-> binding: list[86])
<               (expr-> binding: i[86]))
<             (expr-> id: val))
<           (expr->[value=0] int: 0
<             type->(type->kind=integer)))
<         (stmt->compoundstmt:
<           (stmts: 
<             (stmt->ifstmt: 
<               (expr-> binexp: =
<                 (expr-> binding: i[88])
<                 (expr->[value=1] int: 1
<                   type->(type->kind=integer)))
<               (stmt->callstmt:
<                 (expr-> call: isMethodCall=false writeln[89]
<                   (exprs: 
<                     (expr->[value=1] int: 1
<                       type->(type->kind=integer)))))
<               (else: 
<                 (stmt->ifstmt: 
<                   (expr-> binexp: <
<                     (expr-> binding: i[90])
<                     (expr->[value=5] int: 5
<                       type->(type->kind=integer)))
<                   (stmt->compoundstmt:
<                     (stmts: 
<                       (stmt->assignstmt:
<                         (expr-> binexp: .
<                           (expr-> binexp: [
<                             (expr-> binding: list[92])
<                             (expr-> binding: i[92]))
<                           (expr-> id: val))
<                         (expr-> binexp: +
<                           (expr-> binexp: .
<                             (expr-> binexp: [
<                               (expr-> binding: list[92])
<                               (expr-> binding: i[92]))
<                             (expr-> id: val))
<                           (expr-> call: isMethodCall=false double[92]
<                             (exprs: 
<                               (expr-> binexp: .
<                                 (expr-> binexp: [
<                                   (expr-> binding: list[92])
<                                   (expr-> binding: i[92]))
<                                 (expr-> id: val))))))
<                       (stmt->assignstmt:
<                         (expr-> binexp: .
<                           (expr-> binexp: [
<                             (expr-> binding: list[93])
<                             (expr-> binding: i[93]))
<                           (expr-> id: use))
<                         (expr-> unexp: not
<                           (expr-> binexp: .
<                             (expr-> binexp: [
<                               (expr-> binding: list[93])
<                               (expr-> binding: i[93]))
<                             (expr-> id: use))))
<                       (stmt->callstmt:
<                         (expr-> call: isMethodCall=false writeln[94]
<                           (exprs: 
<                             (expr-> binding: i[94])
<                             (expr->[value='<5'] string: '<5'
<                               type->(type->kind=string)))))
<                       (stmt->emptystmt:)))
<                   (else: 
<                     (stmt->callstmt:
<                       (expr-> call: isMethodCall=false writeln[97]
<                         (exprs: 
<                           (expr-> binding: i[97])
<                           (expr->[value='>=5'] string: '>=5'
<                             type->(type->kind=string)))))))))
<             (stmt->assignstmt:
<               (expr-> binding: i[98])
<               (expr-> binexp: +
<                 (expr-> binding: i[98])
<                 (expr->[value=1] int: 1
<                   type->(type->kind=integer))))
<             (stmt->emptystmt:))))
<       (stmt->emptystmt:))))



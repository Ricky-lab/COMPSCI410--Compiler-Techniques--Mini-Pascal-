gcd.token:
2,3c2,3
< $gcd
< @;
---
> $gcd;
> 
6,7c6
< @,
< $y
---
> $, y
9,10c8,9
< $integer
< @;
---
> $integer;
> 
13,18c12,13
< @(
< $x
< @,
< $y
< @)
< @;
---
> $(, y);
> 
21,22c16
< @<>
< $y
---
> $<> y
31,34c25,26
< @:=
< $x
< @-
< $y
---
> $:= x
> $- y
37,43c29,33
< @:=
< $y
< @-
< $x
< @;
< end
< @;
---
> $:= y
> $- x;
> 
> $end;
> 
45,52c35,38
< @(
< 'GCD = '
< @,
< $x
< @)
< @;
< end
< @.
---
> $(gcd
> '= ', x);
> END.
> '


proctest.err:
0a1,9
> Exception occurred:
> java.lang.IllegalStateException: Operator was not found in the operator table: (:
> 	at MPC.TokenOp.get(TokenOp.java:89)
> 	at MPC.MPCScanner.next_token(MPCScanner.java:505)
> 	at java_cup.runtime.lr_parser.scan(lr_parser.java:349)
> 	at java_cup.runtime.lr_parser.parse(lr_parser.java:578)
> 	at MPC.Parse.perform(Parse.java:45)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


proctest.token:
2,3c2,3
< $procfunctest
< @;
---
> $procfunctest;
> 
6,10c6,8
< @=
< #1
< @..
< #10
< @;
---
> $= 1
> $.. 10;
> 
12,13c10
< $p0
< @;
---
> $p0;
15,16c12,13
< end
< @;
---
> $end;
> 
19,452d15
< @(
< $x
< @:
< $integer
< @)
< @;
< begin
< end
< @;
< procedure
< $p2
< @(
< $x
< @:
< $integer
< @;
< $y
< @:
< $boolean
< @)
< @;
< begin
< end
< @;
< procedure
< $p3
< @(
< $x
< @:
< $integer
< @;
< $r
< @:
< $rng
< @;
< var
< $xx
< @:
< $integer
< @;
< var
< $rr
< @:
< $rng
< @)
< @;
< begin
< end
< @;
< function
< $f0
< @:
< $integer
< @;
< begin
< $f0
< @:=
< #0
< @;
< end
< @;
< function
< $f1
< @(
< $x
< @:
< $integer
< @)
< @:
< $integer
< @;
< begin
< $f1
< @:=
< $x
< @;
< end
< @;
< function
< $f2
< @(
< $x
< @:
< $integer
< @;
< $y
< @:
< $boolean
< @)
< @:
< $boolean
< @;
< begin
< $f2
< @:=
< $y
< @;
< end
< @;
< function
< $f3
< @:
< $boolean
< @;
< procedure
< $pp
< @;
< procedure
< $qq
< @;
< begin
< $pp
< @:=
< #5
< @;
< end
< @;
< begin
< $f3
< @:=
< $false
< @;
< $pp
< @:=
< #17
< @;
< end
< @;
< function
< $ff
< @:
< $boolean
< @;
< begin
< $f3
< @:=
< $true
< @;
< $ff
< @:=
< $false
< @;
< end
< @;
< begin
< $f3
< @:=
< $true
< @;
< $f3
< @:=
< #3
< @;
< end
< @;
< type
< $pint
< @=
< @^
< $integer
< @;
< var
< $r
< @:
< $rng
< @;
< $x
< @:
< $integer
< @;
< $y
< @:
< $boolean
< @;
< $p
< @:
< @^
< $integer
< @;
< begin
< $p0
< @;
< $p1
< @;
< $p0
< @(
< $x
< @)
< @;
< $p1
< @(
< $x
< @)
< @;
< $p1
< @(
< $y
< @)
< @;
< $p1
< @(
< $x
< @,
< $y
< @)
< @;
< $p2
< @(
< $x
< @)
< @;
< $p2
< @(
< $x
< @,
< $y
< @)
< @;
< $p2
< @(
< $y
< @,
< $x
< @)
< @;
< $p3
< @(
< $x
< @,
< $r
< @,
< $x
< @,
< $r
< @)
< @;
< $p3
< @(
< $r
< @,
< $x
< @,
< $x
< @,
< $r
< @)
< @;
< $p3
< @(
< $x
< @,
< $r
< @,
< $r
< @,
< $x
< @)
< @;
< $p3
< @(
< #50
< @,
< #50
< @,
< $x
< @,
< $r
< @)
< @;
< $p3
< @(
< #50
< @,
< #50
< @,
< #50
< @,
< #50
< @)
< @;
< $x
< @:=
< $f0
< @;
< $x
< @:=
< $f1
< @;
< $x
< @:=
< $f0
< @(
< $x
< @)
< @;
< $x
< @:=
< $f1
< @(
< $x
< @)
< @;
< $x
< @:=
< $f1
< @(
< $y
< @)
< @;
< $y
< @:=
< $f2
< @(
< $x
< @)
< @;
< $x
< @:=
< $f2
< @(
< $x
< @,
< $y
< @)
< @;
< $y
< @:=
< $f2
< @(
< $x
< @,
< $y
< @)
< @;
< $y
< @:=
< $f2
< @(
< $y
< @,
< $x
< @)
< @;
< $readln
< @;
< $readln
< @(
< #3
< @)
< @;
< $readln
< @(
< $x
< @)
< @;
< $readln
< @(
< $x
< @,
< #3
< @)
< @;
< $write
< @;
< $writeln
< @;
< $write
< @(
< $x
< @,
< #3
< @)
< @;
< $writeln
< @(
< $x
< @,
< #3
< @)
< @;
< $write
< @(
< $p
< @)
< @;
< $new
< @(
< $p
< @)
< @;
< $new
< @(
< $x
< @)
< @;
< $new
< @(
< #3
< @)
< @;
< $new
< @;
< $new
< @(
< $p
< @,
< $x
< @)
< @;
< $p
< @:=
< $new
< @(
< $pint
< @)
< @;
< $x
< @:=
< $new
< @(
< $pint
< @)
< @;
< $y
< @:=
< $new
< @(
< $boolean
< @)
< @;
< end
< @.
< EOF
< EOF


scangood.err:
0a1,132
> line 7: Unexpected character: '*' (code = 42 = 052 = \u002a)
> { some more challenging ones **
> ------------------------------^
> resetting to scan a new token
> line 7: Unexpected character: '*' (code = 42 = 052 = \u002a)
> { some more challenging ones ***
> -------------------------------^
> resetting to scan a new token
> line 7: Unexpected character: ')' (code = 41 = 051 = \u0029)
> { some more challenging ones *** )
> ---------------------------------^
> resetting to scan a new token
> line 7: Unexpected character: ')' (code = 41 = 051 = \u0029)
> { some more challenging ones *** ))
> ----------------------------------^
> resetting to scan a new token
> line 7: Unexpected character: ')' (code = 41 = 051 = \u0029)
> { some more challenging ones *** )))
> -----------------------------------^
> resetting to scan a new token
> line 7: Unexpected character: '}' (code = 125 = 175 = \u007d)
> { some more challenging ones *** ))) }
> -------------------------------------^
> resetting to scan a new token
> line 7: Unexpected character: '*' (code = 42 = 052 = \u002a)
> { some more challenging ones *** ))) } g { **
> --------------------------------------------^
> resetting to scan a new token
> line 7: Unexpected character: '*' (code = 42 = 052 = \u002a)
> { some more challenging ones *** ))) } g { ** *
> ----------------------------------------------^
> resetting to scan a new token
> line 7: Unexpected character: ')' (code = 41 = 051 = \u0029)
> { some more challenging ones *** ))) } g { ** *)
> -----------------------------------------------^
> resetting to scan a new token
> line 7: Unexpected character: '*' (code = 42 = 052 = \u002a)
> { some more challenging ones *** ))) } g { ** *) h { **
> ------------------------------------------------------^
> resetting to scan a new token
> line 7: Unexpected character: '*' (code = 42 = 052 = \u002a)
> { some more challenging ones *** ))) } g { ** *) h { ***
> -------------------------------------------------------^
> resetting to scan a new token
> line 7: Unexpected character: '}' (code = 125 = 175 = \u007d)
> { some more challenging ones *** ))) } g { ** *) h { ***}
> --------------------------------------------------------^
> resetting to scan a new token
> line 7: Unexpected character: '}' (code = 125 = 175 = \u007d)
> { some more challenging ones *** ))) } g { ** *) h { ***} i {*}
> --------------------------------------------------------------^
> resetting to scan a new token
> line 7: Unexpected character: '*' (code = 42 = 052 = \u002a)
> { some more challenging ones *** ))) } g { ** *) h { ***} i {*} j (****
> ----------------------------------------------------------------------^
> resetting to scan a new token
> line 7: Unexpected character: '*' (code = 42 = 052 = \u002a)
> { some more challenging ones *** ))) } g { ** *) h { ***} i {*} j (*****
> -----------------------------------------------------------------------^
> resetting to scan a new token
> line 7: Unexpected character: ')' (code = 41 = 051 = \u0029)
> { some more challenging ones *** ))) } g { ** *) h { ***} i {*} j (*****)
> ------------------------------------------------------------------------^
> resetting to scan a new token
> line 19: Unexpected character: '_' (code = 95 = 137 = \u005f)
> max_
> ---^
> resetting to scan a new token
> line 19: Unexpected character: '_' (code = 95 = 137 = \u005f)
> max_students a_
> --------------^
> resetting to scan a new token
> line 19: Unexpected character: '_' (code = 95 = 137 = \u005f)
> max_students a_b_
> ----------------^
> resetting to scan a new token
> line 19: Unexpected character: '_' (code = 95 = 137 = \u005f)
> max_students a_b_c A_
> --------------------^
> resetting to scan a new token
> line 19: Unexpected character: '_' (code = 95 = 137 = \u005f)
> max_students a_b_c A_b_
> ----------------------^
> resetting to scan a new token
> line 28: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 10#
> --^
> resetting to scan a new token
> line 28: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 10#99 2#
> -------^
> resetting to scan a new token
> line 28: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 10#99 2#1001 8#
> --------------^
> resetting to scan a new token
> line 28: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 10#99 2#1001 8#077 16#
> ---------------------^
> resetting to scan a new token
> line 28: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 10#99 2#1001 8#077 16#beef 36#
> -----------------------------^
> resetting to scan a new token
> line 29: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 2#
> -^
> resetting to scan a new token
> line 29: Unexpected character: '_' (code = 95 = 137 = \u005f)
> 2#1000_
> ------^
> resetting to scan a new token
> line 29: Unexpected character: '_' (code = 95 = 137 = \u005f)
> 2#1000_0001 2_
> -------------^
> resetting to scan a new token
> line 29: Unexpected character: '_' (code = 95 = 137 = \u005f)
> 2#1000_0001 2_000_
> -----------------^
> resetting to scan a new token
> line 29: Unexpected character: '_' (code = 95 = 137 = \u005f)
> 2#1000_0001 2_000_000 1_
> -----------------------^
> resetting to scan a new token
> line 29: Unexpected character: '_' (code = 95 = 137 = \u005f)
> 2#1000_0001 2_000_000 1_2_
> -------------------------^
> resetting to scan a new token
> line 29: Unexpected character: '_' (code = 95 = 137 = \u005f)
> 2#1000_0001 2_000_000 1_2_3_
> ---------------------------^
> resetting to scan a new token


scangood.token:
4,6c4,6
< $d
< $e
< $f
---
> $*d
> $(* e
> $(* *f
51,53c51,58
< $max_students
< $a_b_c
< $a_b_c
---
> $max
> $students
> $a
> $b
> $c
> $a
> $b
> $c
63a69
> #10
65,97c71,80
< #9
< #63
< #48879
< #46617
< #129
< #2000000
< #1234
< 'Hello, COINS 610'
< 'Special characters here : (:-)=<===<!!!!;<=>?@[]  ^_`{|}~!#$%&  ()*+,-./:"'
< '' umatched 'quote' '
< 'test' nested' string'
< @+
< @-
< @*
< @.
< @:=
< @=
< @<>
< @<
< @<=
< @>
< @>=
< @,
< @;
< @:
< @..
< @(
< @)
< @[
< @]
< @^
< $x
< $w
---
> #2
> #1001
> #8
> #77
> #16
> $beef
> #36
> $zyx
> #2
> #1000
99,117c82,111
< program
< $scantest
< @;
< var
< $a
< @,
< $b
< @:
< $integer
< @;
< begin
< $a
< @:=
< #3000
< @+
< $b
< @;
< end
< @.
---
> #2
> #0
> #0
> #1
> #2
> #3
> #4
> ''Hello, COINS 610'
> 'Special characters here : (:-)=<===<!!!!;<=>?@[]  ^_`{|}~!#$%&  ()*+,-./:"'
> ''' umatched ''quote'' '
> 'test'' nested'' string'
> 
> { Arithmetic, logical ops  and others}
> +-*.:==<><<=>>=,;:..()[]^
> 
> { whitespace test: before the identifiers and numbers are unprintable
>  characters }
> 	x
> w
>  1
> 
> { a simple pascal subset program here! }
> 
> program scantest;
> { simple variable declaration }
> VAR a,b : INTEGER;
> BEGIN
>   a := 3000 + b;
> END.
> '


scanids.err:
1c1
< line 3: Unexpected character: '\u000a' (code = 10 = 012 = \u000a)
---
> line 2: Unexpected character: '_' (code = 95 = 137 = \u005f)
3c3
< ^
---
> -^
4a5,16
> line 3: Unexpected character: '_' (code = 95 = 137 = \u005f)
> x_
> -^
> resetting to scan a new token
> line 4: Unexpected character: '_' (code = 95 = 137 = \u005f)
> X_
> -^
> resetting to scan a new token
> line 6: Unexpected character: '_' (code = 95 = 137 = \u005f)
> X_
> -^
> resetting to scan a new token
8a21,24
> line 7: Unexpected character: '_' (code = 95 = 137 = \u005f)
> x_
> -^
> resetting to scan a new token


scanids.token:
2,3d1
< $x_y
< $x_y
4a3,10
> $x
> $y
> $x
> $y
> $x
> $x
> $y
> $x
6d11
< $x_y


scanints.err:
5c5
< line 7: Requested integer base 0 not in range 2 to 36
---
> line 7: Unexpected character: '#' (code = 35 = 043 = \u0023)
9c9
< line 8: Requested integer base 1 not in range 2 to 36
---
> line 8: Unexpected character: '#' (code = 35 = 043 = \u0023)
13c13
< line 9: Requested integer base 37 not in range 2 to 36
---
> line 9: Unexpected character: '#' (code = 35 = 043 = \u0023)
17,19c17,35
< line 11: Integer literal digit 2 too large for number base 2
< 2#102
< ----^
---
> line 10: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 2#
> -^
> resetting to scan a new token
> line 11: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 2#
> -^
> resetting to scan a new token
> line 12: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 10#
> --^
> resetting to scan a new token
> line 13: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 16#
> --^
> resetting to scan a new token
> line 14: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 16#
> --^
21,22c37,54
< line 12: Integer literal digit a too large for number base 10
< 10#10A
---
> line 15: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 35#
> --^
> resetting to scan a new token
> line 16: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 35#
> --^
> resetting to scan a new token
> line 17: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 35#
> --^
> resetting to scan a new token
> line 18: Unexpected character: '_' (code = 95 = 137 = \u005f)
> 2_
> -^
> resetting to scan a new token
> line 18: Unexpected character: '_' (code = 95 = 137 = \u005f)
> 2_000_
25,27c57,59
< line 14: Integer literal digit g too large for number base 16
< 16#G
< ---^
---
> line 18: Unexpected character: '_' (code = 95 = 137 = \u005f)
> 2_000_000_
> ---------^
29,31c61,71
< line 17: Integer literal digit z too large for number base 35
< 35#Z
< ---^
---
> line 19: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 2#
> -^
> resetting to scan a new token
> line 19: Unexpected character: '_' (code = 95 = 137 = \u005f)
> 2#1000_
> ------^
> resetting to scan a new token
> line 20: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 16#
> --^
33,35c73,87
< line 20: Integer literal value too large
< 16#dead_beef
< -----------^
---
> line 20: Unexpected character: '_' (code = 95 = 137 = \u005f)
> 16#dead_
> -------^
> resetting to scan a new token
> line 21: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 16#
> --^
> resetting to scan a new token
> line 21: Unexpected character: '_' (code = 95 = 137 = \u005f)
> 16#4ead_
> -------^
> resetting to scan a new token
> line 22: Unexpected character: '_' (code = 95 = 137 = \u005f)
> 2_
> -^
41c93
< line 23: Unexpected character: ' ' (code = 32 = 040 = \u0020)
---
> line 23: Unexpected character: '_' (code = 95 = 137 = \u005f)
42a95,102
> --^
> resetting to scan a new token
> line 24: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 2#
> -^
> resetting to scan a new token
> line 24: Unexpected character: '_' (code = 95 = 137 = \u005f)
> 2#1_
49c109,113
< line 25: Unexpected character: ' ' (code = 32 = 040 = \u0020)
---
> line 25: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 2#
> -^
> resetting to scan a new token
> line 25: Unexpected character: '_' (code = 95 = 137 = \u005f)
51c115
< -----^
---
> ----^


scanints.token:
7a8
> #1
9,15c10,30
< #5
< #511
< #34
< #34
< #2000000000
< #129
< #1320009455
---
> #37
> #0
> #2
> #101
> #2
> #102
> #10
> #10
> $a
> #16
> #1
> $ff
> #16
> $g
> #35
> $y
> #35
> $y
> #35
> $z
> #2
17a33,51
> #0
> #2
> #1000
> #1
> #16
> $dead
> $beef
> #16
> #4
> $ead
> $beef
> #2
> #0
> #20
> #2
> #1
> #0
> #2
> #10


scanmin.err:
0a1,10
> Exception occurred:
> java.lang.IllegalStateException: Operator was not found in the operator table: b;
> end.
> 	at MPC.TokenOp.get(TokenOp.java:89)
> 	at MPC.MPCScanner.next_token(MPCScanner.java:505)
> 	at java_cup.runtime.lr_parser.scan(lr_parser.java:349)
> 	at java_cup.runtime.lr_parser.parse(lr_parser.java:578)
> 	at MPC.Parse.perform(Parse.java:45)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


scanmin.token:
51,63c51,54
< @:=
< @=
< @<>
< @<
< @<=
< @>
< @>=
< @,
< @;
< @:
< @..
< @(
< @)
---
> $:==
> $<><
> $<=>
> $>=,;:..()
68,69c59,60
< $scantest
< @;
---
> $scantest;
> 
72,73c63
< @,
< $b
---
> $,b
75,76c65
< $integer
< @;
---
> $integer;
79,80c68
< @:=
< #3000
---
> $:= 3000
82,87d69
< $b
< @;
< end
< @.
< EOF
< EOF


scanstringnl.err:
1,8d0
< line 3: Unexpected character: '\u000a' (code = 10 = 012 = \u000a)
< 'Hello, 
< ^
< resetting to scan a new token
< line 4: Unexpected character: '\u000a' (code = 10 = 012 = \u000a)
< COINS 610'
< ^
< resetting to scan a new token


scanstringnl.token:
1,2c1,4
< $coins
< #610
---
> ''Hello, 
> COINS 610'
> 
> '


testbranch.token:
2,3c2,3
< $testbranch
< @;
---
> $testbranch;
> 
5,6c5
< $reached
< @;
---
> $reached;
9,10c8
< @,
< $y
---
> $, y
12,13c10
< $integer
< @;
---
> $integer;
16,18c13,14
< @:=
< #1
< @;
---
> $:= 1;
> 
20,24c16,18
< @:=
< #2
< @-
< $x
< @;
---
> $:= 2
> $- x;
> 
27,28c21
< @<>
< $y
---
> $<> y
31,32c24,25
< $unreached
< @;
---
> $unreached;
> 
34,198c27,59
< @(
< 'bar'
< @)
< @;
< end
< @;
< $writeln
< @(
< 'foo'
< @)
< @;
< end
< @;
< procedure
< $unreached
< @;
< begin
< end
< @;
< procedure
< $branchingforms
< @;
< var
< $x
< @,
< $y
< @,
< $z
< @,
< $a
< @,
< $b
< @,
< $c
< @:
< $integer
< @;
< $bb
< @:
< $boolean
< @;
< begin
< if
< @(
< $x
< @<
< $y
< @)
< and
< @(
< $y
< @<
< $z
< @)
< then
< $bb
< @:=
< $true
< @;
< while
< @(
< $a
< @<>
< $b
< @)
< or
< @(
< $z
< @=
< #0
< @)
< do
< $x
< @:=
< $x
< @+
< #1
< @;
< repeat
< $z
< @:=
< $z
< @+
< #2
< @;
< until
< not
< @(
< @(
< $a
< @=
< $b
< @)
< or
< @(
< $y
< @<>
< $z
< @)
< or
< $bb
< @)
< @;
< end
< @;
< var
< $z
< @:
< $integer
< @;
< begin
< $z
< @:=
< #0
< @;
< $reached
< @;
< if
< $z
< @<>
< #0
< then
< if
< $z
< @<>
< #1
< then
< $z
< @:=
< #2
< else
< $z
< @:=
< #3
< else
< if
< $z
< @<>
< #4
< then
< $z
< @:=
< #5
< else
< $z
< @:=
< #6
< @;
< while
< $false
< do
< $z
< @:=
< $z
< @+
< #1
< @;
< $z
< @:=
< $z
< @+
< #100
< @;
< end
< @.
---
> '(bar');
>    END;
>    WRITELN ('foo');
> END; { reached }
> 
> PROCEDURE unreached;
> BEGIN
> END; { unreached }
> 
> PROCEDURE branchingForms;
> VAR
>    x, y, z, a, b, c : integer;
>    bb               : boolean;
> BEGIN
>    IF (x < y) AND (y < z) THEN bb := true;
>    WHILE (a <> b) OR (z = 0) DO x := x + 1;
>    REPEAT z := z + 2; UNTIL NOT ((a = b) OR (y <> z) OR bb);
> END;
> 
> VAR
>    z: integer;
> 
> BEGIN
>    z := 0;
>    reached;
>    IF z <> 0
>       THEN IF z <> 1 THEN z := 2 ELSE z := 3
>       ELSE IF z <> 4 THEN z := 5 ELSE z := 6;
>    WHILE FALSE DO
>       z := z + 1;
>    z := z + 100;
> END.
> '


testdead.err:
0a1,4
> line 13: Unexpected character: '!' (code = 33 = 041 = \u0021)
>    writeln('Got here!
> --------------------^
> resetting to scan a new token


testdead.token:
2,3c2,3
< $test
< @;
---
> $test;
> 
6,7c6
< @=
< abstract
---
> $= abstract
11,17c10,12
< $integer
< @;
< end
< @;
< $tconc11
< @=
< $tabs1
---
> $integer; end; 
> $(* *tconc11
> $= tabs1
21,27c16,18
< $integer
< @;
< end
< @;
< $tconc12
< @=
< $tabs1
---
> $integer; end; 
> $(* *tconc12
> $= tabs1
31,37c22,24
< $integer
< @;
< end
< @;
< $tabs2
< @=
< abstract
---
> $integer; end; 
> $(* *tabs2
> $= abstract
41,45c28,29
< $boolean
< @;
< end
< @;
< var
---
> $boolean; end; 
> $(* *var
48,49c32,33
< $tabs1
< @;
---
> $tabs1;
> 
52,78c36,38
< @:=
< $new
< @(
< $tconc11
< @)
< @;
< $writeln
< @(
< 'Got here!'
< @)
< @;
< while
< $true
< do
< $writeln
< @(
< 'Hello World'
< @)
< @;
< while
< $false
< do
< $writeln
< @(
< 'Not more?'
< @)
< @;
---
> $:= new
> $(conc11);
> 
80,85c40,49
< @(
< 'More?'
< @)
< @;
< end
< @.
---
> $(got
> $here
> '');
>    while true do
>       writeln('Hello World');
>    while false do
>       writeln('Not more?');
>    writeln('More?');
> end.
> '


testfor.err:
0a1,10
> Exception occurred:
> java.lang.IllegalStateException: Operator was not found in the operator table: + 2;
> end.
> 	at MPC.TokenOp.get(TokenOp.java:89)
> 	at MPC.MPCScanner.next_token(MPCScanner.java:505)
> 	at java_cup.runtime.lr_parser.scan(lr_parser.java:349)
> 	at java_cup.runtime.lr_parser.parse(lr_parser.java:578)
> 	at MPC.Parse.perform(Parse.java:45)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testfor.token:
2,3c2
< $testfor
< @;
---
> $testfor;
7,8c6,7
< $integer
< @;
---
> $integer;
> 
10,11c9
< @,
< $n
---
> $, n
14,16c12,13
< @..
< #10
< @;
---
> $.. 10;
> 
19,20c16
< $integer
< @;
---
> $integer;
23,25c19,20
< @:=
< #0
< @;
---
> $:= 0;
> 
28,29c23
< @:=
< #1
---
> $:= 1
34,38c28,30
< @:=
< $x
< @+
< $i
< @;
---
> $:= x
> $+ i;
> 
40,42c32,33
< @:=
< #0
< @;
---
> $:= 0;
> 
45,46c36
< @:=
< #1
---
> $:= 1
51,55c41,43
< @:=
< $x
< @+
< #1
< @;
---
> $:= x
> $+ 1;
> 
58,59c46
< @:=
< #1
---
> $:= 1
64,68c51,53
< @:=
< $x
< @+
< #1
< @;
---
> $:= x
> $+ 1;
> 
71,72c56
< @:=
< $m
---
> $:= m
77,81c61,63
< @:=
< $x
< @-
< #1
< @;
---
> $:= x
> $- 1;
> 
84,85c66
< @:=
< $i
---
> $:= i
90,98c71
< @:=
< $x
< @+
< #2
< @;
< end
< @.
< EOF
< EOF
---
> $:= x


testmin.err:
0a1,10
> Exception occurred:
> java.lang.IllegalStateException: Operator was not found in the operator table: end;
> end.
> 	at MPC.TokenOp.get(TokenOp.java:89)
> 	at MPC.MPCScanner.next_token(MPCScanner.java:505)
> 	at java_cup.runtime.lr_parser.scan(lr_parser.java:349)
> 	at java_cup.runtime.lr_parser.parse(lr_parser.java:578)
> 	at MPC.Parse.perform(Parse.java:45)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testmin.token:
2,3c2,3
< $test
< @;
---
> $test;
> 
6,8c6,7
< @=
< $true
< @;
---
> $=true;
> 
12,13c11,12
< $boolean
< @;
---
> $boolean;
> 
15,18c14,15
< @,
< $w2
< @,
< $w3
---
> $,w2
> $,w3
20,21c17
< $boolean
< @;
---
> $boolean;
24,26c20
< @:=
< $false
< @;
---
> $:=false; 
29,30c23
< @=
< $n
---
> $=n
34,35c27
< @:=
< $w1
---
> $:=w1
37,38c29,30
< $true
< @;
---
> $true;
> 
40,41c32
< @:=
< $w2
---
> $:=w2
43,48c34,35
< $false
< @;
< $w3
< @:=
< not
< @(
---
> $false;
> 
49a37,38
> $:=Not
> #3
53,61c42,43
< $w1
< @)
< @;
< end
< @;
< end
< @.
< EOF
< EOF
---
> $w1);
> 


testmisc2.token:
2,3c2,3
< $bigtest
< @;
---
> $bigtest;
> 
6,12c6,8
< @=
< 'string constant'
< @;
< $c2
< @=
< #100
< @;
---
> '= 'string constant';
>   c2 = 100;
> 
14,111c10,25
< $t1
< @=
< #100
< @..
< #200
< @;
< $t2
< @=
< 'string1'
< @..
< 'string2'
< @;
< var
< $v1
< @,
< $v2
< @:
< array
< @[
< #10
< @..
< #20
< @,
< #20
< @..
< #30
< @,
< #30
< @..
< #40
< @]
< of
< $integer
< @;
< $v3
< @,
< $v4
< @:
< array
< @[
< #10
< @..
< #20
< @]
< of
< array
< @[
< #20
< @..
< #30
< @,
< #30
< @..
< #40
< @]
< of
< $integer
< @;
< $v5
< @:
< array
< @[
< #10
< @..
< #20
< @]
< of
< array
< @[
< #20
< @..
< #30
< @]
< of
< array
< @[
< #30
< @..
< #40
< @]
< of
< $integer
< @;
< procedure
< $p1
< @;
< begin
< end
< @;
< function
< $f1
< @:
< $integer
< @;
< begin
< @;
< end
< @;
---
>   t1 = 100..200;
>   t2 = 'string1'..'string2';
> 
> var
>   v1, v2 : array[10..20,20..30,30..40] of integer;
>   v3,v4 : array[10..20] of array[20..30,30..40] of integer;
>   v5 : array[10..20] of array [20..30] of array[30..40] of integer;
> 
> procedure p1;
>   begin
>   end;
> 
> function f1 : integer;
>   begin;
>   end;
> 
113,203c27,41
< $c1
< @=
< @+
< #100
< @;
< $c2
< @=
< @-
< $c1
< @;
< $c3
< @=
< @+
< #100
< @;
< $c4
< @=
< @-
< $c3
< @;
< var
< $a
< @,
< $b
< @,
< $c
< @,
< $d
< @,
< $e
< @,
< $f
< @,
< $g
< @,
< $h
< @,
< $i
< @:
< array
< @[
< #1
< @..
< #100
< @]
< of
< record
< $a
< @,
< $b
< @:
< array
< @[
< #50
< @..
< #60
< @]
< of
< $integer
< @;
< $c
< @,
< $d
< @,
< $e
< @,
< $f
< @:
< array
< @[
< #100
< @..
< #110
< @]
< of
< array
< @[
< #5
< @..
< #10
< @,
< #80
< @..
< #90
< @]
< of
< record
< end
< @;
< end
< @;
---
>   c1 = +100;
>   c2 = -c1;
>   c3 = +100;
>   c4 = -c3;
> 
> var
>   a, b, c, d, e, f, g, h, i : 
>     array[1..100] of 
>       record
>         a,b : array[50..60] of integer;
>         c,d,e,f : array[100..110] of array[5..10,80..90] of
>           record
>           end;
>       end;
> 
205,245c43,48
< $ptr
< @=
< @^
< $sometype
< @;
< function
< $f1
< @(
< $a
< @:
< $integer
< @;
< var
< $a
< @,
< $b
< @,
< $c
< @:
< $integer
< @;
< $d
< @,
< $e
< @,
< $f
< @:
< $integer
< @;
< var
< $g
< @,
< $h
< @,
< $i
< @:
< $integer
< @)
< @:
< $sometype
< @;
---
>   ptr = ^sometype;
> 
> function f1(a:integer;
>             var a,b,c:integer;
>             d,e,f:integer;
>             var g,h,i:integer):sometype;
247,302c50,51
< $a
< @=
< record
< $a
< @:
< $integer
< @;
< $b
< @:
< $integer
< @;
< $c
< @:
< $integer
< @;
< end
< @;
< $b
< @=
< record
< $a
< @:
< $integer
< @;
< $b
< @:
< $integer
< @;
< $c
< @:
< $integer
< end
< @;
< const
< $constant
< @=
< #1000
< @;
< function
< $infunc
< @:
< $type1
< @;
< begin
< end
< @;
< var
< $x
< @,
< $y
< @,
< $z
< @:
< @^
< $integer
< @;
---
>     a=record a:integer;b:integer;c:integer;end;
>     b=record a:integer;b:integer;c:integer end;
304,343c53,54
< $c2
< @=
< #30000
< @;
< $c4
< @=
< @-
< #2
< @;
< $c5
< @=
< 'this is a test'
< @;
< procedure
< $inproc
< @(
< var
< $a
< @:
< $integer
< @;
< var
< $b
< @:
< $integer
< @;
< $c
< @:
< $integer
< @;
< $d
< @:
< $integer
< @;
< var
< $e
< @:
< $integer
< @)
< @;
---
>     constant = 1000;
>   function infunc:type1;
345,346c56,60
< end
< @;
---
>     end;
>   var x,y,z:^integer;
>   const c2 = 30000; c4 = -2; c5 = 'this is a test';
>   procedure inproc( var a:integer; var b:integer; c:integer;
>              d:integer; var e:integer );
348,395c62
< end
< @;
< type
< $x
< @=
< record
< $y
< @:
< record
< $z
< @:
< record
< $a
< @:
< array
< @[
< #1
< @..
< #2
< @,
< #3
< @..
< #4
< @,
< #5
< @..
< #6
< @,
< #7
< @..
< #8
< @,
< #9
< @..
< #10
< @]
< of
< $integer
< @;
< end
< @;
< end
< @;
< end
< @;
< procedure
< $foo
< @;
---
>     end;
397,398c64,65
< end
< @;
---
>   end;
> 
400,497c67,98
< $a
< @=
< $integer
< @;
< var
< $a
< @:
< $integer
< @;
< function
< $func1
< @(
< var
< $a
< @,
< $b
< @,
< $c
< @,
< $d
< @,
< $e
< @,
< $f
< @,
< $g
< @,
< $h
< @,
< $i
< @,
< $j
< @,
< $k
< @,
< $l
< @,
< $m
< @,
< $n
< @,
< $o
< @,
< $p
< @,
< $q
< @,
< $r
< @,
< $s
< @,
< $t
< @,
< $u
< @,
< $v
< @,
< $w
< @,
< $x
< @,
< $y
< @,
< $z
< @:
< $type1
< @)
< @:
< $type2
< @;
< begin
< end
< @;
< procedure
< $proc1
< @;
< begin
< end
< @;
< begin
< if
< $a
< @=
< $b
< then
< if
< $c
< @=
< $d
< then
< if
< $e
< @=
< $f
< then
< $g
< @:=
< $h
---
>   x = record
>         y: record
>           z : record
>             a: array [1..2,3..4,5..6,7..8,9..10] of integer;
>           end;
>         end;
>       end;
> 
> procedure foo;
>   begin
>   end;
> 
> type a = integer;
> 
> var 
>   a : integer;
> 
> function func1
>   (var a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z:type1):type2;
>   begin
>   end;
> 
> procedure proc1;
>   begin
>   end;
> 
> begin
> 
>   if a = b then
>     if c = d then
>       if e = f then
>         g := h
499,501c100
< $g
< @:=
< #2
---
>         g := 2
503,529c102,105
< $g
< @:=
< #3
< @;
< $a
< @:=
< #0
< @;
< while
< @(
< $a
< @<=
< #100
< @)
< or
< @(
< $b
< @>
< #20
< @)
< or
< @(
< $g
< @=
< #12
< @)
< do
---
>       g := 3;
> 
>   a := 0;
>   while (a <= 100) or (b > 20) or (g = 12) do
531,532c107
< end
< @;
---
>     end;
535,787c110,159
< end
< @;
< until
< @(
< $a
< @<=
< #100
< @)
< or
< @(
< $b
< @>
< #20
< @)
< or
< @(
< $g
< @=
< #12
< @)
< @;
< $a
< @:=
< #10
< @;
< $b
< @:=
< #20
< @;
< $c
< @:=
< $a
< @*
< $b
< @;
< $a
< @:=
< $a
< @+
< #10
< @*
< $b
< @-
< $c
< @;
< $a
< @:=
< @-
< $a
< @+
< #10
< @*
< $b
< @-
< $c
< @;
< $a
< @:=
< #0
< @;
< $b
< @:=
< #2
< @;
< repeat
< $a
< @:=
< $a
< @+
< #1
< @;
< $b
< @:=
< $b
< @*
< #2
< @;
< until
< $a
< @=
< #10
< @;
< for
< $a
< @:=
< @(
< #10
< @+
< #20
< @)
< to
< @(
< #100
< @-
< #10
< @)
< do
< begin
< $b
< @:=
< $b
< @+
< #1
< @;
< $c
< @:=
< $c
< @+
< #2
< @;
< end
< @;
< for
< $a
< @:=
< @(
< #10
< @+
< #20
< @)
< downto
< @(
< #100
< @-
< #10
< @)
< do
< begin
< $b
< @:=
< $b
< @+
< #1
< @;
< $c
< @:=
< $c
< @+
< #2
< @;
< end
< @;
< case
< $a
< of
< #1
< @,
< #2
< @,
< #3
< @:
< $b
< @:=
< #10
< @;
< #4
< @,
< #5
< @,
< #6
< @:
< $b
< @:=
< #20
< end
< @;
< case
< $a
< of
< #1
< @,
< #2
< @,
< #3
< @:
< $b
< @:=
< #10
< @;
< #4
< @,
< #5
< @,
< #6
< @:
< $b
< @:=
< #20
< @;
< end
< @;
< $a
< @:=
< $a
< @.
< $b
< @.
< $c
< @.
< $d
< @;
< $a
< @:=
< $a
< @.
< $b
< @.
< $c
< @.
< $d
< @^
< @;
< $a
< @:=
< $a
< @;
< $b
< @:=
< $a
< @(
< #10
< @,
< $a
< @+
< $c
< @,
< 'this is a test'
< @)
< @;
< $a
< @:=
< $b
< @[
< #1
< @]
< @;
< $a
< @:=
< $b
< @[
< #1
< @,
< #2
< @,
< #3
< @,
< #4
< @,
< #5
< @]
< @;
< end
< @.
---
>     end;
>   until (a <= 100) or (b > 20) or (g = 12);
> 
>   A := 10;
>   B := 20;
>   C := A * B;
>   (* C := nil; *)
>   A := A + 10 * B - C;
>   A := - A + 10 * B - C;
> 
>   A := 0;
>   B := 2;
>   REPEAT
>     A := A + 1;
>     B := B * 2;
>   UNTIL A = 10;
> 
>   FOR A := (10 + 20) TO (100 - 10) DO
>     BEGIN
>     B := B + 1;
>     C := C + 2;
>     END;
>   
>   FOR A := (10 + 20) DOWNTO (100 - 10) DO
>     BEGIN
>     B := B + 1;
>     C := C + 2;
>     END;
>  
>   CASE A OF
>     1,2,3: B := 10;
>     4,5,6: B := 20
>   END;
> 
>   CASE A OF
>     1,2,3: B := 10;
>     4,5,6: B := 20;
>   END;
> 
>   A := A.B.C.D;
>   A := A.B.C.D^;
>   A := A;
> 
>   B := A( 10, A + C, 'this is a test' );
> 
>   A := B[1];
>   A := B[1,2,3,4,5];
>  
> end.
> '


testobject.token:
2,3c2,3
< $testobject
< @;
---
> $testobject;
> 
6,7c6
< @=
< abstract
---
> $= abstract
12,13c11
< @(
< $self
---
> $(elf
15,19c13,16
< $anyobject
< @)
< @;
< end
< @;
---
> $anyobject);
> 
> $end;
> 
21,25c18,20
< @=
< #1
< @..
< #12
< @;
---
> $= 1
> $.. 12;
> 
27,31c22,24
< @=
< #1
< @..
< #31
< @;
---
> $= 1
> $.. 31;
> 
33,34c26
< @=
< $anyobject
---
> $= anyobject
38,39c30,31
< $month
< @;
---
> $month;
> 
42,43c34,35
< $dayofmonth
< @;
---
> $dayofmonth;
> 
46,47c38,39
< $integer
< @;
---
> $integer;
> 
51,52c43
< @(
< $self
---
> $(elf
54,55c45
< $date
< @)
---
> $date)
58,60c48,49
< @=
< $datedayofyear
< @;
---
> $= datedayofyear;
> 
63,64c52
< @(
< $self
---
> $(elf
66,70c54,56
< $date
< @)
< @=
< $dateincrement
< @;
---
> $date)
> $= dateincrement;
> 
73,76c59,60
< @(
< $self
< @,
< $other
---
> $(elf
> $, other
78,79c62
< $date
< @)
---
> $date)
82,84c65,66
< @=
< $dateequalsdate
< @;
---
> $= dateequalsdate;
> 
87,91c69,71
< @=
< $dateprint
< @;
< end
< @;
---
> $= dateprint;
> 
> $end;
95,96c75,76
< $date
< @;
---
> $date;
> 
99,100c79,80
< $anyobject
< @;
---
> $anyobject;
> 
103,104c83,84
< $root
< @;
---
> $root;
> 
107,546c87
< @(
< $self
< @:
< $date
< @)
< @;
< begin
< $writeln
< @(
< 'Entered datePrint'
< @)
< @;
< $write
< @(
< $self
< @.
< $m
< @)
< @;
< $write
< @(
< '-'
< @)
< @;
< $write
< @(
< $self
< @.
< $d
< @)
< @;
< $write
< @(
< '-'
< @)
< @;
< $write
< @(
< $self
< @.
< $y
< @)
< @;
< end
< @;
< function
< $mkdate
< @(
< $m
< @:
< $month
< @;
< $d
< @:
< $dayofmonth
< @;
< $y
< @:
< $integer
< @)
< @:
< $date
< @;
< var
< $ret
< @:
< $date
< @;
< begin
< $writeln
< @(
< 'Entered mkDate'
< @)
< @;
< $ret
< @:=
< $new
< @(
< $date
< @)
< @;
< $ret
< @.
< $m
< @:=
< $m
< @;
< $ret
< @.
< $d
< @:=
< $d
< @;
< $ret
< @.
< $y
< @:=
< $y
< @;
< $mkdate
< @:=
< $ret
< @;
< end
< @;
< function
< $isleapyear
< @(
< $y
< @:
< $integer
< @)
< @:
< $boolean
< @;
< var
< $remainder
< @:
< $integer
< @;
< $ret
< @:
< $boolean
< @;
< begin
< $writeln
< @(
< 'Entered isLeapYear'
< @)
< @;
< $remainder
< @:=
< $y
< mod
< #4
< @;
< if
< $remainder
< @<>
< #0
< then
< $ret
< @:=
< $false
< else
< begin
< $remainder
< @:=
< $y
< mod
< #400
< @;
< if
< #0
< @=
< $remainder
< then
< $ret
< @:=
< $true
< else
< begin
< $remainder
< @:=
< $y
< mod
< #100
< @;
< if
< #0
< @=
< $remainder
< then
< $ret
< @:=
< $false
< else
< $ret
< @:=
< $true
< end
< end
< @;
< $isleapyear
< @:=
< $ret
< end
< @;
< function
< $daysinmonth
< @(
< $m
< @:
< $month
< @;
< $y
< @:
< $integer
< @)
< @:
< $dayofmonth
< @;
< var
< $ret
< @:
< $integer
< @;
< begin
< $writeln
< @(
< 'Entered daysInMonth'
< @)
< @;
< case
< $m
< of
< #9
< @,
< #4
< @,
< #6
< @,
< #11
< @:
< $ret
< @:=
< #30
< @;
< #2
< @:
< if
< $isleapyear
< @(
< $y
< @)
< then
< $ret
< @:=
< #29
< else
< $ret
< @:=
< #28
< @;
< #1
< @,
< #3
< @,
< #5
< @,
< #7
< @,
< #8
< @,
< #10
< @,
< #12
< @:
< $ret
< @:=
< #31
< end
< @;
< $daysinmonth
< @:=
< $ret
< end
< @;
< function
< $datedayofyear
< @(
< $self
< @:
< $date
< @)
< @:
< $integer
< @;
< var
< $m
< @,
< $ret
< @:
< $integer
< @;
< begin
< $writeln
< @(
< 'Entered dateDayOfYear'
< @)
< @;
< $m
< @:=
< $self
< @.
< $m
< @-
< #1
< @;
< $ret
< @:=
< $self
< @.
< $d
< @;
< for
< $m
< @:=
< $m
< downto
< #1
< do
< $ret
< @:=
< $ret
< @+
< $daysinmonth
< @(
< $self
< @.
< $m
< @,
< $self
< @.
< $y
< @)
< @;
< $datedayofyear
< @:=
< $ret
< end
< @;
< procedure
< $dateincrement
< @(
< $self
< @:
< $date
< @)
< @;
< var
< $dim
< @:
< $dayofmonth
< @;
< begin
< $writeln
< @(
< 'Entered dateIncrement'
< @)
< @;
< $dim
< @:=
< $daysinmonth
< @(
< $self
< @.
< $m
< @,
< $self
< @.
< $y
< @)
< @;
< if
< $self
< @.
< $d
< @=
< $dim
< then
< begin
< $self
< @.
< $d
< @:=
< #1
< @;
< if
< $self
< @.
< $m
< @=
< #12
< then
< begin
< $self
< @.
< $y
< @:=
< $self
< @.
< $y
< @+
< #1
< @;
< $self
< @.
< $m
< @:=
< #1
< end
< else
< $self
< @.
< $m
< @:=
< $self
< @.
< $m
< @+
< #1
< @;
< end
< else
< $self
< @.
< $d
< @:=
< $self
< @.
< $d
< @+
< #1
< end
< @;
< function
< $dateequalsdate
< @(
< $self
< @,
< $other
< @:
< $date
< @)
< @:
< $boolean
< @;
< var
< $ret
---
> $(elf
548,603c89,90
< $boolean
< @;
< begin
< $writeln
< @(
< 'Entered dateEqualsDate'
< @)
< @;
< if
< $self
< @.
< $y
< @=
< $other
< @.
< $y
< then
< if
< $self
< @.
< $m
< @=
< $other
< @.
< $m
< then
< if
< $self
< @.
< $d
< @=
< $other
< @.
< $d
< then
< $ret
< @:=
< $true
< else
< $ret
< @:=
< $false
< else
< $ret
< @:=
< $false
< else
< $ret
< @:=
< $false
< @;
< $dateequalsdate
< @:=
< $ret
< end
< @;
---
> $date);
> 
605,946d91
< $d
< @:=
< $mkdate
< @(
< #2
< @,
< #9
< @,
< #1985
< @)
< @;
< $d
< @.
< $increment
< @;
< $d
< @.
< $y
< @:=
< $d
< @.
< $y
< @+
< #10
< @;
< $d
< @.
< $print
< @;
< $writeln
< @;
< $writeln
< @(
< $d
< @.
< $dayofyear
< @)
< @;
< $writeln
< @(
< $d
< @.
< $equalsdate
< @(
< $mkdate
< @(
< #2
< @,
< #10
< @,
< #1995
< @)
< @)
< @)
< @;
< $a
< @:=
< $d
< @;
< $d
< @:=
< $narrow
< @(
< $a
< @,
< $date
< @)
< @;
< $write
< @(
< 'ISTYPE '
< @,
< #1
< @)
< @;
< if
< $istype
< @(
< $d
< @,
< $root
< @)
< then
< $writeln
< @(
< ' ok'
< @)
< else
< $writeln
< @(
< ' bad'
< @)
< @;
< $write
< @(
< 'ISTYPE '
< @,
< #2
< @)
< @;
< if
< $istype
< @(
< $d
< @,
< $date
< @)
< then
< $writeln
< @(
< ' ok'
< @)
< else
< $writeln
< @(
< ' bad'
< @)
< @;
< $write
< @(
< 'ISTYPE '
< @,
< #3
< @)
< @;
< if
< $istype
< @(
< $d
< @,
< $anyobject
< @)
< then
< $writeln
< @(
< ' ok'
< @)
< else
< $writeln
< @(
< ' bad'
< @)
< @;
< $write
< @(
< 'ISTYPE '
< @,
< #4
< @)
< @;
< if
< $istype
< @(
< nil
< @,
< $root
< @)
< then
< $writeln
< @(
< ' ok'
< @)
< else
< $writeln
< @(
< ' bad'
< @)
< @;
< $write
< @(
< 'ISTYPE '
< @,
< #5
< @)
< @;
< if
< $istype
< @(
< nil
< @,
< $date
< @)
< then
< $writeln
< @(
< ' ok'
< @)
< else
< $writeln
< @(
< ' bad'
< @)
< @;
< $write
< @(
< 'ISTYPE '
< @,
< #6
< @)
< @;
< if
< $istype
< @(
< nil
< @,
< $anyobject
< @)
< then
< $writeln
< @(
< ' ok'
< @)
< else
< $writeln
< @(
< ' bad'
< @)
< @;
< $a
< @:=
< $narrow
< @(
< nil
< @,
< $anyobject
< @)
< @;
< $writeln
< @(
< 'should get here: NARROW(NIL, AnyObject)'
< @)
< @;
< $a
< @:=
< $narrow
< @(
< nil
< @,
< $date
< @)
< @;
< $writeln
< @(
< 'should get here: NARROW(NIL, Date)'
< @)
< @;
< $r
< @:=
< $new
< @(
< $root
< @)
< @;
< $write
< @(
< 'ISTYPE '
< @,
< #7
< @)
< @;
< if
< $istype
< @(
< $r
< @,
< $root
< @)
< then
< $writeln
< @(
< ' ok'
< @)
< else
< $writeln
< @(
< ' bad'
< @)
< @;
< $write
< @(
< 'ISTYPE '
< @,
< #8
< @)
< @;
< if
< $istype
< @(
< $r
< @,
< $date
< @)
< then
< $writeln
< @(
< ' bad'
< @)
< else
< $writeln
< @(
< ' ok'
< @)
< @;
< $write
< @(
< 'ISTYPE '
< @,
< #9
< @)
< @;
< if
< $istype
< @(
< $r
< @,
< $anyobject
< @)
< then
< $writeln
< @(
< ' bad'
< @)
< else
< $writeln
< @(
< ' ok'
< @)
< @;
< $writeln
< @(
< 'got here, now should fail at NARROW(r, Date)'
< @)
< @;
< $d
< @:=
< $narrow
< @(
< $r
< @,
< $date
< @)
< @;
948,953c93,259
< @(
< 'should not get here'
< @)
< @;
< end
< @.
---
> $(entered
> 'dateprint');
>     write(self.m);
>     write('-');
>     write(self.d);
>     write('-');
>     write(self.y);
> END;
> 
> FUNCTION mkDate (m: Month; d: DayOfMonth; y: INTEGER): Date;
>     VAR
>         ret: Date;
>     BEGIN
>     writeln('Entered mkDate');
>     
>     ret := NEW(Date);
>     ret.m := m;
>     ret.d := d;
>     ret.y := y;
> 
>     mkDate := ret;
> END;
> 
> FUNCTION isLeapYear (y: INTEGER): BOOLEAN;
>     VAR
>         remainder: INTEGER;
>         ret: BOOLEAN;
>     BEGIN
>     writeln('Entered isLeapYear');
> 
>     remainder := y MOD 4;
>     IF remainder <> 0 THEN
>         ret := false
>     ELSE BEGIN
>         remainder := y MOD 400;
>         IF 0 = remainder THEN
>             ret := true
>         ELSE BEGIN
>             remainder := y MOD 100;
>             IF 0 = remainder THEN
>                 ret := false
>             ELSE
>                 ret := true
>         END
>     END;
> 
>     isLeapYear := ret
> END;
> 
> FUNCTION daysInMonth (m: Month; y: INTEGER): DayOfMonth;
>     VAR
>         ret: INTEGER;
>     BEGIN
>     writeln('Entered daysInMonth');
> 
>     CASE m OF
>         { Thirty days hath September... }
>         9, 4, 6, 11:
>             ret := 30;
>         2:
>             IF isLeapYear(y) THEN
>                 ret := 29
>             ELSE
>                 ret := 28;
>         1, 3, 5, 7, 8, 10, 12:
>             ret := 31
>     END;
>     daysInMonth := ret
> END;
> 
> FUNCTION dateDayOfYear (self: Date): INTEGER;
>     VAR
>         m, ret: INTEGER;
>     BEGIN
>     writeln('Entered dateDayOfYear');
> 
>     m := self.m - 1;
>     ret := self.d;
> 
>     FOR m := m DOWNTO 1 DO
>         ret := ret + daysInMonth(self.m, self.y);
> 
>     dateDayOfYear := ret
> END;
> 
> PROCEDURE dateIncrement (self: Date);
>     VAR
>         dim: DayOfMonth;
>     BEGIN
>     writeln('Entered dateIncrement');
> 
>     dim := daysInMonth(self.m, self.y);
>     IF self.d = dim THEN BEGIN
>         self.d := 1;
>         IF self.m = 12 THEN BEGIN
>             { New Years Eve... }
>             self.y := self.y + 1;
>             self.m := 1
>             END
>         ELSE
>             self.m := self.m + 1;
>         END
>     ELSE
>         self.d := self.d + 1
> END;
> 
> FUNCTION dateEqualsDate (self, other: Date): BOOLEAN;
>     VAR
>         ret: BOOLEAN;
>     BEGIN
>     writeln('Entered dateEqualsDate');
>     
>     IF self.y = other.y THEN
>         IF self.m = other.m THEN
>             IF self.d = other.d THEN
>                 ret := true
>             ELSE
>                 ret := false
>         ELSE
>             ret := false
>     ELSE
>         ret := false;
>     dateEqualsDate := ret
> END;
> 
> BEGIN
>     d := mkDate(2, 9, 1985);
>     d.increment;
>     d.y := d.y + 10;
>     d.print;
>     writeln;
>     writeln(d.dayOfYear);
>     writeln(d.equalsDate(mkDate(2, 10, 1995)));
>     a := d;
>     d := NARROW(a, Date);
>     write('ISTYPE ', 1);
>     IF ISTYPE(d  , Root     ) THEN writeln(' ok') ELSE writeln(' bad');
>     write('ISTYPE ', 2);
>     IF ISTYPE(d  , Date     ) THEN writeln(' ok') ELSE writeln(' bad');
>     write('ISTYPE ', 3);
>     IF ISTYPE(d  , AnyObject) THEN writeln(' ok') ELSE writeln(' bad');
> 
> 
>     write('ISTYPE ', 4);
>     IF ISTYPE(NIL, ROOT     ) THEN writeln(' ok') ELSE writeln(' bad');
>     write('ISTYPE ', 5);
>     IF ISTYPE(NIL, Date     ) THEN writeln(' ok') ELSE writeln(' bad');
>     write('ISTYPE ', 6);
>     IF ISTYPE(NIL, AnyObject) THEN writeln(' ok') ELSE writeln(' bad');
> 
>     a := NARROW(NIL, AnyObject);
>     writeln('should get here: NARROW(NIL, AnyObject)');
>     a := NARROW(NIL, Date);
>     writeln('should get here: NARROW(NIL, Date)');
>     r := NEW(ROOT);
> 
>     write('ISTYPE ', 7);
>     IF ISTYPE(r, ROOT     ) THEN writeln(' ok')  ELSE writeln(' bad');
>     write('ISTYPE ', 8);
>     IF ISTYPE(r, Date     ) THEN writeln(' bad') ELSE writeln(' ok');
>     write('ISTYPE ', 9);
>     IF ISTYPE(r, AnyObject) THEN writeln(' bad') ELSE writeln(' ok');
>     writeln('got here, now should fail at NARROW(r, Date)');
>     d := NARROW(r, Date);
>     writeln('should not get here');
> END.
> '


testobject2.err:
0a1,10
> Exception occurred:
> java.lang.IllegalStateException: Operator was not found in the operator table: (bject3);
> end.
> 	at MPC.TokenOp.get(TokenOp.java:89)
> 	at MPC.MPCScanner.next_token(MPCScanner.java:505)
> 	at java_cup.runtime.lr_parser.scan(lr_parser.java:349)
> 	at java_cup.runtime.lr_parser.parse(lr_parser.java:578)
> 	at MPC.Parse.perform(Parse.java:45)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testobject2.token:
2,3c2,3
< $testobject2
< @;
---
> $testobject2;
> 
6,8c6,7
< @=
< object
< @;
---
> $= object;
> 
10,11c9
< @=
< object
---
> $= object
14,18c12,14
< $integer
< @;
< methods
< end
< @;
---
> $integer; methods
> $end;
> 
20,21c16
< @=
< object
---
> $= object
24,26c19
< $integer
< @;
< overrides
---
> $integer; overrides
28,31c21,22
< @=
< $obj3print
< end
< @;
---
> $= obj3print
> $end;
35,36c26,27
< $object1
< @;
---
> $object1;
> 
39,40c30,31
< $object2
< @;
---
> $object2;
> 
43,44c34
< $object3
< @;
---
> $object3;
47,52c37,39
< @:=
< $new
< @(
< $object1
< @)
< @;
---
> $:= new
> $(bject1);
> 
54,59c41,43
< @:=
< $new
< @(
< $object2
< @)
< @;
---
> $:= new
> $(bject2);
> 
61,70c45
< @:=
< $new
< @(
< $object3
< @)
< @;
< end
< @.
< EOF
< EOF
---
> $:= new


testobject3.err:
0a1,9
> Exception occurred:
> java.lang.IllegalStateException: Operator was not found in the operator table: (elf.
> 	at MPC.TokenOp.get(TokenOp.java:89)
> 	at MPC.MPCScanner.next_token(MPCScanner.java:505)
> 	at java_cup.runtime.lr_parser.scan(lr_parser.java:349)
> 	at java_cup.runtime.lr_parser.parse(lr_parser.java:578)
> 	at MPC.Parse.perform(Parse.java:45)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testobject3.token:
2,3c2,3
< $testobject3
< @;
---
> $testobject3;
> 
6,7c6
< @=
< $integer
---
> $= integer
12,13c11
< @(
< $self
---
> $(elf
15,17c13
< $object1
< @;
< $x
---
> $object1; x
19,23c15,16
< $integer
< @)
< @;
< end
< @;
---
> $integer); end;
> 
25,26c18
< @=
< $object3
---
> $= object3
30,33c22,24
< @=
< $object2method
< end
< @;
---
> $= object2method
> $end;
> 
35,36c26
< @=
< object
---
> $= object
43,44c33
< @(
< $self
---
> $(elf
46,52c35,39
< $object3
< @)
< @=
< $object3method
< @;
< end
< @;
---
> $object3)
> $= object3method;
> 
> $end;
> 
54,55c41
< @=
< object
---
> $= object
58,59c44,45
< $integer
< @;
---
> $integer;
> 
63,64c49
< @(
< $self
---
> $(elf
66,68c51
< $object4
< @;
< $x
---
> $object4; x
70,71c53
< $integer
< @)
---
> $integer)
73,76c55,58
< $object4
< @;
< end
< @;
---
> $object4;
> 
> $end;
> 
78,79c60
< @=
< $object4
---
> $= object4
83,86c64,66
< @=
< $object5multiply
< end
< @;
---
> $= object5multiply
> $end;
> 
88,89c68
< @=
< $object4
---
> $= object4
94,97c73,75
< @=
< $object6multiply
< end
< @;
---
> $= object6multiply
> $end;
> 
99,100c77
< @=
< $object6
---
> $= object6
105,106c82
< @(
< $self
---
> $(elf
108,110c84
< $object7
< @;
< var
---
> $object7; var
113,114c87
< $integer
< @)
---
> $integer)
117,121c90,92
< @=
< $object7add
< @;
< end
< @;
---
> $= object7add;
> 
> $end;
125,126c96,97
< $object1
< @;
---
> $object1;
> 
129,130c100,101
< $object2
< @;
---
> $object2;
> 
133,134c104,105
< $object3
< @;
---
> $object3;
> 
137,138c108,109
< $object4
< @;
---
> $object4;
> 
141,142c112,113
< $object5
< @;
---
> $object5;
> 
145,146c116,117
< $object6
< @;
---
> $object6;
> 
149,150c120,121
< $object7
< @;
---
> $object7;
> 
153,263c124
< @(
< $self
< @:
< $object2
< @)
< @;
< begin
< $writeln
< @(
< $self
< @.
< $x
< @)
< @;
< end
< @;
< function
< $object3method
< @(
< $x
< @:
< $integer
< @)
< @:
< $integer
< @;
< begin
< $object3method
< @:=
< #2
< @*
< $x
< @;
< end
< @;
< function
< $object5multiply
< @(
< $self
< @:
< $object5
< @;
< $x
< @:
< $integer
< @)
< @:
< $integer
< @;
< begin
< $object5multiply
< @:=
< $self
< @.
< $x
< @*
< $x
< @;
< end
< @;
< function
< $object6multiply
< @(
< $self
< @:
< $object7
< @;
< $x
< @:
< $integer
< @)
< @:
< $object6
< @;
< var
< $obj
< @:
< $object6
< @;
< begin
< $obj
< @:=
< $new
< @(
< $object7
< @)
< @;
< $obj
< @.
< $x
< @:=
< $self
< @.
< $x
< @*
< $x
< @;
< $object6multiply
< @:=
< $obj
< @;
< end
< @;
< function
< $object7add
< @(
< $self
< @:
< $object7
< @;
< $x
---
> $(elf
265,297c126,127
< $integer
< @)
< @:
< $object7
< @;
< var
< $obj
< @:
< $object7
< @;
< begin
< $obj
< @:=
< $new
< @(
< $object7
< @)
< @;
< $obj
< @.
< $x
< @:=
< $self
< @.
< $x
< @+
< $x
< @;
< $object7add
< @:=
< $obj
< end
< @;
---
> $object2);
> 
299,365d128
< $o4
< @:=
< $new
< @(
< $object4
< @)
< @;
< $writeln
< @(
< $o4
< @^
< @.
< $x
< @)
< @;
< $o6
< @:=
< $new
< @(
< $object6
< @)
< @;
< $new
< @(
< $o6
< @)
< @;
< $o6
< @:=
< $o4
< @;
< $o4
< @:=
< $o6
< @;
< $o4
< @:=
< $o4
< @;
< if
< $istype
< @(
< $o4
< @)
< then
< $writeln
< @;
< if
< $istype
< @(
< $o4
< @,
< $object4
< @,
< #3
< @)
< then
< $writeln
< @;
< if
< $istype
< @(
< $o4
< @,
< $integer
< @)
< then
367,459d129
< @;
< if
< $istype
< @(
< $o4
< @,
< $object4
< @)
< then
< $writeln
< @;
< if
< $istype
< @(
< #35
< @,
< $object4
< @)
< then
< $writeln
< @;
< if
< $istype
< @(
< nil
< @,
< $object4
< @)
< then
< $writeln
< @;
< $o4
< @:=
< $narrow
< @(
< $o4
< @)
< @;
< $o4
< @:=
< $narrow
< @(
< $o4
< @,
< $object4
< @,
< #3
< @)
< @;
< $o4
< @:=
< $narrow
< @(
< $o4
< @,
< $integer
< @)
< @;
< $o4
< @:=
< $narrow
< @(
< $o4
< @,
< $object4
< @)
< @;
< $o4
< @:=
< $narrow
< @(
< #35
< @,
< $object4
< @)
< @;
< $o4
< @:=
< $narrow
< @(
< nil
< @,
< $object4
< @)
< @;
< $o4
< @:=
< nil
< @;
< end
< @.
< EOF
< EOF


testobject4.err:
0a1,9
> Exception occurred:
> java.lang.IllegalStateException: Operator was not found in the operator table: (elf.
> 	at MPC.TokenOp.get(TokenOp.java:89)
> 	at MPC.MPCScanner.next_token(MPCScanner.java:505)
> 	at java_cup.runtime.lr_parser.scan(lr_parser.java:349)
> 	at java_cup.runtime.lr_parser.parse(lr_parser.java:578)
> 	at MPC.Parse.perform(Parse.java:45)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testobject4.token:
2,3c2,3
< $testobject4
< @;
---
> $testobject4;
> 
6,7c6
< @=
< abstract
---
> $= abstract
12,13c11
< @(
< $self
---
> $(elf
15,17c13
< $hasequals
< @;
< $other
---
> $hasequals; other
19,20c15
< $root
< @)
---
> $root)
22,25c17,20
< $boolean
< @;
< end
< @;
---
> $boolean;
> 
> $end;
> 
27,28c22
< @=
< abstract
---
> $= abstract
33,34c27
< @(
< $self
---
> $(elf
36,37c29
< $iterator
< @)
---
> $iterator)
39,40c31,32
< $root
< @;
---
> $root;
> 
43,44c35
< @(
< $self
---
> $(elf
46,47c37
< $iterator
< @)
---
> $iterator)
49,50c39,40
< $boolean
< @;
---
> $boolean;
> 
53,54c43
< @(
< $self
---
> $(elf
56,60c45,48
< $iterator
< @)
< @;
< end
< @;
---
> $iterator);
> 
> $end;
> 
62,63c50
< @=
< abstract
---
> $= abstract
68,69c55
< @(
< $self
---
> $(elf
71,72c57
< $iterable
< @)
---
> $iterable)
74,77c59,62
< $iterator
< @;
< end
< @;
---
> $iterator;
> 
> $end;
> 
79,80c64
< @=
< $iterable
---
> $= iterable
84c68
< function
---
> $(* *function
86,87c70
< @(
< $self
---
> $(elf
89,90c72
< $collection
< @)
---
> $collection)
92,93c74,75
< $integer
< @;
---
> $integer;
> 
96,97c78
< @(
< $self
---
> $(elf
99,100c80
< $collection
< @)
---
> $collection)
102,104c82,84
< $boolean
< @;
< function
---
> $boolean;
> 
> $(* *function
106,107c86
< @(
< $self
---
> $(elf
109,111c88
< $collection
< @;
< $o
---
> $collection; o
113,114c90
< $hasequals
< @)
---
> $hasequals)
116,117c92,93
< $boolean
< @;
---
> $boolean;
> 
120,121c96
< @(
< $self
---
> $(elf
123,125c98
< $collection
< @;
< $o
---
> $collection; o
127,128c100
< $hasequals
< @)
---
> $hasequals)
130,131c102,103
< $boolean
< @;
---
> $boolean;
> 
134,135c106
< @(
< $self
---
> $(elf
137,139c108
< $collection
< @;
< $o
---
> $collection; o
141,142c110
< $hasequals
< @)
---
> $hasequals)
144,146c112,114
< $boolean
< @;
< procedure
---
> $boolean;
> 
> $(* *procedure
148,149c116
< @(
< $self
---
> $(elf
151,153c118,119
< $collection
< @)
< @;
---
> $collection);
> 
156,159c122,123
< @(
< $self
< @,
< $other
---
> $(elf
> $, other
161,162c125
< $collection
< @)
---
> $collection)
164,165c127,128
< $boolean
< @;
---
> $boolean;
> 
168,171c131,132
< @(
< $self
< @,
< $other
---
> $(elf
> $, other
173,174c134
< $collection
< @)
---
> $collection)
176,177c136,137
< $boolean
< @;
---
> $boolean;
> 
180,183c140,141
< @(
< $self
< @,
< $other
---
> $(elf
> $, other
185,186c143
< $collection
< @)
---
> $collection)
188,189c145,146
< $boolean
< @;
---
> $boolean;
> 
192,195c149,150
< @(
< $self
< @,
< $other
---
> $(elf
> $, other
197,198c152
< $collection
< @)
---
> $collection)
200,201c154,155
< $boolean
< @;
---
> $boolean;
> 
204,207c158,159
< @(
< $self
< @,
< $other
---
> $(elf
> $, other
209,210c161
< $collection
< @)
---
> $collection)
212,215c163,166
< $boolean
< @;
< end
< @;
---
> $boolean;
> 
> $end;
> 
218,219c169
< @=
< $collection
---
> $= collection
224,226c174,175
< @=
< $acisempty
< @;
---
> $= acisempty;
> 
228,230c177,178
< @=
< $accontains
< @;
---
> $= accontains;
> 
232,234c180,181
< @=
< $acclear
< @;
---
> $= acclear;
> 
236,238c183,184
< @=
< $acaddall
< @;
---
> $= acaddall;
> 
240,242c186,187
< @=
< $accontainsall
< @;
---
> $= accontainsall;
> 
244,246c189,190
< @=
< $acremoveall
< @;
---
> $= acremoveall;
> 
248,252c192,195
< @=
< $acretainall
< @;
< end
< @;
---
> $= acretainall;
> 
> $end;
> 
255,256c198
< @(
< $self
---
> $(elf
258,259c200
< $abscoll
< @)
---
> $abscoll)
261,262c202
< $boolean
< @;
---
> $boolean;
265,4618c205
< @:=
< @(
< $self
< @.
< $size
< @=
< #0
< @)
< @;
< end
< @;
< function
< $accontains
< @(
< $self
< @:
< $abscoll
< @;
< $item
< @:
< $hasequals
< @)
< @:
< $boolean
< @;
< var
< $it
< @:
< $iterator
< @;
< $searching
< @:
< $boolean
< @;
< begin
< $accontains
< @:=
< $false
< @;
< $searching
< @:=
< $true
< @;
< $it
< @:=
< $self
< @.
< $getiterator
< @;
< while
< $searching
< do
< begin
< if
< $it
< @.
< $hasnext
< then
< begin
< if
< $narrow
< @(
< $it
< @.
< $next
< @,
< $hasequals
< @)
< @.
< $equals
< @(
< $item
< @)
< then
< begin
< $accontains
< @:=
< $true
< @;
< $searching
< @:=
< $false
< @;
< end
< @;
< end
< else
< begin
< $searching
< @:=
< $false
< @;
< end
< @;
< end
< @;
< end
< @;
< procedure
< $acclear
< @(
< $self
< @:
< $abscoll
< @)
< @;
< var
< $it
< @:
< $iterator
< @;
< $o
< @:
< $root
< @;
< begin
< $it
< @:=
< $self
< @.
< $getiterator
< @;
< while
< $it
< @.
< $hasnext
< do
< begin
< $o
< @:=
< $it
< @.
< $next
< @;
< $it
< @.
< $remove
< @;
< end
< @;
< end
< @;
< function
< $acaddall
< @(
< $self
< @:
< $abscoll
< @;
< $other
< @:
< $collection
< @)
< @:
< $boolean
< @;
< var
< $it
< @:
< $iterator
< @;
< begin
< $it
< @:=
< $other
< @.
< $getiterator
< @;
< $acaddall
< @:=
< $false
< @;
< while
< $it
< @.
< $hasnext
< do
< begin
< if
< $self
< @.
< $add
< @(
< $narrow
< @(
< $it
< @.
< $next
< @,
< $hasequals
< @)
< @)
< then
< begin
< $acaddall
< @:=
< $true
< @;
< end
< @;
< end
< @;
< end
< @;
< function
< $accontainsall
< @(
< $self
< @:
< $abscoll
< @;
< $other
< @:
< $collection
< @)
< @:
< $boolean
< @;
< var
< $it
< @:
< $iterator
< @;
< $searching
< @:
< $boolean
< @;
< begin
< $accontainsall
< @:=
< $true
< @;
< $searching
< @:=
< $true
< @;
< $it
< @:=
< $other
< @.
< $getiterator
< @;
< while
< $searching
< do
< begin
< if
< $it
< @.
< $hasnext
< then
< begin
< if
< not
< $self
< @.
< $contains
< @(
< $narrow
< @(
< $it
< @.
< $next
< @,
< $hasequals
< @)
< @)
< then
< begin
< $accontainsall
< @:=
< $false
< @;
< $searching
< @:=
< $false
< @;
< end
< @;
< end
< @;
< end
< @;
< end
< @;
< function
< $acremoveall
< @(
< $self
< @:
< $abscoll
< @;
< $other
< @:
< $collection
< @)
< @:
< $boolean
< @;
< var
< $it
< @:
< $iterator
< @;
< begin
< $it
< @:=
< $other
< @.
< $getiterator
< @;
< $acremoveall
< @:=
< $false
< @;
< while
< $it
< @.
< $hasnext
< do
< begin
< if
< $self
< @.
< $remove
< @(
< $narrow
< @(
< $it
< @.
< $next
< @,
< $hasequals
< @)
< @)
< then
< begin
< $acremoveall
< @:=
< $true
< @;
< end
< @;
< end
< @;
< end
< @;
< function
< $acretainall
< @(
< $self
< @:
< $abscoll
< @;
< $other
< @:
< $collection
< @)
< @:
< $boolean
< @;
< var
< $it
< @:
< $iterator
< @;
< begin
< $it
< @:=
< $self
< @.
< $getiterator
< @;
< $acretainall
< @:=
< $false
< @;
< while
< $it
< @.
< $hasnext
< do
< begin
< if
< not
< $other
< @.
< $contains
< @(
< $narrow
< @(
< $it
< @.
< $next
< @,
< $hasequals
< @)
< @)
< then
< begin
< $it
< @.
< $remove
< @;
< $acretainall
< @:=
< $true
< @;
< end
< @;
< end
< @;
< end
< @;
< type
< $listiterator
< @=
< $iterator
< abstract
< object
< methods
< procedure
< $add
< @(
< $self
< @:
< $listiterator
< @;
< $o
< @:
< $root
< @)
< @;
< procedure
< $set
< @(
< $self
< @:
< $listiterator
< @;
< $o
< @:
< $root
< @)
< @;
< function
< $nextindex
< @(
< $self
< @:
< $listiterator
< @)
< @:
< $integer
< @;
< function
< $hasprevious
< @(
< $self
< @:
< $listiterator
< @)
< @:
< $boolean
< @;
< function
< $previous
< @(
< $self
< @:
< $listiterator
< @)
< @:
< $root
< @;
< function
< $previousindex
< @(
< $self
< @:
< $listiterator
< @)
< @:
< $integer
< @;
< end
< @;
< $abslist
< @=
< $abscoll
< abstract
< object
< methods
< function
< $addith
< @(
< $self
< @:
< $abslist
< @;
< $index
< @:
< $integer
< @;
< $o
< @:
< $hasequals
< @)
< @:
< $boolean
< @;
< function
< $getith
< @(
< $self
< @:
< $abslist
< @;
< $index
< @:
< $integer
< @)
< @:
< $hasequals
< @;
< function
< $removeith
< @(
< $self
< @:
< $abslist
< @;
< $index
< @:
< $integer
< @)
< @:
< $boolean
< @;
< function
< $setith
< @(
< $self
< @:
< $abslist
< @;
< $index
< @:
< $integer
< @;
< $o
< @:
< $hasequals
< @)
< @:
< $hasequals
< @;
< function
< $indexof
< @(
< $self
< @:
< $abslist
< @;
< $o
< @:
< $hasequals
< @)
< @:
< $integer
< @=
< $alindexof
< @;
< function
< $lastindexof
< @(
< $self
< @:
< $abslist
< @;
< $o
< @:
< $hasequals
< @)
< @:
< $integer
< @=
< $allastindexof
< @;
< function
< $getlistiterator
< @(
< $self
< @:
< $abslist
< @)
< @:
< $listiterator
< @=
< $algetlistiterator
< @;
< function
< $getlistiteratorith
< @(
< $self
< @:
< $abslist
< @;
< $index
< @:
< $integer
< @)
< @:
< $listiterator
< @=
< $algetlistiteratorith
< @;
< function
< $removerange
< @(
< $self
< @:
< $abslist
< @;
< $fromindex
< @,
< $toindex
< @:
< $integer
< @)
< @:
< $boolean
< @=
< $alremoverange
< @;
< function
< $addallith
< @(
< $self
< @:
< $abslist
< @;
< $index
< @:
< $integer
< @;
< $other
< @:
< $collection
< @)
< @:
< $boolean
< @=
< $aladdallith
< @;
< overrides
< $add
< @=
< $aladd
< @;
< $clear
< @=
< $alclear
< @;
< $equals
< @=
< $alequals
< @;
< $getiterator
< @=
< $algetiterator
< @;
< end
< @;
< $alitr
< @=
< $iterator
< object
< $cursor
< @:
< $integer
< @;
< $lastret
< @:
< $integer
< @;
< $thelist
< @:
< $abslist
< @;
< methods
< function
< $init
< @(
< $self
< @:
< $alitr
< @;
< $lst
< @:
< $abslist
< @)
< @:
< $alitr
< @=
< $aliinit
< @;
< overrides
< $hasnext
< @=
< $alihasnext
< @;
< $next
< @=
< $alinext
< @;
< $remove
< @=
< $aliremove
< @;
< end
< @;
< $allstitr
< @=
< $listiterator
< object
< $cursor
< @:
< $integer
< @;
< $lastret
< @:
< $integer
< @;
< $thelist
< @:
< $abslist
< @;
< methods
< function
< $init
< @(
< $self
< @:
< $allstitr
< @;
< $index
< @:
< $integer
< @;
< $lst
< @:
< $abslist
< @)
< @:
< $allstitr
< @=
< $alliinit
< @;
< overrides
< $hasnext
< @=
< $allihasnext
< @;
< $next
< @=
< $allinext
< @;
< $nextindex
< @=
< $allinextindex
< @;
< $hasprevious
< @=
< $allihasprevious
< @;
< $previous
< @=
< $alliprevious
< @;
< $previousindex
< @=
< $allipreviousindex
< @;
< $set
< @=
< $alliset
< @;
< $add
< @=
< $alliadd
< @;
< $remove
< @=
< $alliremove
< @;
< end
< @;
< function
< $aladd
< @(
< $self
< @:
< $abslist
< @;
< $o
< @:
< $hasequals
< @)
< @:
< $boolean
< @;
< begin
< $aladd
< @:=
< $self
< @.
< $addith
< @(
< $self
< @.
< $size
< @,
< $o
< @)
< @;
< end
< @;
< function
< $alindexof
< @(
< $self
< @:
< $abslist
< @;
< $o
< @:
< $hasequals
< @)
< @:
< $integer
< @;
< var
< $it
< @:
< $listiterator
< @;
< $searching
< @:
< $boolean
< @;
< begin
< $it
< @:=
< $self
< @.
< $getlistiterator
< @;
< $alindexof
< @:=
< @-
< #1
< @;
< $searching
< @:=
< $true
< @;
< while
< $searching
< do
< begin
< if
< $it
< @.
< $hasnext
< then
< begin
< if
< $o
< @.
< $equals
< @(
< $it
< @.
< $next
< @)
< then
< begin
< $alindexof
< @:=
< $it
< @.
< $previousindex
< @;
< $searching
< @:=
< $false
< @;
< end
< @;
< end
< else
< begin
< $searching
< @:=
< $false
< @;
< end
< @;
< end
< @;
< end
< @;
< function
< $allastindexof
< @(
< $self
< @:
< $abslist
< @;
< $o
< @:
< $hasequals
< @)
< @:
< $integer
< @;
< var
< $it
< @:
< $listiterator
< @;
< $searching
< @:
< $boolean
< @;
< begin
< $it
< @:=
< $self
< @.
< $getlistiteratorith
< @(
< $self
< @.
< $size
< @)
< @;
< $allastindexof
< @:=
< @-
< #1
< @;
< $searching
< @:=
< $true
< @;
< while
< $searching
< do
< begin
< if
< $it
< @.
< $hasprevious
< then
< begin
< if
< $o
< @.
< $equals
< @(
< $it
< @.
< $previous
< @)
< then
< begin
< $allastindexof
< @:=
< $it
< @.
< $nextindex
< @;
< $searching
< @:=
< $false
< @;
< end
< @;
< end
< else
< begin
< $searching
< @:=
< $false
< @;
< end
< @;
< end
< @;
< end
< @;
< procedure
< $alclear
< @(
< $self
< @:
< $abslist
< @)
< @;
< var
< $b
< @:
< $boolean
< @;
< begin
< $b
< @:=
< $self
< @.
< $removerange
< @(
< #0
< @,
< $self
< @.
< $size
< @)
< @;
< end
< @;
< function
< $aladdallith
< @(
< $self
< @:
< $abslist
< @;
< $index
< @:
< $integer
< @;
< $other
< @:
< $collection
< @)
< @:
< $boolean
< @;
< var
< $it
< @:
< $iterator
< @;
< $b
< @:
< $boolean
< @;
< begin
< $aladdallith
< @:=
< $false
< @;
< if
< @(
< $index
< @>=
< #0
< @)
< and
< @(
< $index
< @<=
< $self
< @.
< $size
< @)
< then
< begin
< $it
< @:=
< $other
< @.
< $getiterator
< @;
< while
< $it
< @.
< $hasnext
< do
< begin
< $b
< @:=
< $self
< @.
< $addith
< @(
< $index
< @,
< $narrow
< @(
< $it
< @.
< $next
< @,
< $hasequals
< @)
< @)
< @;
< $index
< @:=
< $index
< @+
< #1
< @;
< $aladdallith
< @:=
< $true
< @;
< end
< @;
< end
< @;
< end
< @;
< function
< $algetiterator
< @(
< $self
< @:
< $abslist
< @)
< @:
< $iterator
< @;
< begin
< $algetiterator
< @:=
< $new
< @(
< $alitr
< @)
< @.
< $init
< @(
< $self
< @)
< @;
< end
< @;
< function
< $algetlistiterator
< @(
< $self
< @:
< $abslist
< @)
< @:
< $listiterator
< @;
< begin
< $algetlistiterator
< @:=
< $self
< @.
< $getlistiteratorith
< @(
< #0
< @)
< @;
< end
< @;
< function
< $algetlistiteratorith
< @(
< $self
< @:
< $abslist
< @;
< $index
< @:
< $integer
< @)
< @:
< $listiterator
< @;
< begin
< $algetlistiteratorith
< @:=
< $new
< @(
< $allstitr
< @)
< @.
< $init
< @(
< $index
< @,
< $self
< @)
< @;
< end
< @;
< function
< $alremoverange
< @(
< $self
< @:
< $abslist
< @;
< $fromindex
< @,
< $toindex
< @:
< $integer
< @)
< @:
< $boolean
< @;
< var
< $it
< @:
< $listiterator
< @;
< $i
< @:
< $integer
< @;
< $o
< @:
< $root
< @;
< begin
< $it
< @:=
< $self
< @.
< $getlistiteratorith
< @(
< $fromindex
< @)
< @;
< for
< $i
< @:=
< #0
< to
< @(
< $toindex
< @-
< $fromindex
< @-
< #1
< @)
< do
< begin
< $o
< @:=
< $it
< @.
< $next
< @;
< $it
< @.
< $remove
< @;
< end
< @;
< end
< @;
< function
< $alequals
< @(
< $self
< @:
< $abslist
< @;
< $other
< @:
< $collection
< @)
< @:
< $boolean
< @;
< var
< $it1
< @,
< $it2
< @:
< $iterator
< @;
< $searching
< @:
< $boolean
< @;
< $o1
< @,
< $o2
< @:
< $hasequals
< @;
< begin
< if
< $self
< @=
< $other
< then
< begin
< $alequals
< @:=
< $true
< @;
< end
< else
< if
< not
< $istype
< @(
< $other
< @,
< $abslist
< @)
< then
< begin
< $alequals
< @:=
< $false
< @;
< end
< else
< begin
< $it1
< @:=
< $self
< @.
< $getiterator
< @;
< $it2
< @:=
< $other
< @.
< $getiterator
< @;
< $searching
< @:=
< $true
< @;
< $alequals
< @:=
< $true
< @;
< while
< $searching
< do
< begin
< if
< $it1
< @.
< $hasnext
< and
< $it2
< @.
< $hasnext
< then
< begin
< $o1
< @:=
< $narrow
< @(
< $it1
< @.
< $next
< @,
< $hasequals
< @)
< @;
< $o2
< @:=
< $narrow
< @(
< $it2
< @.
< $next
< @,
< $hasequals
< @)
< @;
< if
< not
< $o1
< @.
< $equals
< @(
< $o2
< @)
< then
< begin
< $alequals
< @:=
< $false
< @;
< $searching
< @:=
< $false
< @;
< end
< @;
< end
< else
< begin
< $searching
< @:=
< $false
< @;
< end
< @;
< end
< @;
< if
< $it1
< @.
< $hasnext
< or
< $it2
< @.
< $hasnext
< then
< begin
< $alequals
< @:=
< $false
< @;
< end
< @;
< end
< @;
< end
< @;
< function
< $aliinit
< @(
< $self
< @:
< $alitr
< @;
< $lst
< @:
< $abslist
< @)
< @:
< $alitr
< @;
< begin
< $self
< @.
< $cursor
< @:=
< #0
< @;
< $self
< @.
< $lastret
< @:=
< @-
< #1
< @;
< $self
< @.
< $thelist
< @:=
< $lst
< @;
< $aliinit
< @:=
< $self
< @;
< end
< @;
< function
< $alihasnext
< @(
< $self
< @:
< $alitr
< @)
< @:
< $boolean
< @;
< begin
< $alihasnext
< @:=
< @(
< $self
< @.
< $cursor
< @<>
< $self
< @.
< $thelist
< @.
< $size
< @)
< @;
< end
< @;
< function
< $alinext
< @(
< $self
< @:
< $alitr
< @)
< @:
< $root
< @;
< begin
< if
< $self
< @.
< $cursor
< @>=
< $self
< @.
< $thelist
< @.
< $size
< then
< begin
< $alinext
< @:=
< nil
< @;
< end
< else
< begin
< $alinext
< @:=
< $self
< @.
< $thelist
< @.
< $getith
< @(
< $self
< @.
< $cursor
< @)
< @;
< $self
< @.
< $lastret
< @:=
< $self
< @.
< $cursor
< @;
< $self
< @.
< $cursor
< @:=
< $self
< @.
< $cursor
< @+
< #1
< @;
< end
< @;
< end
< @;
< procedure
< $aliremove
< @(
< $self
< @:
< $alitr
< @)
< @;
< var
< $b
< @:
< $boolean
< @;
< begin
< if
< $self
< @.
< $lastret
< @>=
< #0
< then
< begin
< $b
< @:=
< $self
< @.
< $thelist
< @.
< $removeith
< @(
< $self
< @.
< $lastret
< @)
< @;
< if
< $self
< @.
< $lastret
< @<
< $self
< @.
< $cursor
< then
< begin
< $self
< @.
< $cursor
< @:=
< $self
< @.
< $cursor
< @-
< #1
< @;
< end
< @;
< $self
< @.
< $lastret
< @:=
< @-
< #1
< @;
< end
< @;
< end
< @;
< function
< $alliinit
< @(
< $self
< @:
< $allstitr
< @;
< $index
< @:
< $integer
< @;
< $lst
< @:
< $abslist
< @)
< @:
< $allstitr
< @;
< begin
< $self
< @.
< $cursor
< @:=
< $index
< @;
< $self
< @.
< $lastret
< @:=
< @-
< #1
< @;
< $self
< @.
< $thelist
< @:=
< $lst
< @;
< $alliinit
< @:=
< $self
< @;
< end
< @;
< function
< $allihasnext
< @(
< $self
< @:
< $allstitr
< @)
< @:
< $boolean
< @;
< begin
< $allihasnext
< @:=
< @(
< $self
< @.
< $cursor
< @<>
< $self
< @.
< $thelist
< @.
< $size
< @)
< @;
< end
< @;
< function
< $allinext
< @(
< $self
< @:
< $allstitr
< @)
< @:
< $root
< @;
< begin
< if
< $self
< @.
< $cursor
< @>=
< $self
< @.
< $thelist
< @.
< $size
< then
< begin
< $allinext
< @:=
< nil
< @;
< end
< else
< begin
< $allinext
< @:=
< $self
< @.
< $thelist
< @.
< $getith
< @(
< $self
< @.
< $cursor
< @)
< @;
< $self
< @.
< $lastret
< @:=
< $self
< @.
< $cursor
< @;
< $self
< @.
< $cursor
< @:=
< $self
< @.
< $cursor
< @+
< #1
< @;
< end
< @;
< end
< @;
< function
< $allinextindex
< @(
< $self
< @:
< $allstitr
< @)
< @:
< $integer
< @;
< begin
< $allinextindex
< @:=
< $self
< @.
< $cursor
< @;
< end
< @;
< function
< $allihasprevious
< @(
< $self
< @:
< $allstitr
< @)
< @:
< $boolean
< @;
< begin
< $allihasprevious
< @:=
< @(
< $self
< @.
< $cursor
< @<>
< #0
< @)
< @;
< end
< @;
< function
< $alliprevious
< @(
< $self
< @:
< $allstitr
< @)
< @:
< $root
< @;
< begin
< if
< $self
< @.
< $cursor
< @<=
< #0
< then
< begin
< $alliprevious
< @:=
< nil
< @;
< end
< else
< begin
< $self
< @.
< $cursor
< @:=
< $self
< @.
< $cursor
< @-
< #1
< @;
< $self
< @.
< $lastret
< @:=
< $self
< @.
< $cursor
< @;
< $alliprevious
< @:=
< $self
< @.
< $thelist
< @.
< $getith
< @(
< $self
< @.
< $cursor
< @)
< @;
< end
< @;
< end
< @;
< function
< $allipreviousindex
< @(
< $self
< @:
< $allstitr
< @)
< @:
< $integer
< @;
< begin
< $allipreviousindex
< @:=
< $self
< @.
< $cursor
< @-
< #1
< @;
< end
< @;
< procedure
< $alliset
< @(
< $self
< @:
< $allstitr
< @;
< $o
< @:
< $hasequals
< @)
< @;
< var
< $oo
< @:
< $hasequals
< @;
< begin
< if
< $self
< @.
< $lastret
< @>=
< #0
< then
< begin
< $oo
< @:=
< $self
< @.
< $thelist
< @.
< $setith
< @(
< $self
< @.
< $lastret
< @,
< $o
< @)
< @;
< end
< @;
< end
< @;
< procedure
< $alliadd
< @(
< $self
< @:
< $allstitr
< @;
< $o
< @:
< $hasequals
< @)
< @;
< var
< $b
< @:
< $boolean
< @;
< begin
< if
< @(
< $self
< @.
< $cursor
< @>=
< #0
< @)
< and
< @(
< $self
< @.
< $cursor
< @<=
< $self
< @.
< $thelist
< @.
< $size
< @)
< then
< begin
< $b
< @:=
< $self
< @.
< $thelist
< @.
< $addith
< @(
< $self
< @.
< $cursor
< @,
< $o
< @)
< @;
< $self
< @.
< $lastret
< @:=
< @-
< #1
< @;
< $self
< @.
< $cursor
< @:=
< $self
< @.
< $cursor
< @+
< #1
< @;
< end
< @;
< end
< @;
< procedure
< $alliremove
< @(
< $self
< @:
< $allstitr
< @)
< @;
< var
< $oo
< @:
< $hasequals
< @;
< $b
< @:
< $boolean
< @;
< begin
< if
< $self
< @.
< $lastret
< @>=
< #0
< then
< begin
< $b
< @:=
< $self
< @.
< $thelist
< @.
< $removeith
< @(
< $self
< @.
< $lastret
< @)
< @;
< if
< $self
< @.
< $lastret
< @<
< $self
< @.
< $cursor
< then
< begin
< $self
< @.
< $cursor
< @:=
< $self
< @.
< $cursor
< @-
< #1
< @;
< end
< @;
< $self
< @.
< $lastret
< @:=
< @-
< #1
< @;
< end
< @;
< end
< @;
< type
< $llentry
< @=
< object
< $element
< @:
< $hasequals
< @;
< $next
< @:
< $llentry
< @;
< $previous
< @:
< $llentry
< @;
< methods
< function
< $init
< @(
< $self
< @:
< $llentry
< @;
< $element
< @:
< $hasequals
< @;
< $next
< @,
< $previous
< @:
< $llentry
< @)
< @:
< $llentry
< @=
< $lleinit
< @;
< end
< @;
< $linkedlist
< @=
< $abslist
< object
< $header
< @:
< $llentry
< @;
< $mysize
< @:
< $integer
< @;
< methods
< function
< $init
< @(
< $self
< @:
< $linkedlist
< @)
< @:
< $linkedlist
< @=
< $llinit
< @;
< function
< $getfirst
< @(
< $self
< @:
< $linkedlist
< @)
< @:
< $hasequals
< @=
< $llgetfirst
< @;
< function
< $getlast
< @(
< $self
< @:
< $linkedlist
< @)
< @:
< $hasequals
< @=
< $llgetlast
< @;
< function
< $removefirst
< @(
< $self
< @:
< $linkedlist
< @)
< @:
< $hasequals
< @=
< $llremovefirst
< @;
< function
< $removelast
< @(
< $self
< @:
< $linkedlist
< @)
< @:
< $hasequals
< @=
< $llremovelast
< @;
< function
< $removeentry
< @(
< $self
< @:
< $linkedlist
< @;
< $entry
< @:
< $llentry
< @)
< @:
< $hasequals
< @=
< $llremoveentry
< @;
< procedure
< $addfirst
< @(
< $self
< @:
< $linkedlist
< @)
< @=
< $lladdfirst
< @;
< procedure
< $addlast
< @(
< $self
< @:
< $linkedlist
< @)
< @=
< $lladdlast
< @;
< procedure
< $addbeforeentry
< @(
< $self
< @:
< $linkedlist
< @;
< $e
< @:
< $hasequals
< @;
< $entry
< @:
< $llentry
< @)
< @=
< $lladdbeforeentry
< @;
< function
< $entryith
< @(
< $self
< @:
< $linkedlist
< @;
< $index
< @:
< $integer
< @)
< @:
< $llentry
< @=
< $llentryith
< @;
< overrides
< $contains
< @=
< $llcontains
< @;
< $size
< @=
< $llsize
< @;
< $add
< @=
< $lladd
< @;
< $remove
< @=
< $llremove
< @;
< $addall
< @=
< $lladdall
< @;
< $addallith
< @=
< $lladdallith
< @;
< $clear
< @=
< $llclear
< @;
< $getith
< @=
< $llgetith
< @;
< $setith
< @=
< $llsetith
< @;
< $addith
< @=
< $lladdith
< @;
< $removeith
< @=
< $llremoveith
< @;
< $indexof
< @=
< $llindexof
< @;
< $lastindexof
< @=
< $lllastindexof
< @;
< $getlistiteratorith
< @=
< $llgetlistiteratorith
< @;
< end
< @;
< $lllstitr
< @=
< $listiterator
< object
< $lastreturned
< @:
< $llentry
< @;
< $nextent
< @:
< $llentry
< @;
< $nextidx
< @:
< $integer
< @;
< $thelist
< @:
< $linkedlist
< @;
< methods
< function
< $init
< @(
< $self
< @:
< $lllstitr
< @;
< $lst
< @:
< $linkedlist
< @;
< $index
< @:
< $integer
< @)
< @:
< $lllstitr
< @=
< $llliinit
< @;
< overrides
< $hasnext
< @=
< $lllihasnext
< @;
< $next
< @=
< $lllinext
< @;
< $nextindex
< @=
< $lllinextindex
< @;
< $hasprevious
< @=
< $lllihasprevious
< @;
< $previous
< @=
< $llliprevious
< @;
< $previousindex
< @=
< $lllipreviousindex
< @;
< $remove
< @=
< $llliremove
< @;
< $set
< @=
< $llliset
< @;
< $add
< @=
< $llliadd
< @;
< end
< @;
< function
< $lleinit
< @(
< $self
< @:
< $llentry
< @;
< $element
< @:
< $hasequals
< @;
< $next
< @,
< $previous
< @:
< $llentry
< @)
< @:
< $llentry
< @;
< begin
< $self
< @.
< $element
< @:=
< $element
< @;
< $self
< @.
< $next
< @:=
< $next
< @;
< $self
< @.
< $previous
< @:=
< $previous
< @;
< $lleinit
< @:=
< $self
< @;
< end
< @;
< function
< $llinit
< @(
< $self
< @:
< $linkedlist
< @)
< @:
< $linkedlist
< @;
< begin
< $self
< @.
< $header
< @:=
< $new
< @(
< $llentry
< @)
< @.
< $init
< @(
< nil
< @,
< nil
< @,
< nil
< @)
< @;
< $self
< @.
< $header
< @.
< $next
< @:=
< $self
< @.
< $header
< @;
< $self
< @.
< $header
< @.
< $previous
< @:=
< $self
< @.
< $header
< @;
< $self
< @.
< $size
< @:=
< #0
< @;
< $llinit
< @:=
< $self
< @;
< end
< @;
< function
< $llgetfirst
< @(
< $self
< @:
< $linkedlist
< @)
< @:
< $hasequals
< @;
< begin
< if
< $self
< @.
< $size
< @=
< #0
< then
< begin
< $llgetfirst
< @:=
< nil
< @;
< end
< else
< begin
< $llgetfirst
< @:=
< $self
< @.
< $header
< @.
< $next
< @.
< $element
< @;
< end
< @;
< end
< @;
< function
< $llgetlast
< @(
< $self
< @:
< $linkedlist
< @)
< @:
< $hasequals
< @;
< begin
< if
< $self
< @.
< $size
< @=
< #0
< then
< begin
< $llgetlast
< @:=
< nil
< @;
< end
< else
< begin
< $llgetlast
< @:=
< $self
< @.
< $header
< @.
< $previous
< @.
< $element
< @;
< end
< @;
< end
< @;
< function
< $llremovefirst
< @(
< $self
< @:
< $linkedlist
< @)
< @:
< $hasequals
< @;
< begin
< $llremovefirst
< @:=
< $self
< @.
< $removeentry
< @(
< $self
< @.
< $header
< @.
< $next
< @)
< @;
< end
< @;
< function
< $llremovelast
< @(
< $self
< @:
< $linkedlist
< @)
< @:
< $hasequals
< @;
< begin
< $llremovelast
< @:=
< $self
< @.
< $removeentry
< @(
< $self
< @.
< $header
< @.
< $previous
< @)
< @;
< end
< @;
< procedure
< $lladdfirst
< @(
< $self
< @:
< $linkedlist
< @;
< $e
< @:
< $hasequals
< @)
< @;
< begin
< $self
< @.
< $addbeforeentry
< @(
< $e
< @,
< $self
< @.
< $header
< @.
< $next
< @)
< @;
< end
< @;
< procedure
< $lladdlast
< @(
< $self
< @:
< $linkedlist
< @;
< $e
< @:
< $hasequals
< @)
< @;
< begin
< $self
< @.
< $addbeforeentry
< @(
< $e
< @,
< $self
< @.
< $header
< @)
< @;
< end
< @;
< function
< $llcontains
< @(
< $self
< @:
< $linkedlist
< @;
< $e
< @:
< $hasequals
< @)
< @:
< $boolean
< @;
< begin
< $llcontains
< @:=
< @(
< $self
< @.
< $indexof
< @(
< $e
< @)
< @<>
< @-
< #1
< @)
< @;
< end
< @;
< function
< $llsize
< @(
< $self
< @:
< $linkedlist
< @)
< @:
< $integer
< @;
< begin
< $llsize
< @:=
< $self
< @.
< $mysize
< @;
< end
< @;
< function
< $lladd
< @(
< $self
< @:
< $linkedlist
< @;
< $e
< @:
< $hasequals
< @)
< @:
< $boolean
< @;
< begin
< $self
< @.
< $addbeforeentry
< @(
< $e
< @,
< $self
< @.
< $header
< @)
< @;
< $lladd
< @:=
< $true
< @;
< end
< @;
< function
< $llremove
< @(
< $self
< @:
< $linkedlist
< @;
< $o
< @:
< $hasequals
< @)
< @:
< $boolean
< @;
< var
< $e
< @:
< $llentry
< @;
< $searching
< @:
< $boolean
< @;
< $oo
< @:
< $hasequals
< @;
< begin
< $llremove
< @:=
< $false
< @;
< $searching
< @:=
< $true
< @;
< $e
< @:=
< $self
< @.
< $header
< @.
< $next
< @;
< while
< $searching
< do
< begin
< if
< $e
< @<>
< $self
< @.
< $header
< then
< begin
< if
< $o
< @.
< $equals
< @(
< $e
< @.
< $element
< @)
< then
< begin
< $oo
< @:=
< $self
< @.
< $removeentry
< @(
< $e
< @)
< @;
< $llremove
< @:=
< $true
< @;
< $searching
< @:=
< $false
< @;
< end
< @;
< end
< else
< begin
< $searching
< @:=
< $false
< @;
< end
< @;
< end
< @;
< end
< @;
< function
< $lladdall
< @(
< $self
< @:
< $linkedlist
< @;
< $other
< @:
< $collection
< @)
< @:
< $boolean
< @;
< begin
< $lladdall
< @:=
< $self
< @.
< $addallith
< @(
< $self
< @.
< $size
< @,
< $other
< @)
< @;
< end
< @;
< function
< $lladdallith
< @(
< $self
< @:
< $linkedlist
< @;
< $index
< @:
< $integer
< @;
< $other
< @:
< $collection
< @)
< @:
< $boolean
< @;
< var
< $it
< @:
< $iterator
< @;
< $succ
< @:
< $llentry
< @;
< $pred
< @:
< $llentry
< @;
< $o
< @:
< $hasequals
< @;
< $newent
< @:
< $llentry
< @;
< begin
< $lladdallith
< @:=
< $false
< @;
< if
< @(
< $index
< @>=
< #0
< @)
< and
< @(
< $index
< @<=
< $self
< @.
< $size
< @)
< then
< begin
< $it
< @:=
< $other
< @.
< $getiterator
< @;
< if
< $index
< @=
< $self
< @.
< $size
< then
< begin
< $succ
< @:=
< $self
< @.
< $header
< @;
< end
< else
< begin
< $succ
< @:=
< $self
< @.
< $entryith
< @(
< $index
< @)
< @;
< end
< @;
< $pred
< @:=
< $succ
< @.
< $previous
< @;
< while
< $it
< @.
< $hasnext
< do
< begin
< $o
< @:=
< $narrow
< @(
< $it
< @.
< $next
< @,
< $hasequals
< @)
< @;
< $newent
< @:=
< $new
< @(
< $llentry
< @)
< @.
< $init
< @(
< $o
< @,
< $succ
< @,
< $pred
< @)
< @;
< $pred
< @.
< $next
< @:=
< $newent
< @;
< $pred
< @:=
< $newent
< @;
< $self
< @.
< $mysize
< @:=
< $self
< @.
< $mysize
< @+
< #1
< @;
< end
< @;
< $succ
< @.
< $previous
< @:=
< $pred
< @;
< $lladdallith
< @:=
< $true
< @;
< end
< @;
< end
< @;
< procedure
< $llclear
< @(
< $self
< @:
< $linkedlist
< @)
< @;
< var
< $e
< @,
< $next
< @:
< $llentry
< @;
< begin
< $e
< @:=
< $self
< @.
< $header
< @.
< $next
< @;
< while
< $e
< @<>
< $self
< @.
< $header
< do
< begin
< $next
< @:=
< $e
< @.
< $next
< @;
< $e
< @.
< $next
< @:=
< nil
< @;
< $e
< @.
< $previous
< @:=
< nil
< @;
< $e
< @:=
< $next
< @;
< end
< @;
< $self
< @.
< $header
< @.
< $next
< @:=
< $self
< @.
< $header
< @;
< $self
< @.
< $header
< @.
< $previous
< @:=
< $self
< @.
< $header
< @;
< $self
< @.
< $mysize
< @:=
< #0
< @;
< end
< @;
< function
< $llgetith
< @(
< $self
< @:
< $linkedlist
< @;
< $index
< @:
< $integer
< @)
< @:
< $hasequals
< @;
< begin
< $llgetith
< @:=
< $self
< @.
< $entryith
< @(
< $index
< @)
< @.
< $element
< @;
< end
< @;
< function
< $llsetith
< @(
< $self
< @:
< $linkedlist
< @;
< $index
< @:
< $integer
< @;
< $element
< @:
< $hasequals
< @)
< @:
< $hasequals
< @;
< var
< $e
< @:
< $llentry
< @;
< begin
< $llsetith
< @:=
< nil
< @;
< $e
< @:=
< $self
< @.
< $entryith
< @(
< $index
< @)
< @;
< if
< $e
< @<>
< nil
< then
< begin
< $llsetith
< @:=
< $e
< @.
< $element
< @;
< $e
< @.
< $element
< @:=
< $element
< @;
< end
< @;
< end
< @;
< function
< $lladdith
< @(
< $self
< @:
< $linkedlist
< @;
< $index
< @:
< $integer
< @;
< $element
< @:
< $hasequals
< @)
< @:
< $boolean
< @;
< var
< $e
< @:
< $llentry
< @;
< begin
< if
< $index
< @=
< $self
< @.
< $size
< then
< begin
< $e
< @:=
< $self
< @.
< $header
< @;
< end
< else
< begin
< $e
< @:=
< $self
< @.
< $entryith
< @(
< $index
< @)
< @;
< end
< @;
< $self
< @.
< $addbeforeentry
< @(
< $element
< @,
< $e
< @)
< @;
< $lladdith
< @:=
< $true
< @;
< end
< @;
< function
< $llremoveith
< @(
< $self
< @:
< $linkedlist
< @;
< $index
< @:
< $integer
< @)
< @:
< $boolean
< @;
< var
< $oo
< @:
< $hasequals
< @;
< begin
< $oo
< @:=
< $self
< @.
< $removeentry
< @(
< $self
< @.
< $entryith
< @(
< $index
< @)
< @)
< @;
< $llremoveith
< @:=
< $true
< @;
< end
< @;
< function
< $llentryith
< @(
< $self
< @:
< $linkedlist
< @;
< $index
< @:
< $integer
< @)
< @:
< $llentry
< @;
< var
< $e
< @:
< $llentry
< @;
< begin
< $llentryith
< @:=
< nil
< @;
< if
< @(
< $index
< @>=
< #0
< @)
< and
< @(
< $index
< @<
< $self
< @.
< $size
< @)
< then
< begin
< $e
< @:=
< $self
< @.
< $header
< @.
< $next
< @;
< while
< $index
< @>
< #0
< do
< begin
< $e
< @:=
< $e
< @.
< $next
< @;
< $index
< @:=
< $index
< @-
< #1
< @;
< end
< @;
< $llentryith
< @:=
< $e
< @;
< end
< @;
< end
< @;
< function
< $llindexof
< @(
< $self
< @:
< $linkedlist
< @;
< $o
< @:
< $hasequals
< @)
< @:
< $integer
< @;
< var
< $index
< @:
< $integer
< @;
< $e
< @:
< $llentry
< @;
< $searching
< @:
< $boolean
< @;
< begin
< $llindexof
< @:=
< @-
< #1
< @;
< $index
< @:=
< #0
< @;
< $e
< @:=
< $self
< @.
< $header
< @.
< $next
< @;
< $searching
< @:=
< $true
< @;
< while
< $searching
< do
< begin
< if
< $e
< @<>
< $self
< @.
< $header
< then
< begin
< if
< $o
< @.
< $equals
< @(
< $e
< @.
< $element
< @)
< then
< begin
< $llindexof
< @:=
< $index
< @;
< $searching
< @:=
< $false
< @;
< end
< else
< begin
< $index
< @:=
< $index
< @+
< #1
< @;
< $e
< @:=
< $e
< @.
< $next
< @;
< end
< @;
< end
< else
< begin
< $searching
< @:=
< $false
< @;
< end
< @;
< end
< @;
< end
< @;
< function
< $lllastindexof
< @(
< $self
< @:
< $linkedlist
< @;
< $o
< @:
< $hasequals
< @)
< @:
< $integer
< @;
< var
< $index
< @:
< $integer
< @;
< $e
< @:
< $llentry
< @;
< $searching
< @:
< $boolean
< @;
< begin
< $lllastindexof
< @:=
< @-
< #1
< @;
< $index
< @:=
< $self
< @.
< $size
< @;
< $e
< @:=
< $self
< @.
< $header
< @.
< $previous
< @;
< $searching
< @:=
< $true
< @;
< while
< $searching
< do
< begin
< if
< $e
< @<>
< $self
< @.
< $header
< then
< begin
< $index
< @:=
< $index
< @-
< #1
< @;
< if
< $o
< @.
< $equals
< @(
< $e
< @.
< $element
< @)
< then
< begin
< $lllastindexof
< @:=
< $index
< @;
< $searching
< @:=
< $false
< @;
< end
< else
< begin
< $e
< @:=
< $e
< @.
< $previous
< @;
< end
< @;
< end
< else
< begin
< $searching
< @:=
< $false
< @;
< end
< @;
< end
< @;
< end
< @;
< procedure
< $lladdbeforeentry
< @(
< $self
< @:
< $linkedlist
< @;
< $e
< @:
< $hasequals
< @;
< $entry
< @:
< $llentry
< @)
< @;
< var
< $newent
< @:
< $llentry
< @;
< begin
< $newent
< @:=
< $new
< @(
< $llentry
< @)
< @.
< $init
< @(
< $e
< @,
< $entry
< @,
< $entry
< @.
< $previous
< @)
< @;
< $newent
< @.
< $previous
< @.
< $next
< @:=
< $newent
< @;
< $newent
< @.
< $next
< @.
< $previous
< @:=
< $newent
< @;
< $self
< @.
< $mysize
< @:=
< $self
< @.
< $mysize
< @+
< #1
< @;
< end
< @;
< function
< $llremoveentry
< @(
< $self
< @:
< $linkedlist
< @;
< $e
< @:
< $llentry
< @)
< @:
< $hasequals
< @;
< begin
< $llremoveentry
< @:=
< nil
< @;
< if
< @(
< $e
< @<>
< $self
< @.
< $header
< @)
< and
< @(
< $e
< @<>
< nil
< @)
< then
< begin
< $llremoveentry
< @:=
< $e
< @.
< $element
< @;
< $e
< @.
< $previous
< @.
< $next
< @:=
< $e
< @.
< $next
< @;
< $e
< @.
< $next
< @.
< $previous
< @:=
< $e
< @.
< $previous
< @;
< $e
< @.
< $previous
< @:=
< nil
< @;
< $e
< @.
< $next
< @:=
< nil
< @;
< $e
< @.
< $element
< @:=
< nil
< @;
< $self
< @.
< $mysize
< @:=
< $self
< @.
< $mysize
< @-
< #1
< @;
< end
< @;
< end
< @;
< function
< $llgetlistiteratorith
< @(
< $self
< @:
< $linkedlist
< @;
< $index
< @:
< $integer
< @)
< @:
< $listiterator
< @;
< begin
< $llgetlistiteratorith
< @:=
< $new
< @(
< $lllstitr
< @)
< @.
< $init
< @(
< $self
< @,
< $index
< @)
< @;
< end
< @;
< function
< $llliinit
< @(
< $self
< @:
< $lllstitr
< @;
< $lst
< @:
< $linkedlist
< @;
< $index
< @:
< $integer
< @)
< @:
< $lllstitr
< @;
< begin
< $self
< @.
< $lastreturned
< @:=
< $lst
< @.
< $header
< @;
< $self
< @.
< $thelist
< @:=
< $lst
< @;
< if
< @(
< $index
< @>=
< #0
< @)
< and
< @(
< $index
< @<=
< $lst
< @.
< $size
< @)
< then
< begin
< $self
< @.
< $nextent
< @:=
< $self
< @.
< $thelist
< @.
< $header
< @.
< $next
< @;
< $self
< @.
< $nextidx
< @:=
< #0
< @;
< while
< $index
< @>
< #0
< do
< begin
< $self
< @.
< $nextent
< @:=
< $self
< @.
< $nextent
< @.
< $next
< @;
< $self
< @.
< $nextidx
< @:=
< $self
< @.
< $nextidx
< @+
< #1
< @;
< $index
< @:=
< $index
< @-
< #1
< @;
< end
< @;
< end
< @;
< end
< @;
< function
< $lllihasnext
< @(
< $self
< @:
< $lllstitr
< @)
< @:
< $boolean
< @;
< begin
< $lllihasnext
< @:=
< @(
< $self
< @.
< $nextidx
< @<>
< $self
< @.
< $thelist
< @.
< $size
< @)
< @;
< end
< @;
< function
< $lllinext
< @(
< $self
< @:
< $lllstitr
< @)
< @:
< $hasequals
< @;
< begin
< $lllinext
< @:=
< nil
< @;
< if
< $self
< @.
< $nextidx
< @<>
< $self
< @.
< $thelist
< @.
< $size
< then
< begin
< $self
< @.
< $lastreturned
< @:=
< $self
< @.
< $nextent
< @;
< $self
< @.
< $nextent
< @:=
< $self
< @.
< $nextent
< @.
< $next
< @;
< $self
< @.
< $nextidx
< @:=
< $self
< @.
< $nextidx
< @+
< #1
< @;
< $lllinext
< @:=
< $self
< @.
< $lastreturned
< @.
< $element
< @;
< end
< @;
< end
< @;
< function
< $lllinextindex
< @(
< $self
< @:
< $lllstitr
< @)
< @:
< $integer
< @;
< begin
< $lllinextindex
< @:=
< $self
< @.
< $nextidx
< @;
< end
< @;
< function
< $lllihasprevious
< @(
< $self
< @:
< $lllstitr
< @)
< @:
< $boolean
< @;
< begin
< $lllihasprevious
< @:=
< @(
< $self
< @.
< $nextidx
< @<>
< #0
< @)
< @;
< end
< @;
< function
< $llliprevious
< @(
< $self
< @:
< $lllstitr
< @)
< @:
< $hasequals
< @;
< begin
< $llliprevious
< @:=
< nil
< @;
< if
< $self
< @.
< $nextidx
< @<>
< #0
< then
< begin
< $self
< @.
< $lastreturned
< @:=
< $self
< @.
< $nextent
< @.
< $previous
< @;
< $self
< @.
< $nextent
< @:=
< $self
< @.
< $nextent
< @.
< $previous
< @;
< $self
< @.
< $nextidx
< @:=
< $self
< @.
< $nextidx
< @-
< #1
< @;
< $llliprevious
< @:=
< $self
< @.
< $lastreturned
< @.
< $element
< @;
< end
< @;
< end
< @;
< function
< $lllipreviousindex
< @(
< $self
< @:
< $lllstitr
< @)
< @:
< $integer
< @;
< begin
< $lllipreviousindex
< @:=
< $self
< @.
< $nextidx
< @-
< #1
< @;
< end
< @;
< procedure
< $llliremove
< @(
< $self
< @:
< $lllstitr
< @)
< @;
< var
< $lastnext
< @:
< $llentry
< @;
< $oo
< @:
< $hasequals
< @;
< begin
< $lastnext
< @:=
< $self
< @.
< $lastreturned
< @.
< $next
< @;
< $oo
< @:=
< $self
< @.
< $thelist
< @.
< $removeentry
< @(
< $self
< @.
< $lastreturned
< @)
< @;
< if
< $self
< @.
< $nextent
< @=
< $self
< @.
< $lastreturned
< then
< begin
< $self
< @.
< $nextent
< @:=
< $lastnext
< @;
< end
< else
< begin
< $self
< @.
< $nextidx
< @:=
< $self
< @.
< $nextidx
< @-
< #1
< @;
< end
< @;
< $self
< @.
< $lastreturned
< @:=
< $self
< @.
< $thelist
< @.
< $header
< @;
< end
< @;
< procedure
< $llliset
< @(
< $self
< @:
< $lllstitr
< @;
< $e
< @:
< $hasequals
< @)
< @;
< begin
< if
< $self
< @.
< $lastreturned
< @<>
< $self
< @.
< $thelist
< @.
< $header
< then
< begin
< $self
< @.
< $lastreturned
< @.
< $element
< @:=
< $e
< @;
< end
< @;
< end
< @;
< procedure
< $llliadd
< @(
< $self
< @:
< $lllstitr
< @;
< $e
< @:
< $hasequals
< @)
< @;
< begin
< $self
< @.
< $lastreturned
< @:=
< $self
< @.
< $thelist
< @.
< $header
< @;
< $self
< @.
< $thelist
< @.
< $addbeforeentry
< @(
< $e
< @,
< $self
< @.
< $nextent
< @)
< @;
< $self
< @.
< $nextidx
< @:=
< $self
< @.
< $nextidx
< @+
< #1
< @;
< end
< @;
< begin
< end
< @.
< EOF
< EOF
---
> $:= 


testprocdecl.err:
0a1,9
> Exception occurred:
> java.lang.IllegalStateException: Operator was not found in the operator table: (:
> 	at MPC.TokenOp.get(TokenOp.java:89)
> 	at MPC.MPCScanner.next_token(MPCScanner.java:505)
> 	at java_cup.runtime.lr_parser.scan(lr_parser.java:349)
> 	at java_cup.runtime.lr_parser.parse(lr_parser.java:578)
> 	at MPC.Parse.perform(Parse.java:45)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testprocdecl.token:
2,3c2
< $testprocdecl
< @;
---
> $testprocdecl;
6,8c5
< @=
< $integer
< @;
---
> $= integer;
11,179d7
< @(
< $a
< @:
< $a
< @)
< @;
< begin
< end
< @;
< procedure
< $p2
< @(
< $t1
< @:
< $t1
< @)
< @;
< begin
< end
< @;
< procedure
< $p3
< @(
< $x
< @:
< $y
< @)
< @;
< begin
< end
< @;
< procedure
< $p4
< @(
< $x
< @:
< $t2
< @)
< @;
< begin
< end
< @;
< function
< $f1
< @(
< $a
< @:
< $a
< @)
< @:
< $integer
< @;
< begin
< end
< @;
< function
< $f2
< @(
< $t1
< @:
< $t1
< @)
< @:
< $integer
< @;
< begin
< end
< @;
< function
< $f3
< @(
< $x
< @:
< $y
< @)
< @:
< $integer
< @;
< begin
< end
< @;
< function
< $f4
< @(
< $x
< @:
< $t2
< @)
< @:
< $integer
< @;
< begin
< end
< @;
< function
< $f5
< @(
< $x
< @:
< $integer
< @)
< @:
< $x
< @;
< begin
< end
< @;
< function
< $f6
< @(
< $x
< @:
< $integer
< @)
< @:
< $y
< @;
< begin
< end
< @;
< function
< $f7
< @(
< $x
< @:
< $integer
< @)
< @:
< $t1
< @;
< begin
< end
< @;
< function
< $f8
< @(
< $t1
< @:
< $integer
< @)
< @:
< $t1
< @;
< begin
< end
< @;
< function
< $f9
< @(
< $x
< @:
< $integer
< @)
< @:
< $t2
< @;
< begin
< end
< @;
< type
< $t2
< @=
< $boolean
< @;
< begin
< end
< @.
< EOF
< EOF


testread.token:
2,3c2
< $testread
< @;
---
> $testread;
7,8c6
< $integer
< @;
---
> $integer;
11,16c9,10
< @(
< $x
< @,
< $x
< @)
< @;
---
> $(, x);
> 
18,25c12,15
< @(
< 'x = '
< @,
< $x
< @)
< @;
< end
< @.
---
> $(x
> '= ', x);
> END.
> '



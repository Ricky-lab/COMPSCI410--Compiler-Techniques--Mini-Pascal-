gcd.err:
0a1,9
> Exception occurred:
> java.lang.IllegalStateException: Operator was not found in the operator table: x,
> 	at MPC.TokenOp.get(TokenOp.java:89)
> 	at MPC.MPCScanner.next_token(MPCScanner.java:498)
> 	at java_cup.runtime.lr_parser.scan(lr_parser.java:349)
> 	at java_cup.runtime.lr_parser.parse(lr_parser.java:578)
> 	at MPC.Parse.perform(Parse.java:45)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


gcd.token:
2,54c2
< $gcd
< @;
< var
< $x
< @,
< $y
< @:
< $integer
< @;
< begin
< $readln
< @(
< $x
< @,
< $y
< @)
< @;
< while
< $x
< @<>
< $y
< do
< begin
< if
< $x
< @>
< $y
< then
< $x
< @:=
< $x
< @-
< $y
< else
< $y
< @:=
< $y
< @-
< $x
< @;
< end
< @;
< $writeln
< @(
< 'GCD = '
< @,
< $x
< @)
< @;
< end
< @.
< EOF
< EOF
---
> $gcd;var


proctest.err:
0a1,9
> Exception occurred:
> java.lang.IllegalStateException: Operator was not found in the operator table: (:
> 	at MPC.TokenOp.get(TokenOp.java:89)
> 	at MPC.MPCScanner.next_token(MPCScanner.java:498)
> 	at java_cup.runtime.lr_parser.scan(lr_parser.java:349)
> 	at java_cup.runtime.lr_parser.parse(lr_parser.java:578)
> 	at MPC.Parse.perform(Parse.java:45)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


proctest.token:
2,4c2
< $procfunctest
< @;
< type
---
> $procfunctest;type
10,17c8,10
< @;
< procedure
< $p0
< @;
< begin
< end
< @;
< procedure
---
> $;procedure
> $p0;begin
> $end;procedure
19,452d11
< @(
< $x
< @:
< $integer
< @)
< @;
< begin
< end
< @;
< procedure
< $p2
< @(
< $x
< @:
< $integer
< @;
< $y
< @:
< $boolean
< @)
< @;
< begin
< end
< @;
< procedure
< $p3
< @(
< $x
< @:
< $integer
< @;
< $r
< @:
< $rng
< @;
< var
< $xx
< @:
< $integer
< @;
< var
< $rr
< @:
< $rng
< @)
< @;
< begin
< end
< @;
< function
< $f0
< @:
< $integer
< @;
< begin
< $f0
< @:=
< #0
< @;
< end
< @;
< function
< $f1
< @(
< $x
< @:
< $integer
< @)
< @:
< $integer
< @;
< begin
< $f1
< @:=
< $x
< @;
< end
< @;
< function
< $f2
< @(
< $x
< @:
< $integer
< @;
< $y
< @:
< $boolean
< @)
< @:
< $boolean
< @;
< begin
< $f2
< @:=
< $y
< @;
< end
< @;
< function
< $f3
< @:
< $boolean
< @;
< procedure
< $pp
< @;
< procedure
< $qq
< @;
< begin
< $pp
< @:=
< #5
< @;
< end
< @;
< begin
< $f3
< @:=
< $false
< @;
< $pp
< @:=
< #17
< @;
< end
< @;
< function
< $ff
< @:
< $boolean
< @;
< begin
< $f3
< @:=
< $true
< @;
< $ff
< @:=
< $false
< @;
< end
< @;
< begin
< $f3
< @:=
< $true
< @;
< $f3
< @:=
< #3
< @;
< end
< @;
< type
< $pint
< @=
< @^
< $integer
< @;
< var
< $r
< @:
< $rng
< @;
< $x
< @:
< $integer
< @;
< $y
< @:
< $boolean
< @;
< $p
< @:
< @^
< $integer
< @;
< begin
< $p0
< @;
< $p1
< @;
< $p0
< @(
< $x
< @)
< @;
< $p1
< @(
< $x
< @)
< @;
< $p1
< @(
< $y
< @)
< @;
< $p1
< @(
< $x
< @,
< $y
< @)
< @;
< $p2
< @(
< $x
< @)
< @;
< $p2
< @(
< $x
< @,
< $y
< @)
< @;
< $p2
< @(
< $y
< @,
< $x
< @)
< @;
< $p3
< @(
< $x
< @,
< $r
< @,
< $x
< @,
< $r
< @)
< @;
< $p3
< @(
< $r
< @,
< $x
< @,
< $x
< @,
< $r
< @)
< @;
< $p3
< @(
< $x
< @,
< $r
< @,
< $r
< @,
< $x
< @)
< @;
< $p3
< @(
< #50
< @,
< #50
< @,
< $x
< @,
< $r
< @)
< @;
< $p3
< @(
< #50
< @,
< #50
< @,
< #50
< @,
< #50
< @)
< @;
< $x
< @:=
< $f0
< @;
< $x
< @:=
< $f1
< @;
< $x
< @:=
< $f0
< @(
< $x
< @)
< @;
< $x
< @:=
< $f1
< @(
< $x
< @)
< @;
< $x
< @:=
< $f1
< @(
< $y
< @)
< @;
< $y
< @:=
< $f2
< @(
< $x
< @)
< @;
< $x
< @:=
< $f2
< @(
< $x
< @,
< $y
< @)
< @;
< $y
< @:=
< $f2
< @(
< $x
< @,
< $y
< @)
< @;
< $y
< @:=
< $f2
< @(
< $y
< @,
< $x
< @)
< @;
< $readln
< @;
< $readln
< @(
< #3
< @)
< @;
< $readln
< @(
< $x
< @)
< @;
< $readln
< @(
< $x
< @,
< #3
< @)
< @;
< $write
< @;
< $writeln
< @;
< $write
< @(
< $x
< @,
< #3
< @)
< @;
< $writeln
< @(
< $x
< @,
< #3
< @)
< @;
< $write
< @(
< $p
< @)
< @;
< $new
< @(
< $p
< @)
< @;
< $new
< @(
< $x
< @)
< @;
< $new
< @(
< #3
< @)
< @;
< $new
< @;
< $new
< @(
< $p
< @,
< $x
< @)
< @;
< $p
< @:=
< $new
< @(
< $pint
< @)
< @;
< $x
< @:=
< $new
< @(
< $pint
< @)
< @;
< $y
< @:=
< $new
< @(
< $boolean
< @)
< @;
< end
< @.
< EOF
< EOF


scangood.err:
0a1,161
> line 7: Unexpected character: '*' (code = 42 = 052 = \u002a)
> { some more challenging ones **
> ------------------------------^
> resetting to scan a new token
> line 7: Unexpected character: '*' (code = 42 = 052 = \u002a)
> { some more challenging ones ***
> -------------------------------^
> resetting to scan a new token
> line 7: Unexpected character: ')' (code = 41 = 051 = \u0029)
> { some more challenging ones *** )
> ---------------------------------^
> resetting to scan a new token
> line 7: Unexpected character: ')' (code = 41 = 051 = \u0029)
> { some more challenging ones *** ))
> ----------------------------------^
> resetting to scan a new token
> line 7: Unexpected character: ')' (code = 41 = 051 = \u0029)
> { some more challenging ones *** )))
> -----------------------------------^
> resetting to scan a new token
> line 7: Unexpected character: '}' (code = 125 = 175 = \u007d)
> { some more challenging ones *** ))) }
> -------------------------------------^
> resetting to scan a new token
> line 7: Unexpected character: '*' (code = 42 = 052 = \u002a)
> { some more challenging ones *** ))) } g { **
> --------------------------------------------^
> resetting to scan a new token
> line 7: Unexpected character: '*' (code = 42 = 052 = \u002a)
> { some more challenging ones *** ))) } g { ** *
> ----------------------------------------------^
> resetting to scan a new token
> line 7: Unexpected character: ')' (code = 41 = 051 = \u0029)
> { some more challenging ones *** ))) } g { ** *)
> -----------------------------------------------^
> resetting to scan a new token
> line 7: Unexpected character: '*' (code = 42 = 052 = \u002a)
> { some more challenging ones *** ))) } g { ** *) h { **
> ------------------------------------------------------^
> resetting to scan a new token
> line 7: Unexpected character: '*' (code = 42 = 052 = \u002a)
> { some more challenging ones *** ))) } g { ** *) h { ***
> -------------------------------------------------------^
> resetting to scan a new token
> line 7: Unexpected character: '}' (code = 125 = 175 = \u007d)
> { some more challenging ones *** ))) } g { ** *) h { ***}
> --------------------------------------------------------^
> resetting to scan a new token
> line 7: Unexpected character: '}' (code = 125 = 175 = \u007d)
> { some more challenging ones *** ))) } g { ** *) h { ***} i {*}
> --------------------------------------------------------------^
> resetting to scan a new token
> line 7: Unexpected character: '*' (code = 42 = 052 = \u002a)
> { some more challenging ones *** ))) } g { ** *) h { ***} i {*} j (****
> ----------------------------------------------------------------------^
> resetting to scan a new token
> line 7: Unexpected character: '*' (code = 42 = 052 = \u002a)
> { some more challenging ones *** ))) } g { ** *) h { ***} i {*} j (*****
> -----------------------------------------------------------------------^
> resetting to scan a new token
> line 7: Unexpected character: ')' (code = 41 = 051 = \u0029)
> { some more challenging ones *** ))) } g { ** *) h { ***} i {*} j (*****)
> ------------------------------------------------------------------------^
> resetting to scan a new token
> line 19: Unexpected character: '_' (code = 95 = 137 = \u005f)
> max_
> ---^
> resetting to scan a new token
> line 19: Unexpected character: '_' (code = 95 = 137 = \u005f)
> max_students a_
> --------------^
> resetting to scan a new token
> line 19: Unexpected character: '_' (code = 95 = 137 = \u005f)
> max_students a_b_
> ----------------^
> resetting to scan a new token
> line 19: Unexpected character: '_' (code = 95 = 137 = \u005f)
> max_students a_b_c A_
> --------------------^
> resetting to scan a new token
> line 19: Unexpected character: '_' (code = 95 = 137 = \u005f)
> max_students a_b_c A_b_
> ----------------------^
> resetting to scan a new token
> line 28: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 10#
> --^
> resetting to scan a new token
> line 28: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 10#99 2#
> -------^
> resetting to scan a new token
> line 28: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 10#99 2#1001 8#
> --------------^
> resetting to scan a new token
> line 28: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 10#99 2#1001 8#077 16#
> ---------------------^
> resetting to scan a new token
> line 28: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 10#99 2#1001 8#077 16#beef 36#
> -----------------------------^
> resetting to scan a new token
> line 29: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 2#
> -^
> resetting to scan a new token
> line 29: Unexpected character: '_' (code = 95 = 137 = \u005f)
> 2#1000_
> ------^
> resetting to scan a new token
> line 29: Unexpected character: '_' (code = 95 = 137 = \u005f)
> 2#1000_0001 2_
> -------------^
> resetting to scan a new token
> line 29: Unexpected character: '_' (code = 95 = 137 = \u005f)
> 2#1000_0001 2_000_
> -----------------^
> resetting to scan a new token
> line 29: Unexpected character: '_' (code = 95 = 137 = \u005f)
> 2#1000_0001 2_000_000 1_
> -----------------------^
> resetting to scan a new token
> line 29: Unexpected character: '_' (code = 95 = 137 = \u005f)
> 2#1000_0001 2_000_000 1_2_
> -------------------------^
> resetting to scan a new token
> line 29: Unexpected character: '_' (code = 95 = 137 = \u005f)
> 2#1000_0001 2_000_000 1_2_3_
> ---------------------------^
> resetting to scan a new token
> line 33: Unexpected character: '/' (code = 47 = 057 = \u002f)
> 'Special characters here : (:-)=<===<!!!!;<=>?@[]  ^_`{|}~!#$%&  ()*+,-./
> ------------------------------------------------------------------------^
> resetting to scan a new token
> line 33: Unexpected character: '"' (code = 34 = 042 = \u0022)
> 'Special characters here : (:-)=<===<!!!!;<=>?@[]  ^_`{|}~!#$%&  ()*+,-./:"
> --------------------------------------------------------------------------^
> resetting to scan a new token
> line 38: Unexpected character: '[' (code = 91 = 133 = \u005b)
> +-*.:==<><<=>>=,;:..()[
> ----------------------^
> resetting to scan a new token
> line 38: Unexpected character: ']' (code = 93 = 135 = \u005d)
> +-*.:==<><<=>>=,;:..()[]
> -----------------------^
> resetting to scan a new token
> line 38: Unexpected character: '^' (code = 94 = 136 = \u005e)
> +-*.:==<><<=>>=,;:..()[]^
> ------------------------^
> resetting to scan a new token
> Exception occurred:
> java.lang.IllegalStateException: Operator was not found in the operator table: a,
> 	at MPC.TokenOp.get(TokenOp.java:89)
> 	at MPC.MPCScanner.next_token(MPCScanner.java:498)
> 	at java_cup.runtime.lr_parser.scan(lr_parser.java:349)
> 	at java_cup.runtime.lr_parser.parse(lr_parser.java:578)
> 	at MPC.Parse.perform(Parse.java:45)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


scangood.token:
4,6c4,6
< $d
< $e
< $f
---
> $*d
> $(* e
> $(* *f
51,53c51,58
< $max_students
< $a_b_c
< $a_b_c
---
> $max
> $students
> $a
> $b
> $c
> $a
> $b
> $c
63a69
> #10
65,79c71,97
< #9
< #63
< #48879
< #46617
< #129
< #2000000
< #1234
< 'Hello, COINS 610'
< 'Special characters here : (:-)=<===<!!!!;<=>?@[]  ^_`{|}~!#$%&  ()*+,-./:"'
< '' umatched 'quote' '
< 'test' nested' string'
< @+
< @-
< @*
< @.
---
> #2
> #1001
> #8
> #77
> #16
> $beef
> #36
> $zyx
> #2
> #1000
> #1
> #2
> #0
> #0
> #1
> #2
> #3
> #4
> $'Hello, COINS 610'
> 'Special characters here : (:-)=<===<!!!!;<=>?@[]  ^_`{|}~!#$%&  ()*+,-.
> @:
> $'
> ''' umatched ''quote'' '
> 'test'' nested'' string'
> 
> { Arithmetic, logical ops  and others}
> +-*.
91,95d108
< @(
< @)
< @[
< @]
< @^
100,119c113
< $scantest
< @;
< var
< $a
< @,
< $b
< @:
< $integer
< @;
< begin
< $a
< @:=
< #3000
< @+
< $b
< @;
< end
< @.
< EOF
< EOF
---
> $scantest;var


scanids.err:
1c1
< line 3: Unexpected character: '\u000a' (code = 10 = 012 = \u000a)
---
> line 2: Unexpected character: '_' (code = 95 = 137 = \u005f)
3c3
< ^
---
> -^
4a5,16
> line 3: Unexpected character: '_' (code = 95 = 137 = \u005f)
> x_
> -^
> resetting to scan a new token
> line 4: Unexpected character: '_' (code = 95 = 137 = \u005f)
> X_
> -^
> resetting to scan a new token
> line 6: Unexpected character: '_' (code = 95 = 137 = \u005f)
> X_
> -^
> resetting to scan a new token
8a21,24
> line 7: Unexpected character: '_' (code = 95 = 137 = \u005f)
> x_
> -^
> resetting to scan a new token


scanids.token:
2,3d1
< $x_y
< $x_y
4a3,10
> $x
> $y
> $x
> $y
> $x
> $x
> $y
> $x
6d11
< $x_y


scanints.err:
5c5
< line 7: Requested integer base 0 not in range 2 to 36
---
> line 7: Unexpected character: '#' (code = 35 = 043 = \u0023)
9c9
< line 8: Requested integer base 1 not in range 2 to 36
---
> line 8: Unexpected character: '#' (code = 35 = 043 = \u0023)
13c13
< line 9: Requested integer base 37 not in range 2 to 36
---
> line 9: Unexpected character: '#' (code = 35 = 043 = \u0023)
17,19c17,35
< line 11: Integer literal digit 2 too large for number base 2
< 2#102
< ----^
---
> line 10: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 2#
> -^
> resetting to scan a new token
> line 11: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 2#
> -^
> resetting to scan a new token
> line 12: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 10#
> --^
> resetting to scan a new token
> line 13: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 16#
> --^
> resetting to scan a new token
> line 14: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 16#
> --^
21,22c37,54
< line 12: Integer literal digit a too large for number base 10
< 10#10A
---
> line 15: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 35#
> --^
> resetting to scan a new token
> line 16: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 35#
> --^
> resetting to scan a new token
> line 17: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 35#
> --^
> resetting to scan a new token
> line 18: Unexpected character: '_' (code = 95 = 137 = \u005f)
> 2_
> -^
> resetting to scan a new token
> line 18: Unexpected character: '_' (code = 95 = 137 = \u005f)
> 2_000_
25,27c57,59
< line 14: Integer literal digit g too large for number base 16
< 16#G
< ---^
---
> line 18: Unexpected character: '_' (code = 95 = 137 = \u005f)
> 2_000_000_
> ---------^
29,31c61,71
< line 17: Integer literal digit z too large for number base 35
< 35#Z
< ---^
---
> line 19: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 2#
> -^
> resetting to scan a new token
> line 19: Unexpected character: '_' (code = 95 = 137 = \u005f)
> 2#1000_
> ------^
> resetting to scan a new token
> line 20: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 16#
> --^
33,35c73,87
< line 20: Integer literal value too large
< 16#dead_beef
< -----------^
---
> line 20: Unexpected character: '_' (code = 95 = 137 = \u005f)
> 16#dead_
> -------^
> resetting to scan a new token
> line 21: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 16#
> --^
> resetting to scan a new token
> line 21: Unexpected character: '_' (code = 95 = 137 = \u005f)
> 16#4ead_
> -------^
> resetting to scan a new token
> line 22: Unexpected character: '_' (code = 95 = 137 = \u005f)
> 2_
> -^
41c93
< line 23: Unexpected character: ' ' (code = 32 = 040 = \u0020)
---
> line 23: Unexpected character: '_' (code = 95 = 137 = \u005f)
42a95,102
> --^
> resetting to scan a new token
> line 24: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 2#
> -^
> resetting to scan a new token
> line 24: Unexpected character: '_' (code = 95 = 137 = \u005f)
> 2#1_
49c109,113
< line 25: Unexpected character: ' ' (code = 32 = 040 = \u0020)
---
> line 25: Unexpected character: '#' (code = 35 = 043 = \u0023)
> 2#
> -^
> resetting to scan a new token
> line 25: Unexpected character: '_' (code = 95 = 137 = \u005f)
51c115
< -----^
---
> ----^


scanints.token:
7a8
> #1
9,15c10,30
< #5
< #511
< #34
< #34
< #2000000000
< #129
< #1320009455
---
> #37
> #0
> #2
> #101
> #2
> #102
> #10
> #10
> $a
> #16
> #1
> $ff
> #16
> $g
> #35
> $y
> #35
> $y
> #35
> $z
> #2
17a33,51
> #0
> #2
> #1000
> #1
> #16
> $dead
> $beef
> #16
> #4
> $ead
> $beef
> #2
> #0
> #20
> #2
> #1
> #0
> #2
> #10


scanmin.err:
0a1,9
> Exception occurred:
> java.lang.IllegalStateException: Operator was not found in the operator table: a,
> 	at MPC.TokenOp.get(TokenOp.java:89)
> 	at MPC.MPCScanner.next_token(MPCScanner.java:498)
> 	at java_cup.runtime.lr_parser.scan(lr_parser.java:349)
> 	at java_cup.runtime.lr_parser.parse(lr_parser.java:578)
> 	at MPC.Parse.perform(Parse.java:45)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


scanmin.token:
62,64c62
< @(
< @)
< $x
---
> $(x
68,87c66
< $scantest
< @;
< var
< $a
< @,
< $b
< @:
< $integer
< @;
< begin
< $a
< @:=
< #3000
< and
< $b
< @;
< end
< @.
< EOF
< EOF
---
> $scantest;var


scanstringnl.err:
1,8d0
< line 3: Unexpected character: '\u000a' (code = 10 = 012 = \u000a)
< 'Hello, 
< ^
< resetting to scan a new token
< line 4: Unexpected character: '\u000a' (code = 10 = 012 = \u000a)
< COINS 610'
< ^
< resetting to scan a new token


scanstringnl.token:
1,2c1,4
< $coins
< #610
---
> ''Hello, 
> COINS 610'
> 
> '


testbranch.err:
0a1,9
> Exception occurred:
> java.lang.IllegalStateException: Operator was not found in the operator table: x,
> 	at MPC.TokenOp.get(TokenOp.java:89)
> 	at MPC.MPCScanner.next_token(MPCScanner.java:498)
> 	at java_cup.runtime.lr_parser.scan(lr_parser.java:349)
> 	at java_cup.runtime.lr_parser.parse(lr_parser.java:578)
> 	at MPC.Parse.perform(Parse.java:45)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testbranch.token:
2,200c2,3
< $testbranch
< @;
< procedure
< $reached
< @;
< var
< $x
< @,
< $y
< @:
< $integer
< @;
< begin
< $x
< @:=
< #1
< @;
< $y
< @:=
< #2
< @-
< $x
< @;
< if
< $x
< @<>
< $y
< then
< begin
< $unreached
< @;
< $write
< @(
< 'bar'
< @)
< @;
< end
< @;
< $writeln
< @(
< 'foo'
< @)
< @;
< end
< @;
< procedure
< $unreached
< @;
< begin
< end
< @;
< procedure
< $branchingforms
< @;
< var
< $x
< @,
< $y
< @,
< $z
< @,
< $a
< @,
< $b
< @,
< $c
< @:
< $integer
< @;
< $bb
< @:
< $boolean
< @;
< begin
< if
< @(
< $x
< @<
< $y
< @)
< and
< @(
< $y
< @<
< $z
< @)
< then
< $bb
< @:=
< $true
< @;
< while
< @(
< $a
< @<>
< $b
< @)
< or
< @(
< $z
< @=
< #0
< @)
< do
< $x
< @:=
< $x
< @+
< #1
< @;
< repeat
< $z
< @:=
< $z
< @+
< #2
< @;
< until
< not
< @(
< @(
< $a
< @=
< $b
< @)
< or
< @(
< $y
< @<>
< $z
< @)
< or
< $bb
< @)
< @;
< end
< @;
< var
< $z
< @:
< $integer
< @;
< begin
< $z
< @:=
< #0
< @;
< $reached
< @;
< if
< $z
< @<>
< #0
< then
< if
< $z
< @<>
< #1
< then
< $z
< @:=
< #2
< else
< $z
< @:=
< #3
< else
< if
< $z
< @<>
< #4
< then
< $z
< @:=
< #5
< else
< $z
< @:=
< #6
< @;
< while
< $false
< do
< $z
< @:=
< $z
< @+
< #1
< @;
< $z
< @:=
< $z
< @+
< #100
< @;
< end
< @.
< EOF
< EOF
---
> $testbranch;procedure
> $reached;var


testdead.err:
0a1,9
> Exception occurred:
> java.lang.IllegalStateException: Operator was not found in the operator table: integer;
> 	at MPC.TokenOp.get(TokenOp.java:89)
> 	at MPC.MPCScanner.next_token(MPCScanner.java:498)
> 	at java_cup.runtime.lr_parser.scan(lr_parser.java:349)
> 	at java_cup.runtime.lr_parser.parse(lr_parser.java:578)
> 	at MPC.Parse.perform(Parse.java:45)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testdead.token:
2,4c2
< $test
< @;
< type
---
> $test;type
11,87d8
< $integer
< @;
< end
< @;
< $tconc11
< @=
< $tabs1
< object
< $y
< @:
< $integer
< @;
< end
< @;
< $tconc12
< @=
< $tabs1
< object
< $z
< @:
< $integer
< @;
< end
< @;
< $tabs2
< @=
< abstract
< object
< $b
< @:
< $boolean
< @;
< end
< @;
< var
< $p1
< @:
< $tabs1
< @;
< begin
< $p1
< @:=
< $new
< @(
< $tconc11
< @)
< @;
< $writeln
< @(
< 'Got here!'
< @)
< @;
< while
< $true
< do
< $writeln
< @(
< 'Hello World'
< @)
< @;
< while
< $false
< do
< $writeln
< @(
< 'Not more?'
< @)
< @;
< $writeln
< @(
< 'More?'
< @)
< @;
< end
< @.
< EOF
< EOF


testfor.err:
0a1,9
> Exception occurred:
> java.lang.IllegalStateException: Operator was not found in the operator table: integer;m,
> 	at MPC.TokenOp.get(TokenOp.java:89)
> 	at MPC.MPCScanner.next_token(MPCScanner.java:498)
> 	at java_cup.runtime.lr_parser.scan(lr_parser.java:349)
> 	at java_cup.runtime.lr_parser.parse(lr_parser.java:578)
> 	at MPC.Parse.perform(Parse.java:45)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testfor.token:
2,4c2
< $testfor
< @;
< var
---
> $testfor;var
7,98d4
< $integer
< @;
< $m
< @,
< $n
< @:
< #1
< @..
< #10
< @;
< $x
< @:
< $integer
< @;
< begin
< $x
< @:=
< #0
< @;
< for
< $i
< @:=
< #1
< to
< #10
< do
< $x
< @:=
< $x
< @+
< $i
< @;
< $x
< @:=
< #0
< @;
< for
< $n
< @:=
< #1
< to
< #10
< do
< $x
< @:=
< $x
< @+
< #1
< @;
< for
< $n
< @:=
< #1
< to
< $m
< do
< $x
< @:=
< $x
< @+
< #1
< @;
< for
< $n
< @:=
< $m
< downto
< $m
< do
< $x
< @:=
< $x
< @-
< #1
< @;
< for
< $n
< @:=
< $i
< to
< $i
< do
< $x
< @:=
< $x
< @+
< #2
< @;
< end
< @.
< EOF
< EOF


testmin.err:
0a1,9
> Exception occurred:
> java.lang.IllegalStateException: Operator was not found in the operator table: boolean;w1,
> 	at MPC.TokenOp.get(TokenOp.java:89)
> 	at MPC.MPCScanner.next_token(MPCScanner.java:498)
> 	at java_cup.runtime.lr_parser.scan(lr_parser.java:349)
> 	at java_cup.runtime.lr_parser.parse(lr_parser.java:578)
> 	at MPC.Parse.perform(Parse.java:45)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testmin.token:
2,4c2
< $test
< @;
< const
---
> $test;const
7,9c5
< $true
< @;
< var
---
> $true;var
12,61d7
< $boolean
< @;
< $w1
< @,
< $w2
< @,
< $w3
< @:
< $boolean
< @;
< begin
< $b
< @:=
< $false
< @;
< while
< $b
< @=
< $n
< do
< begin
< $w1
< @:=
< $w1
< and
< $true
< @;
< $w2
< @:=
< $w2
< or
< $false
< @;
< $w3
< @:=
< not
< @(
< $w3
< or
< $w2
< and
< $w1
< @)
< @;
< end
< @;
< end
< @.
< EOF
< EOF


testmisc2.err:
0a1,13
> Exception occurred:
> java.lang.IllegalStateException: Operator was not found in the operator table: 'string constant';
>   c2 = 100;
> 
> type
>   t1 = 100..
> 	at MPC.TokenOp.get(TokenOp.java:89)
> 	at MPC.MPCScanner.next_token(MPCScanner.java:498)
> 	at java_cup.runtime.lr_parser.scan(lr_parser.java:349)
> 	at java_cup.runtime.lr_parser.parse(lr_parser.java:578)
> 	at MPC.Parse.perform(Parse.java:45)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testmisc2.token:
2,4c2
< $bigtest
< @;
< const
---
> $bigtest;const
7,789d4
< 'string constant'
< @;
< $c2
< @=
< #100
< @;
< type
< $t1
< @=
< #100
< @..
< #200
< @;
< $t2
< @=
< 'string1'
< @..
< 'string2'
< @;
< var
< $v1
< @,
< $v2
< @:
< array
< @[
< #10
< @..
< #20
< @,
< #20
< @..
< #30
< @,
< #30
< @..
< #40
< @]
< of
< $integer
< @;
< $v3
< @,
< $v4
< @:
< array
< @[
< #10
< @..
< #20
< @]
< of
< array
< @[
< #20
< @..
< #30
< @,
< #30
< @..
< #40
< @]
< of
< $integer
< @;
< $v5
< @:
< array
< @[
< #10
< @..
< #20
< @]
< of
< array
< @[
< #20
< @..
< #30
< @]
< of
< array
< @[
< #30
< @..
< #40
< @]
< of
< $integer
< @;
< procedure
< $p1
< @;
< begin
< end
< @;
< function
< $f1
< @:
< $integer
< @;
< begin
< @;
< end
< @;
< const
< $c1
< @=
< @+
< #100
< @;
< $c2
< @=
< @-
< $c1
< @;
< $c3
< @=
< @+
< #100
< @;
< $c4
< @=
< @-
< $c3
< @;
< var
< $a
< @,
< $b
< @,
< $c
< @,
< $d
< @,
< $e
< @,
< $f
< @,
< $g
< @,
< $h
< @,
< $i
< @:
< array
< @[
< #1
< @..
< #100
< @]
< of
< record
< $a
< @,
< $b
< @:
< array
< @[
< #50
< @..
< #60
< @]
< of
< $integer
< @;
< $c
< @,
< $d
< @,
< $e
< @,
< $f
< @:
< array
< @[
< #100
< @..
< #110
< @]
< of
< array
< @[
< #5
< @..
< #10
< @,
< #80
< @..
< #90
< @]
< of
< record
< end
< @;
< end
< @;
< type
< $ptr
< @=
< @^
< $sometype
< @;
< function
< $f1
< @(
< $a
< @:
< $integer
< @;
< var
< $a
< @,
< $b
< @,
< $c
< @:
< $integer
< @;
< $d
< @,
< $e
< @,
< $f
< @:
< $integer
< @;
< var
< $g
< @,
< $h
< @,
< $i
< @:
< $integer
< @)
< @:
< $sometype
< @;
< type
< $a
< @=
< record
< $a
< @:
< $integer
< @;
< $b
< @:
< $integer
< @;
< $c
< @:
< $integer
< @;
< end
< @;
< $b
< @=
< record
< $a
< @:
< $integer
< @;
< $b
< @:
< $integer
< @;
< $c
< @:
< $integer
< end
< @;
< const
< $constant
< @=
< #1000
< @;
< function
< $infunc
< @:
< $type1
< @;
< begin
< end
< @;
< var
< $x
< @,
< $y
< @,
< $z
< @:
< @^
< $integer
< @;
< const
< $c2
< @=
< #30000
< @;
< $c4
< @=
< @-
< #2
< @;
< $c5
< @=
< 'this is a test'
< @;
< procedure
< $inproc
< @(
< var
< $a
< @:
< $integer
< @;
< var
< $b
< @:
< $integer
< @;
< $c
< @:
< $integer
< @;
< $d
< @:
< $integer
< @;
< var
< $e
< @:
< $integer
< @)
< @;
< begin
< end
< @;
< begin
< end
< @;
< type
< $x
< @=
< record
< $y
< @:
< record
< $z
< @:
< record
< $a
< @:
< array
< @[
< #1
< @..
< #2
< @,
< #3
< @..
< #4
< @,
< #5
< @..
< #6
< @,
< #7
< @..
< #8
< @,
< #9
< @..
< #10
< @]
< of
< $integer
< @;
< end
< @;
< end
< @;
< end
< @;
< procedure
< $foo
< @;
< begin
< end
< @;
< type
< $a
< @=
< $integer
< @;
< var
< $a
< @:
< $integer
< @;
< function
< $func1
< @(
< var
< $a
< @,
< $b
< @,
< $c
< @,
< $d
< @,
< $e
< @,
< $f
< @,
< $g
< @,
< $h
< @,
< $i
< @,
< $j
< @,
< $k
< @,
< $l
< @,
< $m
< @,
< $n
< @,
< $o
< @,
< $p
< @,
< $q
< @,
< $r
< @,
< $s
< @,
< $t
< @,
< $u
< @,
< $v
< @,
< $w
< @,
< $x
< @,
< $y
< @,
< $z
< @:
< $type1
< @)
< @:
< $type2
< @;
< begin
< end
< @;
< procedure
< $proc1
< @;
< begin
< end
< @;
< begin
< if
< $a
< @=
< $b
< then
< if
< $c
< @=
< $d
< then
< if
< $e
< @=
< $f
< then
< $g
< @:=
< $h
< else
< $g
< @:=
< #2
< else
< $g
< @:=
< #3
< @;
< $a
< @:=
< #0
< @;
< while
< @(
< $a
< @<=
< #100
< @)
< or
< @(
< $b
< @>
< #20
< @)
< or
< @(
< $g
< @=
< #12
< @)
< do
< begin
< end
< @;
< repeat
< begin
< end
< @;
< until
< @(
< $a
< @<=
< #100
< @)
< or
< @(
< $b
< @>
< #20
< @)
< or
< @(
< $g
< @=
< #12
< @)
< @;
< $a
< @:=
< #10
< @;
< $b
< @:=
< #20
< @;
< $c
< @:=
< $a
< @*
< $b
< @;
< $a
< @:=
< $a
< @+
< #10
< @*
< $b
< @-
< $c
< @;
< $a
< @:=
< @-
< $a
< @+
< #10
< @*
< $b
< @-
< $c
< @;
< $a
< @:=
< #0
< @;
< $b
< @:=
< #2
< @;
< repeat
< $a
< @:=
< $a
< @+
< #1
< @;
< $b
< @:=
< $b
< @*
< #2
< @;
< until
< $a
< @=
< #10
< @;
< for
< $a
< @:=
< @(
< #10
< @+
< #20
< @)
< to
< @(
< #100
< @-
< #10
< @)
< do
< begin
< $b
< @:=
< $b
< @+
< #1
< @;
< $c
< @:=
< $c
< @+
< #2
< @;
< end
< @;
< for
< $a
< @:=
< @(
< #10
< @+
< #20
< @)
< downto
< @(
< #100
< @-
< #10
< @)
< do
< begin
< $b
< @:=
< $b
< @+
< #1
< @;
< $c
< @:=
< $c
< @+
< #2
< @;
< end
< @;
< case
< $a
< of
< #1
< @,
< #2
< @,
< #3
< @:
< $b
< @:=
< #10
< @;
< #4
< @,
< #5
< @,
< #6
< @:
< $b
< @:=
< #20
< end
< @;
< case
< $a
< of
< #1
< @,
< #2
< @,
< #3
< @:
< $b
< @:=
< #10
< @;
< #4
< @,
< #5
< @,
< #6
< @:
< $b
< @:=
< #20
< @;
< end
< @;
< $a
< @:=
< $a
< @.
< $b
< @.
< $c
< @.
< $d
< @;
< $a
< @:=
< $a
< @.
< $b
< @.
< $c
< @.
< $d
< @^
< @;
< $a
< @:=
< $a
< @;
< $b
< @:=
< $a
< @(
< #10
< @,
< $a
< @+
< $c
< @,
< 'this is a test'
< @)
< @;
< $a
< @:=
< $b
< @[
< #1
< @]
< @;
< $a
< @:=
< $b
< @[
< #1
< @,
< #2
< @,
< #3
< @,
< #4
< @,
< #5
< @]
< @;
< end
< @.
< EOF
< EOF


testobject.err:
0a1,9
> Exception occurred:
> java.lang.IllegalStateException: Operator was not found in the operator table: (elf,
> 	at MPC.TokenOp.get(TokenOp.java:89)
> 	at MPC.MPCScanner.next_token(MPCScanner.java:498)
> 	at java_cup.runtime.lr_parser.scan(lr_parser.java:349)
> 	at java_cup.runtime.lr_parser.parse(lr_parser.java:578)
> 	at MPC.Parse.perform(Parse.java:45)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testobject.token:
2,4c2
< $testobject
< @;
< type
---
> $testobject;type
12,13c10
< @(
< $self
---
> $(elf
15,20c12
< $anyobject
< @)
< @;
< end
< @;
< $month
---
> $anyobject);end;month
25,26c17
< @;
< $dayofmonth
---
> $;dayofmonth
31,32c22
< @;
< $date
---
> $;date
38,40c28
< $month
< @;
< $d
---
> $month;d
42,44c30
< $dayofmonth
< @;
< $y
---
> $dayofmonth;y
46,48c32
< $integer
< @;
< methods
---
> $integer;methods
51,52c35
< @(
< $self
---
> $(elf
54,55c37
< $date
< @)
---
> $date)
59,61c41
< $datedayofyear
< @;
< procedure
---
> $datedayofyear;procedure
63,546c43
< @(
< $self
< @:
< $date
< @)
< @=
< $dateincrement
< @;
< function
< $equalsdate
< @(
< $self
< @,
< $other
< @:
< $date
< @)
< @:
< $boolean
< @=
< $dateequalsdate
< @;
< overrides
< $print
< @=
< $dateprint
< @;
< end
< @;
< var
< $d
< @:
< $date
< @;
< $a
< @:
< $anyobject
< @;
< $r
< @:
< $root
< @;
< procedure
< $dateprint
< @(
< $self
< @:
< $date
< @)
< @;
< begin
< $writeln
< @(
< 'Entered datePrint'
< @)
< @;
< $write
< @(
< $self
< @.
< $m
< @)
< @;
< $write
< @(
< '-'
< @)
< @;
< $write
< @(
< $self
< @.
< $d
< @)
< @;
< $write
< @(
< '-'
< @)
< @;
< $write
< @(
< $self
< @.
< $y
< @)
< @;
< end
< @;
< function
< $mkdate
< @(
< $m
< @:
< $month
< @;
< $d
< @:
< $dayofmonth
< @;
< $y
< @:
< $integer
< @)
< @:
< $date
< @;
< var
< $ret
< @:
< $date
< @;
< begin
< $writeln
< @(
< 'Entered mkDate'
< @)
< @;
< $ret
< @:=
< $new
< @(
< $date
< @)
< @;
< $ret
< @.
< $m
< @:=
< $m
< @;
< $ret
< @.
< $d
< @:=
< $d
< @;
< $ret
< @.
< $y
< @:=
< $y
< @;
< $mkdate
< @:=
< $ret
< @;
< end
< @;
< function
< $isleapyear
< @(
< $y
< @:
< $integer
< @)
< @:
< $boolean
< @;
< var
< $remainder
< @:
< $integer
< @;
< $ret
< @:
< $boolean
< @;
< begin
< $writeln
< @(
< 'Entered isLeapYear'
< @)
< @;
< $remainder
< @:=
< $y
< mod
< #4
< @;
< if
< $remainder
< @<>
< #0
< then
< $ret
< @:=
< $false
< else
< begin
< $remainder
< @:=
< $y
< mod
< #400
< @;
< if
< #0
< @=
< $remainder
< then
< $ret
< @:=
< $true
< else
< begin
< $remainder
< @:=
< $y
< mod
< #100
< @;
< if
< #0
< @=
< $remainder
< then
< $ret
< @:=
< $false
< else
< $ret
< @:=
< $true
< end
< end
< @;
< $isleapyear
< @:=
< $ret
< end
< @;
< function
< $daysinmonth
< @(
< $m
< @:
< $month
< @;
< $y
< @:
< $integer
< @)
< @:
< $dayofmonth
< @;
< var
< $ret
< @:
< $integer
< @;
< begin
< $writeln
< @(
< 'Entered daysInMonth'
< @)
< @;
< case
< $m
< of
< #9
< @,
< #4
< @,
< #6
< @,
< #11
< @:
< $ret
< @:=
< #30
< @;
< #2
< @:
< if
< $isleapyear
< @(
< $y
< @)
< then
< $ret
< @:=
< #29
< else
< $ret
< @:=
< #28
< @;
< #1
< @,
< #3
< @,
< #5
< @,
< #7
< @,
< #8
< @,
< #10
< @,
< #12
< @:
< $ret
< @:=
< #31
< end
< @;
< $daysinmonth
< @:=
< $ret
< end
< @;
< function
< $datedayofyear
< @(
< $self
< @:
< $date
< @)
< @:
< $integer
< @;
< var
< $m
< @,
< $ret
< @:
< $integer
< @;
< begin
< $writeln
< @(
< 'Entered dateDayOfYear'
< @)
< @;
< $m
< @:=
< $self
< @.
< $m
< @-
< #1
< @;
< $ret
< @:=
< $self
< @.
< $d
< @;
< for
< $m
< @:=
< $m
< downto
< #1
< do
< $ret
< @:=
< $ret
< @+
< $daysinmonth
< @(
< $self
< @.
< $m
< @,
< $self
< @.
< $y
< @)
< @;
< $datedayofyear
< @:=
< $ret
< end
< @;
< procedure
< $dateincrement
< @(
< $self
< @:
< $date
< @)
< @;
< var
< $dim
< @:
< $dayofmonth
< @;
< begin
< $writeln
< @(
< 'Entered dateIncrement'
< @)
< @;
< $dim
< @:=
< $daysinmonth
< @(
< $self
< @.
< $m
< @,
< $self
< @.
< $y
< @)
< @;
< if
< $self
< @.
< $d
< @=
< $dim
< then
< begin
< $self
< @.
< $d
< @:=
< #1
< @;
< if
< $self
< @.
< $m
< @=
< #12
< then
< begin
< $self
< @.
< $y
< @:=
< $self
< @.
< $y
< @+
< #1
< @;
< $self
< @.
< $m
< @:=
< #1
< end
< else
< $self
< @.
< $m
< @:=
< $self
< @.
< $m
< @+
< #1
< @;
< end
< else
< $self
< @.
< $d
< @:=
< $self
< @.
< $d
< @+
< #1
< end
< @;
< function
< $dateequalsdate
< @(
< $self
< @,
< $other
< @:
< $date
< @)
< @:
< $boolean
< @;
< var
< $ret
---
> $(elf
548,559c45
< $boolean
< @;
< begin
< $writeln
< @(
< 'Entered dateEqualsDate'
< @)
< @;
< if
< $self
< @.
< $y
---
> $date)
561,646c47
< $other
< @.
< $y
< then
< if
< $self
< @.
< $m
< @=
< $other
< @.
< $m
< then
< if
< $self
< @.
< $d
< @=
< $other
< @.
< $d
< then
< $ret
< @:=
< $true
< else
< $ret
< @:=
< $false
< else
< $ret
< @:=
< $false
< else
< $ret
< @:=
< $false
< @;
< $dateequalsdate
< @:=
< $ret
< end
< @;
< begin
< $d
< @:=
< $mkdate
< @(
< #2
< @,
< #9
< @,
< #1985
< @)
< @;
< $d
< @.
< $increment
< @;
< $d
< @.
< $y
< @:=
< $d
< @.
< $y
< @+
< #10
< @;
< $d
< @.
< $print
< @;
< $writeln
< @;
< $writeln
< @(
< $d
< @.
< $dayofyear
< @)
< @;
< $writeln
< @(
< $d
< @.
---
> $dateincrement;function
648,955d48
< @(
< $mkdate
< @(
< #2
< @,
< #10
< @,
< #1995
< @)
< @)
< @)
< @;
< $a
< @:=
< $d
< @;
< $d
< @:=
< $narrow
< @(
< $a
< @,
< $date
< @)
< @;
< $write
< @(
< 'ISTYPE '
< @,
< #1
< @)
< @;
< if
< $istype
< @(
< $d
< @,
< $root
< @)
< then
< $writeln
< @(
< ' ok'
< @)
< else
< $writeln
< @(
< ' bad'
< @)
< @;
< $write
< @(
< 'ISTYPE '
< @,
< #2
< @)
< @;
< if
< $istype
< @(
< $d
< @,
< $date
< @)
< then
< $writeln
< @(
< ' ok'
< @)
< else
< $writeln
< @(
< ' bad'
< @)
< @;
< $write
< @(
< 'ISTYPE '
< @,
< #3
< @)
< @;
< if
< $istype
< @(
< $d
< @,
< $anyobject
< @)
< then
< $writeln
< @(
< ' ok'
< @)
< else
< $writeln
< @(
< ' bad'
< @)
< @;
< $write
< @(
< 'ISTYPE '
< @,
< #4
< @)
< @;
< if
< $istype
< @(
< nil
< @,
< $root
< @)
< then
< $writeln
< @(
< ' ok'
< @)
< else
< $writeln
< @(
< ' bad'
< @)
< @;
< $write
< @(
< 'ISTYPE '
< @,
< #5
< @)
< @;
< if
< $istype
< @(
< nil
< @,
< $date
< @)
< then
< $writeln
< @(
< ' ok'
< @)
< else
< $writeln
< @(
< ' bad'
< @)
< @;
< $write
< @(
< 'ISTYPE '
< @,
< #6
< @)
< @;
< if
< $istype
< @(
< nil
< @,
< $anyobject
< @)
< then
< $writeln
< @(
< ' ok'
< @)
< else
< $writeln
< @(
< ' bad'
< @)
< @;
< $a
< @:=
< $narrow
< @(
< nil
< @,
< $anyobject
< @)
< @;
< $writeln
< @(
< 'should get here: NARROW(NIL, AnyObject)'
< @)
< @;
< $a
< @:=
< $narrow
< @(
< nil
< @,
< $date
< @)
< @;
< $writeln
< @(
< 'should get here: NARROW(NIL, Date)'
< @)
< @;
< $r
< @:=
< $new
< @(
< $root
< @)
< @;
< $write
< @(
< 'ISTYPE '
< @,
< #7
< @)
< @;
< if
< $istype
< @(
< $r
< @,
< $root
< @)
< then
< $writeln
< @(
< ' ok'
< @)
< else
< $writeln
< @(
< ' bad'
< @)
< @;
< $write
< @(
< 'ISTYPE '
< @,
< #8
< @)
< @;
< if
< $istype
< @(
< $r
< @,
< $date
< @)
< then
< $writeln
< @(
< ' bad'
< @)
< else
< $writeln
< @(
< ' ok'
< @)
< @;
< $write
< @(
< 'ISTYPE '
< @,
< #9
< @)
< @;
< if
< $istype
< @(
< $r
< @,
< $anyobject
< @)
< then
< $writeln
< @(
< ' bad'
< @)
< else
< $writeln
< @(
< ' ok'
< @)
< @;
< $writeln
< @(
< 'got here, now should fail at NARROW(r, Date)'
< @)
< @;
< $d
< @:=
< $narrow
< @(
< $r
< @,
< $date
< @)
< @;
< $writeln
< @(
< 'should not get here'
< @)
< @;
< end
< @.
< EOF
< EOF


testobject2.err:
0a1,9
> Exception occurred:
> java.lang.IllegalStateException: Operator was not found in the operator table: integer;
> 	at MPC.TokenOp.get(TokenOp.java:89)
> 	at MPC.MPCScanner.next_token(MPCScanner.java:498)
> 	at java_cup.runtime.lr_parser.scan(lr_parser.java:349)
> 	at java_cup.runtime.lr_parser.parse(lr_parser.java:578)
> 	at MPC.Parse.perform(Parse.java:45)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testobject2.token:
2,4c2
< $testobject2
< @;
< type
---
> $testobject2;type
7,19c5
< object
< @;
< $object2
< @=
< object
< $a
< @:
< $integer
< @;
< methods
< end
< @;
< $object3
---
> $object;object2
24,70d9
< $integer
< @;
< overrides
< $myprint
< @=
< $obj3print
< end
< @;
< var
< $o1
< @:
< $object1
< @;
< $o2
< @:
< $object2
< @;
< $o3
< @:
< $object3
< @;
< begin
< $o1
< @:=
< $new
< @(
< $object1
< @)
< @;
< $o2
< @:=
< $new
< @(
< $object2
< @)
< @;
< $o3
< @:=
< $new
< @(
< $object3
< @)
< @;
< end
< @.
< EOF
< EOF


testobject3.err:
0a1,9
> Exception occurred:
> java.lang.IllegalStateException: Operator was not found in the operator table: object1;
> 	at MPC.TokenOp.get(TokenOp.java:89)
> 	at MPC.MPCScanner.next_token(MPCScanner.java:498)
> 	at java_cup.runtime.lr_parser.scan(lr_parser.java:349)
> 	at java_cup.runtime.lr_parser.parse(lr_parser.java:578)
> 	at MPC.Parse.perform(Parse.java:45)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testobject3.token:
2,4c2
< $testobject3
< @;
< type
---
> $testobject3;type
12,13c10
< @(
< $self
---
> $(elf
15,459d11
< $object1
< @;
< $x
< @:
< $integer
< @)
< @;
< end
< @;
< $object2
< @=
< $object3
< object
< overrides
< $method
< @=
< $object2method
< end
< @;
< $object3
< @=
< object
< $x
< @:
< $integer
< methods
< procedure
< $method
< @(
< $self
< @:
< $object3
< @)
< @=
< $object3method
< @;
< end
< @;
< $object4
< @=
< object
< $x
< @:
< $integer
< @;
< methods
< function
< $multiply
< @(
< $self
< @:
< $object4
< @;
< $x
< @:
< $integer
< @)
< @:
< $object4
< @;
< end
< @;
< $object5
< @=
< $object4
< object
< overrides
< $multiply
< @=
< $object5multiply
< end
< @;
< $object6
< @=
< $object4
< abstract
< object
< overrides
< $multiply
< @=
< $object6multiply
< end
< @;
< $object7
< @=
< $object6
< object
< methods
< function
< $add
< @(
< $self
< @:
< $object7
< @;
< var
< $x
< @:
< $integer
< @)
< @:
< $object7
< @=
< $object7add
< @;
< end
< @;
< var
< $o1
< @:
< $object1
< @;
< $o2
< @:
< $object2
< @;
< $o3
< @:
< $object3
< @;
< $o4
< @:
< $object4
< @;
< $o5
< @:
< $object5
< @;
< $o6
< @:
< $object6
< @;
< $o7
< @:
< $object7
< @;
< procedure
< $object2method
< @(
< $self
< @:
< $object2
< @)
< @;
< begin
< $writeln
< @(
< $self
< @.
< $x
< @)
< @;
< end
< @;
< function
< $object3method
< @(
< $x
< @:
< $integer
< @)
< @:
< $integer
< @;
< begin
< $object3method
< @:=
< #2
< @*
< $x
< @;
< end
< @;
< function
< $object5multiply
< @(
< $self
< @:
< $object5
< @;
< $x
< @:
< $integer
< @)
< @:
< $integer
< @;
< begin
< $object5multiply
< @:=
< $self
< @.
< $x
< @*
< $x
< @;
< end
< @;
< function
< $object6multiply
< @(
< $self
< @:
< $object7
< @;
< $x
< @:
< $integer
< @)
< @:
< $object6
< @;
< var
< $obj
< @:
< $object6
< @;
< begin
< $obj
< @:=
< $new
< @(
< $object7
< @)
< @;
< $obj
< @.
< $x
< @:=
< $self
< @.
< $x
< @*
< $x
< @;
< $object6multiply
< @:=
< $obj
< @;
< end
< @;
< function
< $object7add
< @(
< $self
< @:
< $object7
< @;
< $x
< @:
< $integer
< @)
< @:
< $object7
< @;
< var
< $obj
< @:
< $object7
< @;
< begin
< $obj
< @:=
< $new
< @(
< $object7
< @)
< @;
< $obj
< @.
< $x
< @:=
< $self
< @.
< $x
< @+
< $x
< @;
< $object7add
< @:=
< $obj
< end
< @;
< begin
< $o4
< @:=
< $new
< @(
< $object4
< @)
< @;
< $writeln
< @(
< $o4
< @^
< @.
< $x
< @)
< @;
< $o6
< @:=
< $new
< @(
< $object6
< @)
< @;
< $new
< @(
< $o6
< @)
< @;
< $o6
< @:=
< $o4
< @;
< $o4
< @:=
< $o6
< @;
< $o4
< @:=
< $o4
< @;
< if
< $istype
< @(
< $o4
< @)
< then
< $writeln
< @;
< if
< $istype
< @(
< $o4
< @,
< $object4
< @,
< #3
< @)
< then
< $writeln
< @;
< if
< $istype
< @(
< $o4
< @,
< $integer
< @)
< then
< $writeln
< @;
< if
< $istype
< @(
< $o4
< @,
< $object4
< @)
< then
< $writeln
< @;
< if
< $istype
< @(
< #35
< @,
< $object4
< @)
< then
< $writeln
< @;
< if
< $istype
< @(
< nil
< @,
< $object4
< @)
< then
< $writeln
< @;
< $o4
< @:=
< $narrow
< @(
< $o4
< @)
< @;
< $o4
< @:=
< $narrow
< @(
< $o4
< @,
< $object4
< @,
< #3
< @)
< @;
< $o4
< @:=
< $narrow
< @(
< $o4
< @,
< $integer
< @)
< @;
< $o4
< @:=
< $narrow
< @(
< $o4
< @,
< $object4
< @)
< @;
< $o4
< @:=
< $narrow
< @(
< #35
< @,
< $object4
< @)
< @;
< $o4
< @:=
< $narrow
< @(
< nil
< @,
< $object4
< @)
< @;
< $o4
< @:=
< nil
< @;
< end
< @.
< EOF
< EOF


testobject4.err:
0a1,9
> Exception occurred:
> java.lang.IllegalStateException: Operator was not found in the operator table: hasequals;
> 	at MPC.TokenOp.get(TokenOp.java:89)
> 	at MPC.MPCScanner.next_token(MPCScanner.java:498)
> 	at java_cup.runtime.lr_parser.scan(lr_parser.java:349)
> 	at java_cup.runtime.lr_parser.parse(lr_parser.java:578)
> 	at MPC.Parse.perform(Parse.java:45)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testobject4.token:
2,4c2
< $testobject4
< @;
< type
---
> $testobject4;type
12,13c10
< @(
< $self
---
> $(elf
15,4618d11
< $hasequals
< @;
< $other
< @:
< $root
< @)
< @:
< $boolean
< @;
< end
< @;
< $iterator
< @=
< abstract
< object
< methods
< function
< $next
< @(
< $self
< @:
< $iterator
< @)
< @:
< $root
< @;
< function
< $hasnext
< @(
< $self
< @:
< $iterator
< @)
< @:
< $boolean
< @;
< procedure
< $remove
< @(
< $self
< @:
< $iterator
< @)
< @;
< end
< @;
< $iterable
< @=
< abstract
< object
< methods
< function
< $getiterator
< @(
< $self
< @:
< $iterable
< @)
< @:
< $iterator
< @;
< end
< @;
< $collection
< @=
< $iterable
< abstract
< object
< methods
< function
< $size
< @(
< $self
< @:
< $collection
< @)
< @:
< $integer
< @;
< function
< $isempty
< @(
< $self
< @:
< $collection
< @)
< @:
< $boolean
< @;
< function
< $contains
< @(
< $self
< @:
< $collection
< @;
< $o
< @:
< $hasequals
< @)
< @:
< $boolean
< @;
< function
< $add
< @(
< $self
< @:
< $collection
< @;
< $o
< @:
< $hasequals
< @)
< @:
< $boolean
< @;
< function
< $remove
< @(
< $self
< @:
< $collection
< @;
< $o
< @:
< $hasequals
< @)
< @:
< $boolean
< @;
< procedure
< $clear
< @(
< $self
< @:
< $collection
< @)
< @;
< function
< $addall
< @(
< $self
< @,
< $other
< @:
< $collection
< @)
< @:
< $boolean
< @;
< function
< $containsall
< @(
< $self
< @,
< $other
< @:
< $collection
< @)
< @:
< $boolean
< @;
< function
< $equals
< @(
< $self
< @,
< $other
< @:
< $collection
< @)
< @:
< $boolean
< @;
< function
< $removeall
< @(
< $self
< @,
< $other
< @:
< $collection
< @)
< @:
< $boolean
< @;
< function
< $retainall
< @(
< $self
< @,
< $other
< @:
< $collection
< @)
< @:
< $boolean
< @;
< end
< @;
< type
< $abscoll
< @=
< $collection
< abstract
< object
< overrides
< $isempty
< @=
< $acisempty
< @;
< $contains
< @=
< $accontains
< @;
< $clear
< @=
< $acclear
< @;
< $addall
< @=
< $acaddall
< @;
< $containsall
< @=
< $accontainsall
< @;
< $removeall
< @=
< $acremoveall
< @;
< $retainall
< @=
< $acretainall
< @;
< end
< @;
< function
< $acisempty
< @(
< $self
< @:
< $abscoll
< @)
< @:
< $boolean
< @;
< begin
< $acisempty
< @:=
< @(
< $self
< @.
< $size
< @=
< #0
< @)
< @;
< end
< @;
< function
< $accontains
< @(
< $self
< @:
< $abscoll
< @;
< $item
< @:
< $hasequals
< @)
< @:
< $boolean
< @;
< var
< $it
< @:
< $iterator
< @;
< $searching
< @:
< $boolean
< @;
< begin
< $accontains
< @:=
< $false
< @;
< $searching
< @:=
< $true
< @;
< $it
< @:=
< $self
< @.
< $getiterator
< @;
< while
< $searching
< do
< begin
< if
< $it
< @.
< $hasnext
< then
< begin
< if
< $narrow
< @(
< $it
< @.
< $next
< @,
< $hasequals
< @)
< @.
< $equals
< @(
< $item
< @)
< then
< begin
< $accontains
< @:=
< $true
< @;
< $searching
< @:=
< $false
< @;
< end
< @;
< end
< else
< begin
< $searching
< @:=
< $false
< @;
< end
< @;
< end
< @;
< end
< @;
< procedure
< $acclear
< @(
< $self
< @:
< $abscoll
< @)
< @;
< var
< $it
< @:
< $iterator
< @;
< $o
< @:
< $root
< @;
< begin
< $it
< @:=
< $self
< @.
< $getiterator
< @;
< while
< $it
< @.
< $hasnext
< do
< begin
< $o
< @:=
< $it
< @.
< $next
< @;
< $it
< @.
< $remove
< @;
< end
< @;
< end
< @;
< function
< $acaddall
< @(
< $self
< @:
< $abscoll
< @;
< $other
< @:
< $collection
< @)
< @:
< $boolean
< @;
< var
< $it
< @:
< $iterator
< @;
< begin
< $it
< @:=
< $other
< @.
< $getiterator
< @;
< $acaddall
< @:=
< $false
< @;
< while
< $it
< @.
< $hasnext
< do
< begin
< if
< $self
< @.
< $add
< @(
< $narrow
< @(
< $it
< @.
< $next
< @,
< $hasequals
< @)
< @)
< then
< begin
< $acaddall
< @:=
< $true
< @;
< end
< @;
< end
< @;
< end
< @;
< function
< $accontainsall
< @(
< $self
< @:
< $abscoll
< @;
< $other
< @:
< $collection
< @)
< @:
< $boolean
< @;
< var
< $it
< @:
< $iterator
< @;
< $searching
< @:
< $boolean
< @;
< begin
< $accontainsall
< @:=
< $true
< @;
< $searching
< @:=
< $true
< @;
< $it
< @:=
< $other
< @.
< $getiterator
< @;
< while
< $searching
< do
< begin
< if
< $it
< @.
< $hasnext
< then
< begin
< if
< not
< $self
< @.
< $contains
< @(
< $narrow
< @(
< $it
< @.
< $next
< @,
< $hasequals
< @)
< @)
< then
< begin
< $accontainsall
< @:=
< $false
< @;
< $searching
< @:=
< $false
< @;
< end
< @;
< end
< @;
< end
< @;
< end
< @;
< function
< $acremoveall
< @(
< $self
< @:
< $abscoll
< @;
< $other
< @:
< $collection
< @)
< @:
< $boolean
< @;
< var
< $it
< @:
< $iterator
< @;
< begin
< $it
< @:=
< $other
< @.
< $getiterator
< @;
< $acremoveall
< @:=
< $false
< @;
< while
< $it
< @.
< $hasnext
< do
< begin
< if
< $self
< @.
< $remove
< @(
< $narrow
< @(
< $it
< @.
< $next
< @,
< $hasequals
< @)
< @)
< then
< begin
< $acremoveall
< @:=
< $true
< @;
< end
< @;
< end
< @;
< end
< @;
< function
< $acretainall
< @(
< $self
< @:
< $abscoll
< @;
< $other
< @:
< $collection
< @)
< @:
< $boolean
< @;
< var
< $it
< @:
< $iterator
< @;
< begin
< $it
< @:=
< $self
< @.
< $getiterator
< @;
< $acretainall
< @:=
< $false
< @;
< while
< $it
< @.
< $hasnext
< do
< begin
< if
< not
< $other
< @.
< $contains
< @(
< $narrow
< @(
< $it
< @.
< $next
< @,
< $hasequals
< @)
< @)
< then
< begin
< $it
< @.
< $remove
< @;
< $acretainall
< @:=
< $true
< @;
< end
< @;
< end
< @;
< end
< @;
< type
< $listiterator
< @=
< $iterator
< abstract
< object
< methods
< procedure
< $add
< @(
< $self
< @:
< $listiterator
< @;
< $o
< @:
< $root
< @)
< @;
< procedure
< $set
< @(
< $self
< @:
< $listiterator
< @;
< $o
< @:
< $root
< @)
< @;
< function
< $nextindex
< @(
< $self
< @:
< $listiterator
< @)
< @:
< $integer
< @;
< function
< $hasprevious
< @(
< $self
< @:
< $listiterator
< @)
< @:
< $boolean
< @;
< function
< $previous
< @(
< $self
< @:
< $listiterator
< @)
< @:
< $root
< @;
< function
< $previousindex
< @(
< $self
< @:
< $listiterator
< @)
< @:
< $integer
< @;
< end
< @;
< $abslist
< @=
< $abscoll
< abstract
< object
< methods
< function
< $addith
< @(
< $self
< @:
< $abslist
< @;
< $index
< @:
< $integer
< @;
< $o
< @:
< $hasequals
< @)
< @:
< $boolean
< @;
< function
< $getith
< @(
< $self
< @:
< $abslist
< @;
< $index
< @:
< $integer
< @)
< @:
< $hasequals
< @;
< function
< $removeith
< @(
< $self
< @:
< $abslist
< @;
< $index
< @:
< $integer
< @)
< @:
< $boolean
< @;
< function
< $setith
< @(
< $self
< @:
< $abslist
< @;
< $index
< @:
< $integer
< @;
< $o
< @:
< $hasequals
< @)
< @:
< $hasequals
< @;
< function
< $indexof
< @(
< $self
< @:
< $abslist
< @;
< $o
< @:
< $hasequals
< @)
< @:
< $integer
< @=
< $alindexof
< @;
< function
< $lastindexof
< @(
< $self
< @:
< $abslist
< @;
< $o
< @:
< $hasequals
< @)
< @:
< $integer
< @=
< $allastindexof
< @;
< function
< $getlistiterator
< @(
< $self
< @:
< $abslist
< @)
< @:
< $listiterator
< @=
< $algetlistiterator
< @;
< function
< $getlistiteratorith
< @(
< $self
< @:
< $abslist
< @;
< $index
< @:
< $integer
< @)
< @:
< $listiterator
< @=
< $algetlistiteratorith
< @;
< function
< $removerange
< @(
< $self
< @:
< $abslist
< @;
< $fromindex
< @,
< $toindex
< @:
< $integer
< @)
< @:
< $boolean
< @=
< $alremoverange
< @;
< function
< $addallith
< @(
< $self
< @:
< $abslist
< @;
< $index
< @:
< $integer
< @;
< $other
< @:
< $collection
< @)
< @:
< $boolean
< @=
< $aladdallith
< @;
< overrides
< $add
< @=
< $aladd
< @;
< $clear
< @=
< $alclear
< @;
< $equals
< @=
< $alequals
< @;
< $getiterator
< @=
< $algetiterator
< @;
< end
< @;
< $alitr
< @=
< $iterator
< object
< $cursor
< @:
< $integer
< @;
< $lastret
< @:
< $integer
< @;
< $thelist
< @:
< $abslist
< @;
< methods
< function
< $init
< @(
< $self
< @:
< $alitr
< @;
< $lst
< @:
< $abslist
< @)
< @:
< $alitr
< @=
< $aliinit
< @;
< overrides
< $hasnext
< @=
< $alihasnext
< @;
< $next
< @=
< $alinext
< @;
< $remove
< @=
< $aliremove
< @;
< end
< @;
< $allstitr
< @=
< $listiterator
< object
< $cursor
< @:
< $integer
< @;
< $lastret
< @:
< $integer
< @;
< $thelist
< @:
< $abslist
< @;
< methods
< function
< $init
< @(
< $self
< @:
< $allstitr
< @;
< $index
< @:
< $integer
< @;
< $lst
< @:
< $abslist
< @)
< @:
< $allstitr
< @=
< $alliinit
< @;
< overrides
< $hasnext
< @=
< $allihasnext
< @;
< $next
< @=
< $allinext
< @;
< $nextindex
< @=
< $allinextindex
< @;
< $hasprevious
< @=
< $allihasprevious
< @;
< $previous
< @=
< $alliprevious
< @;
< $previousindex
< @=
< $allipreviousindex
< @;
< $set
< @=
< $alliset
< @;
< $add
< @=
< $alliadd
< @;
< $remove
< @=
< $alliremove
< @;
< end
< @;
< function
< $aladd
< @(
< $self
< @:
< $abslist
< @;
< $o
< @:
< $hasequals
< @)
< @:
< $boolean
< @;
< begin
< $aladd
< @:=
< $self
< @.
< $addith
< @(
< $self
< @.
< $size
< @,
< $o
< @)
< @;
< end
< @;
< function
< $alindexof
< @(
< $self
< @:
< $abslist
< @;
< $o
< @:
< $hasequals
< @)
< @:
< $integer
< @;
< var
< $it
< @:
< $listiterator
< @;
< $searching
< @:
< $boolean
< @;
< begin
< $it
< @:=
< $self
< @.
< $getlistiterator
< @;
< $alindexof
< @:=
< @-
< #1
< @;
< $searching
< @:=
< $true
< @;
< while
< $searching
< do
< begin
< if
< $it
< @.
< $hasnext
< then
< begin
< if
< $o
< @.
< $equals
< @(
< $it
< @.
< $next
< @)
< then
< begin
< $alindexof
< @:=
< $it
< @.
< $previousindex
< @;
< $searching
< @:=
< $false
< @;
< end
< @;
< end
< else
< begin
< $searching
< @:=
< $false
< @;
< end
< @;
< end
< @;
< end
< @;
< function
< $allastindexof
< @(
< $self
< @:
< $abslist
< @;
< $o
< @:
< $hasequals
< @)
< @:
< $integer
< @;
< var
< $it
< @:
< $listiterator
< @;
< $searching
< @:
< $boolean
< @;
< begin
< $it
< @:=
< $self
< @.
< $getlistiteratorith
< @(
< $self
< @.
< $size
< @)
< @;
< $allastindexof
< @:=
< @-
< #1
< @;
< $searching
< @:=
< $true
< @;
< while
< $searching
< do
< begin
< if
< $it
< @.
< $hasprevious
< then
< begin
< if
< $o
< @.
< $equals
< @(
< $it
< @.
< $previous
< @)
< then
< begin
< $allastindexof
< @:=
< $it
< @.
< $nextindex
< @;
< $searching
< @:=
< $false
< @;
< end
< @;
< end
< else
< begin
< $searching
< @:=
< $false
< @;
< end
< @;
< end
< @;
< end
< @;
< procedure
< $alclear
< @(
< $self
< @:
< $abslist
< @)
< @;
< var
< $b
< @:
< $boolean
< @;
< begin
< $b
< @:=
< $self
< @.
< $removerange
< @(
< #0
< @,
< $self
< @.
< $size
< @)
< @;
< end
< @;
< function
< $aladdallith
< @(
< $self
< @:
< $abslist
< @;
< $index
< @:
< $integer
< @;
< $other
< @:
< $collection
< @)
< @:
< $boolean
< @;
< var
< $it
< @:
< $iterator
< @;
< $b
< @:
< $boolean
< @;
< begin
< $aladdallith
< @:=
< $false
< @;
< if
< @(
< $index
< @>=
< #0
< @)
< and
< @(
< $index
< @<=
< $self
< @.
< $size
< @)
< then
< begin
< $it
< @:=
< $other
< @.
< $getiterator
< @;
< while
< $it
< @.
< $hasnext
< do
< begin
< $b
< @:=
< $self
< @.
< $addith
< @(
< $index
< @,
< $narrow
< @(
< $it
< @.
< $next
< @,
< $hasequals
< @)
< @)
< @;
< $index
< @:=
< $index
< @+
< #1
< @;
< $aladdallith
< @:=
< $true
< @;
< end
< @;
< end
< @;
< end
< @;
< function
< $algetiterator
< @(
< $self
< @:
< $abslist
< @)
< @:
< $iterator
< @;
< begin
< $algetiterator
< @:=
< $new
< @(
< $alitr
< @)
< @.
< $init
< @(
< $self
< @)
< @;
< end
< @;
< function
< $algetlistiterator
< @(
< $self
< @:
< $abslist
< @)
< @:
< $listiterator
< @;
< begin
< $algetlistiterator
< @:=
< $self
< @.
< $getlistiteratorith
< @(
< #0
< @)
< @;
< end
< @;
< function
< $algetlistiteratorith
< @(
< $self
< @:
< $abslist
< @;
< $index
< @:
< $integer
< @)
< @:
< $listiterator
< @;
< begin
< $algetlistiteratorith
< @:=
< $new
< @(
< $allstitr
< @)
< @.
< $init
< @(
< $index
< @,
< $self
< @)
< @;
< end
< @;
< function
< $alremoverange
< @(
< $self
< @:
< $abslist
< @;
< $fromindex
< @,
< $toindex
< @:
< $integer
< @)
< @:
< $boolean
< @;
< var
< $it
< @:
< $listiterator
< @;
< $i
< @:
< $integer
< @;
< $o
< @:
< $root
< @;
< begin
< $it
< @:=
< $self
< @.
< $getlistiteratorith
< @(
< $fromindex
< @)
< @;
< for
< $i
< @:=
< #0
< to
< @(
< $toindex
< @-
< $fromindex
< @-
< #1
< @)
< do
< begin
< $o
< @:=
< $it
< @.
< $next
< @;
< $it
< @.
< $remove
< @;
< end
< @;
< end
< @;
< function
< $alequals
< @(
< $self
< @:
< $abslist
< @;
< $other
< @:
< $collection
< @)
< @:
< $boolean
< @;
< var
< $it1
< @,
< $it2
< @:
< $iterator
< @;
< $searching
< @:
< $boolean
< @;
< $o1
< @,
< $o2
< @:
< $hasequals
< @;
< begin
< if
< $self
< @=
< $other
< then
< begin
< $alequals
< @:=
< $true
< @;
< end
< else
< if
< not
< $istype
< @(
< $other
< @,
< $abslist
< @)
< then
< begin
< $alequals
< @:=
< $false
< @;
< end
< else
< begin
< $it1
< @:=
< $self
< @.
< $getiterator
< @;
< $it2
< @:=
< $other
< @.
< $getiterator
< @;
< $searching
< @:=
< $true
< @;
< $alequals
< @:=
< $true
< @;
< while
< $searching
< do
< begin
< if
< $it1
< @.
< $hasnext
< and
< $it2
< @.
< $hasnext
< then
< begin
< $o1
< @:=
< $narrow
< @(
< $it1
< @.
< $next
< @,
< $hasequals
< @)
< @;
< $o2
< @:=
< $narrow
< @(
< $it2
< @.
< $next
< @,
< $hasequals
< @)
< @;
< if
< not
< $o1
< @.
< $equals
< @(
< $o2
< @)
< then
< begin
< $alequals
< @:=
< $false
< @;
< $searching
< @:=
< $false
< @;
< end
< @;
< end
< else
< begin
< $searching
< @:=
< $false
< @;
< end
< @;
< end
< @;
< if
< $it1
< @.
< $hasnext
< or
< $it2
< @.
< $hasnext
< then
< begin
< $alequals
< @:=
< $false
< @;
< end
< @;
< end
< @;
< end
< @;
< function
< $aliinit
< @(
< $self
< @:
< $alitr
< @;
< $lst
< @:
< $abslist
< @)
< @:
< $alitr
< @;
< begin
< $self
< @.
< $cursor
< @:=
< #0
< @;
< $self
< @.
< $lastret
< @:=
< @-
< #1
< @;
< $self
< @.
< $thelist
< @:=
< $lst
< @;
< $aliinit
< @:=
< $self
< @;
< end
< @;
< function
< $alihasnext
< @(
< $self
< @:
< $alitr
< @)
< @:
< $boolean
< @;
< begin
< $alihasnext
< @:=
< @(
< $self
< @.
< $cursor
< @<>
< $self
< @.
< $thelist
< @.
< $size
< @)
< @;
< end
< @;
< function
< $alinext
< @(
< $self
< @:
< $alitr
< @)
< @:
< $root
< @;
< begin
< if
< $self
< @.
< $cursor
< @>=
< $self
< @.
< $thelist
< @.
< $size
< then
< begin
< $alinext
< @:=
< nil
< @;
< end
< else
< begin
< $alinext
< @:=
< $self
< @.
< $thelist
< @.
< $getith
< @(
< $self
< @.
< $cursor
< @)
< @;
< $self
< @.
< $lastret
< @:=
< $self
< @.
< $cursor
< @;
< $self
< @.
< $cursor
< @:=
< $self
< @.
< $cursor
< @+
< #1
< @;
< end
< @;
< end
< @;
< procedure
< $aliremove
< @(
< $self
< @:
< $alitr
< @)
< @;
< var
< $b
< @:
< $boolean
< @;
< begin
< if
< $self
< @.
< $lastret
< @>=
< #0
< then
< begin
< $b
< @:=
< $self
< @.
< $thelist
< @.
< $removeith
< @(
< $self
< @.
< $lastret
< @)
< @;
< if
< $self
< @.
< $lastret
< @<
< $self
< @.
< $cursor
< then
< begin
< $self
< @.
< $cursor
< @:=
< $self
< @.
< $cursor
< @-
< #1
< @;
< end
< @;
< $self
< @.
< $lastret
< @:=
< @-
< #1
< @;
< end
< @;
< end
< @;
< function
< $alliinit
< @(
< $self
< @:
< $allstitr
< @;
< $index
< @:
< $integer
< @;
< $lst
< @:
< $abslist
< @)
< @:
< $allstitr
< @;
< begin
< $self
< @.
< $cursor
< @:=
< $index
< @;
< $self
< @.
< $lastret
< @:=
< @-
< #1
< @;
< $self
< @.
< $thelist
< @:=
< $lst
< @;
< $alliinit
< @:=
< $self
< @;
< end
< @;
< function
< $allihasnext
< @(
< $self
< @:
< $allstitr
< @)
< @:
< $boolean
< @;
< begin
< $allihasnext
< @:=
< @(
< $self
< @.
< $cursor
< @<>
< $self
< @.
< $thelist
< @.
< $size
< @)
< @;
< end
< @;
< function
< $allinext
< @(
< $self
< @:
< $allstitr
< @)
< @:
< $root
< @;
< begin
< if
< $self
< @.
< $cursor
< @>=
< $self
< @.
< $thelist
< @.
< $size
< then
< begin
< $allinext
< @:=
< nil
< @;
< end
< else
< begin
< $allinext
< @:=
< $self
< @.
< $thelist
< @.
< $getith
< @(
< $self
< @.
< $cursor
< @)
< @;
< $self
< @.
< $lastret
< @:=
< $self
< @.
< $cursor
< @;
< $self
< @.
< $cursor
< @:=
< $self
< @.
< $cursor
< @+
< #1
< @;
< end
< @;
< end
< @;
< function
< $allinextindex
< @(
< $self
< @:
< $allstitr
< @)
< @:
< $integer
< @;
< begin
< $allinextindex
< @:=
< $self
< @.
< $cursor
< @;
< end
< @;
< function
< $allihasprevious
< @(
< $self
< @:
< $allstitr
< @)
< @:
< $boolean
< @;
< begin
< $allihasprevious
< @:=
< @(
< $self
< @.
< $cursor
< @<>
< #0
< @)
< @;
< end
< @;
< function
< $alliprevious
< @(
< $self
< @:
< $allstitr
< @)
< @:
< $root
< @;
< begin
< if
< $self
< @.
< $cursor
< @<=
< #0
< then
< begin
< $alliprevious
< @:=
< nil
< @;
< end
< else
< begin
< $self
< @.
< $cursor
< @:=
< $self
< @.
< $cursor
< @-
< #1
< @;
< $self
< @.
< $lastret
< @:=
< $self
< @.
< $cursor
< @;
< $alliprevious
< @:=
< $self
< @.
< $thelist
< @.
< $getith
< @(
< $self
< @.
< $cursor
< @)
< @;
< end
< @;
< end
< @;
< function
< $allipreviousindex
< @(
< $self
< @:
< $allstitr
< @)
< @:
< $integer
< @;
< begin
< $allipreviousindex
< @:=
< $self
< @.
< $cursor
< @-
< #1
< @;
< end
< @;
< procedure
< $alliset
< @(
< $self
< @:
< $allstitr
< @;
< $o
< @:
< $hasequals
< @)
< @;
< var
< $oo
< @:
< $hasequals
< @;
< begin
< if
< $self
< @.
< $lastret
< @>=
< #0
< then
< begin
< $oo
< @:=
< $self
< @.
< $thelist
< @.
< $setith
< @(
< $self
< @.
< $lastret
< @,
< $o
< @)
< @;
< end
< @;
< end
< @;
< procedure
< $alliadd
< @(
< $self
< @:
< $allstitr
< @;
< $o
< @:
< $hasequals
< @)
< @;
< var
< $b
< @:
< $boolean
< @;
< begin
< if
< @(
< $self
< @.
< $cursor
< @>=
< #0
< @)
< and
< @(
< $self
< @.
< $cursor
< @<=
< $self
< @.
< $thelist
< @.
< $size
< @)
< then
< begin
< $b
< @:=
< $self
< @.
< $thelist
< @.
< $addith
< @(
< $self
< @.
< $cursor
< @,
< $o
< @)
< @;
< $self
< @.
< $lastret
< @:=
< @-
< #1
< @;
< $self
< @.
< $cursor
< @:=
< $self
< @.
< $cursor
< @+
< #1
< @;
< end
< @;
< end
< @;
< procedure
< $alliremove
< @(
< $self
< @:
< $allstitr
< @)
< @;
< var
< $oo
< @:
< $hasequals
< @;
< $b
< @:
< $boolean
< @;
< begin
< if
< $self
< @.
< $lastret
< @>=
< #0
< then
< begin
< $b
< @:=
< $self
< @.
< $thelist
< @.
< $removeith
< @(
< $self
< @.
< $lastret
< @)
< @;
< if
< $self
< @.
< $lastret
< @<
< $self
< @.
< $cursor
< then
< begin
< $self
< @.
< $cursor
< @:=
< $self
< @.
< $cursor
< @-
< #1
< @;
< end
< @;
< $self
< @.
< $lastret
< @:=
< @-
< #1
< @;
< end
< @;
< end
< @;
< type
< $llentry
< @=
< object
< $element
< @:
< $hasequals
< @;
< $next
< @:
< $llentry
< @;
< $previous
< @:
< $llentry
< @;
< methods
< function
< $init
< @(
< $self
< @:
< $llentry
< @;
< $element
< @:
< $hasequals
< @;
< $next
< @,
< $previous
< @:
< $llentry
< @)
< @:
< $llentry
< @=
< $lleinit
< @;
< end
< @;
< $linkedlist
< @=
< $abslist
< object
< $header
< @:
< $llentry
< @;
< $mysize
< @:
< $integer
< @;
< methods
< function
< $init
< @(
< $self
< @:
< $linkedlist
< @)
< @:
< $linkedlist
< @=
< $llinit
< @;
< function
< $getfirst
< @(
< $self
< @:
< $linkedlist
< @)
< @:
< $hasequals
< @=
< $llgetfirst
< @;
< function
< $getlast
< @(
< $self
< @:
< $linkedlist
< @)
< @:
< $hasequals
< @=
< $llgetlast
< @;
< function
< $removefirst
< @(
< $self
< @:
< $linkedlist
< @)
< @:
< $hasequals
< @=
< $llremovefirst
< @;
< function
< $removelast
< @(
< $self
< @:
< $linkedlist
< @)
< @:
< $hasequals
< @=
< $llremovelast
< @;
< function
< $removeentry
< @(
< $self
< @:
< $linkedlist
< @;
< $entry
< @:
< $llentry
< @)
< @:
< $hasequals
< @=
< $llremoveentry
< @;
< procedure
< $addfirst
< @(
< $self
< @:
< $linkedlist
< @)
< @=
< $lladdfirst
< @;
< procedure
< $addlast
< @(
< $self
< @:
< $linkedlist
< @)
< @=
< $lladdlast
< @;
< procedure
< $addbeforeentry
< @(
< $self
< @:
< $linkedlist
< @;
< $e
< @:
< $hasequals
< @;
< $entry
< @:
< $llentry
< @)
< @=
< $lladdbeforeentry
< @;
< function
< $entryith
< @(
< $self
< @:
< $linkedlist
< @;
< $index
< @:
< $integer
< @)
< @:
< $llentry
< @=
< $llentryith
< @;
< overrides
< $contains
< @=
< $llcontains
< @;
< $size
< @=
< $llsize
< @;
< $add
< @=
< $lladd
< @;
< $remove
< @=
< $llremove
< @;
< $addall
< @=
< $lladdall
< @;
< $addallith
< @=
< $lladdallith
< @;
< $clear
< @=
< $llclear
< @;
< $getith
< @=
< $llgetith
< @;
< $setith
< @=
< $llsetith
< @;
< $addith
< @=
< $lladdith
< @;
< $removeith
< @=
< $llremoveith
< @;
< $indexof
< @=
< $llindexof
< @;
< $lastindexof
< @=
< $lllastindexof
< @;
< $getlistiteratorith
< @=
< $llgetlistiteratorith
< @;
< end
< @;
< $lllstitr
< @=
< $listiterator
< object
< $lastreturned
< @:
< $llentry
< @;
< $nextent
< @:
< $llentry
< @;
< $nextidx
< @:
< $integer
< @;
< $thelist
< @:
< $linkedlist
< @;
< methods
< function
< $init
< @(
< $self
< @:
< $lllstitr
< @;
< $lst
< @:
< $linkedlist
< @;
< $index
< @:
< $integer
< @)
< @:
< $lllstitr
< @=
< $llliinit
< @;
< overrides
< $hasnext
< @=
< $lllihasnext
< @;
< $next
< @=
< $lllinext
< @;
< $nextindex
< @=
< $lllinextindex
< @;
< $hasprevious
< @=
< $lllihasprevious
< @;
< $previous
< @=
< $llliprevious
< @;
< $previousindex
< @=
< $lllipreviousindex
< @;
< $remove
< @=
< $llliremove
< @;
< $set
< @=
< $llliset
< @;
< $add
< @=
< $llliadd
< @;
< end
< @;
< function
< $lleinit
< @(
< $self
< @:
< $llentry
< @;
< $element
< @:
< $hasequals
< @;
< $next
< @,
< $previous
< @:
< $llentry
< @)
< @:
< $llentry
< @;
< begin
< $self
< @.
< $element
< @:=
< $element
< @;
< $self
< @.
< $next
< @:=
< $next
< @;
< $self
< @.
< $previous
< @:=
< $previous
< @;
< $lleinit
< @:=
< $self
< @;
< end
< @;
< function
< $llinit
< @(
< $self
< @:
< $linkedlist
< @)
< @:
< $linkedlist
< @;
< begin
< $self
< @.
< $header
< @:=
< $new
< @(
< $llentry
< @)
< @.
< $init
< @(
< nil
< @,
< nil
< @,
< nil
< @)
< @;
< $self
< @.
< $header
< @.
< $next
< @:=
< $self
< @.
< $header
< @;
< $self
< @.
< $header
< @.
< $previous
< @:=
< $self
< @.
< $header
< @;
< $self
< @.
< $size
< @:=
< #0
< @;
< $llinit
< @:=
< $self
< @;
< end
< @;
< function
< $llgetfirst
< @(
< $self
< @:
< $linkedlist
< @)
< @:
< $hasequals
< @;
< begin
< if
< $self
< @.
< $size
< @=
< #0
< then
< begin
< $llgetfirst
< @:=
< nil
< @;
< end
< else
< begin
< $llgetfirst
< @:=
< $self
< @.
< $header
< @.
< $next
< @.
< $element
< @;
< end
< @;
< end
< @;
< function
< $llgetlast
< @(
< $self
< @:
< $linkedlist
< @)
< @:
< $hasequals
< @;
< begin
< if
< $self
< @.
< $size
< @=
< #0
< then
< begin
< $llgetlast
< @:=
< nil
< @;
< end
< else
< begin
< $llgetlast
< @:=
< $self
< @.
< $header
< @.
< $previous
< @.
< $element
< @;
< end
< @;
< end
< @;
< function
< $llremovefirst
< @(
< $self
< @:
< $linkedlist
< @)
< @:
< $hasequals
< @;
< begin
< $llremovefirst
< @:=
< $self
< @.
< $removeentry
< @(
< $self
< @.
< $header
< @.
< $next
< @)
< @;
< end
< @;
< function
< $llremovelast
< @(
< $self
< @:
< $linkedlist
< @)
< @:
< $hasequals
< @;
< begin
< $llremovelast
< @:=
< $self
< @.
< $removeentry
< @(
< $self
< @.
< $header
< @.
< $previous
< @)
< @;
< end
< @;
< procedure
< $lladdfirst
< @(
< $self
< @:
< $linkedlist
< @;
< $e
< @:
< $hasequals
< @)
< @;
< begin
< $self
< @.
< $addbeforeentry
< @(
< $e
< @,
< $self
< @.
< $header
< @.
< $next
< @)
< @;
< end
< @;
< procedure
< $lladdlast
< @(
< $self
< @:
< $linkedlist
< @;
< $e
< @:
< $hasequals
< @)
< @;
< begin
< $self
< @.
< $addbeforeentry
< @(
< $e
< @,
< $self
< @.
< $header
< @)
< @;
< end
< @;
< function
< $llcontains
< @(
< $self
< @:
< $linkedlist
< @;
< $e
< @:
< $hasequals
< @)
< @:
< $boolean
< @;
< begin
< $llcontains
< @:=
< @(
< $self
< @.
< $indexof
< @(
< $e
< @)
< @<>
< @-
< #1
< @)
< @;
< end
< @;
< function
< $llsize
< @(
< $self
< @:
< $linkedlist
< @)
< @:
< $integer
< @;
< begin
< $llsize
< @:=
< $self
< @.
< $mysize
< @;
< end
< @;
< function
< $lladd
< @(
< $self
< @:
< $linkedlist
< @;
< $e
< @:
< $hasequals
< @)
< @:
< $boolean
< @;
< begin
< $self
< @.
< $addbeforeentry
< @(
< $e
< @,
< $self
< @.
< $header
< @)
< @;
< $lladd
< @:=
< $true
< @;
< end
< @;
< function
< $llremove
< @(
< $self
< @:
< $linkedlist
< @;
< $o
< @:
< $hasequals
< @)
< @:
< $boolean
< @;
< var
< $e
< @:
< $llentry
< @;
< $searching
< @:
< $boolean
< @;
< $oo
< @:
< $hasequals
< @;
< begin
< $llremove
< @:=
< $false
< @;
< $searching
< @:=
< $true
< @;
< $e
< @:=
< $self
< @.
< $header
< @.
< $next
< @;
< while
< $searching
< do
< begin
< if
< $e
< @<>
< $self
< @.
< $header
< then
< begin
< if
< $o
< @.
< $equals
< @(
< $e
< @.
< $element
< @)
< then
< begin
< $oo
< @:=
< $self
< @.
< $removeentry
< @(
< $e
< @)
< @;
< $llremove
< @:=
< $true
< @;
< $searching
< @:=
< $false
< @;
< end
< @;
< end
< else
< begin
< $searching
< @:=
< $false
< @;
< end
< @;
< end
< @;
< end
< @;
< function
< $lladdall
< @(
< $self
< @:
< $linkedlist
< @;
< $other
< @:
< $collection
< @)
< @:
< $boolean
< @;
< begin
< $lladdall
< @:=
< $self
< @.
< $addallith
< @(
< $self
< @.
< $size
< @,
< $other
< @)
< @;
< end
< @;
< function
< $lladdallith
< @(
< $self
< @:
< $linkedlist
< @;
< $index
< @:
< $integer
< @;
< $other
< @:
< $collection
< @)
< @:
< $boolean
< @;
< var
< $it
< @:
< $iterator
< @;
< $succ
< @:
< $llentry
< @;
< $pred
< @:
< $llentry
< @;
< $o
< @:
< $hasequals
< @;
< $newent
< @:
< $llentry
< @;
< begin
< $lladdallith
< @:=
< $false
< @;
< if
< @(
< $index
< @>=
< #0
< @)
< and
< @(
< $index
< @<=
< $self
< @.
< $size
< @)
< then
< begin
< $it
< @:=
< $other
< @.
< $getiterator
< @;
< if
< $index
< @=
< $self
< @.
< $size
< then
< begin
< $succ
< @:=
< $self
< @.
< $header
< @;
< end
< else
< begin
< $succ
< @:=
< $self
< @.
< $entryith
< @(
< $index
< @)
< @;
< end
< @;
< $pred
< @:=
< $succ
< @.
< $previous
< @;
< while
< $it
< @.
< $hasnext
< do
< begin
< $o
< @:=
< $narrow
< @(
< $it
< @.
< $next
< @,
< $hasequals
< @)
< @;
< $newent
< @:=
< $new
< @(
< $llentry
< @)
< @.
< $init
< @(
< $o
< @,
< $succ
< @,
< $pred
< @)
< @;
< $pred
< @.
< $next
< @:=
< $newent
< @;
< $pred
< @:=
< $newent
< @;
< $self
< @.
< $mysize
< @:=
< $self
< @.
< $mysize
< @+
< #1
< @;
< end
< @;
< $succ
< @.
< $previous
< @:=
< $pred
< @;
< $lladdallith
< @:=
< $true
< @;
< end
< @;
< end
< @;
< procedure
< $llclear
< @(
< $self
< @:
< $linkedlist
< @)
< @;
< var
< $e
< @,
< $next
< @:
< $llentry
< @;
< begin
< $e
< @:=
< $self
< @.
< $header
< @.
< $next
< @;
< while
< $e
< @<>
< $self
< @.
< $header
< do
< begin
< $next
< @:=
< $e
< @.
< $next
< @;
< $e
< @.
< $next
< @:=
< nil
< @;
< $e
< @.
< $previous
< @:=
< nil
< @;
< $e
< @:=
< $next
< @;
< end
< @;
< $self
< @.
< $header
< @.
< $next
< @:=
< $self
< @.
< $header
< @;
< $self
< @.
< $header
< @.
< $previous
< @:=
< $self
< @.
< $header
< @;
< $self
< @.
< $mysize
< @:=
< #0
< @;
< end
< @;
< function
< $llgetith
< @(
< $self
< @:
< $linkedlist
< @;
< $index
< @:
< $integer
< @)
< @:
< $hasequals
< @;
< begin
< $llgetith
< @:=
< $self
< @.
< $entryith
< @(
< $index
< @)
< @.
< $element
< @;
< end
< @;
< function
< $llsetith
< @(
< $self
< @:
< $linkedlist
< @;
< $index
< @:
< $integer
< @;
< $element
< @:
< $hasequals
< @)
< @:
< $hasequals
< @;
< var
< $e
< @:
< $llentry
< @;
< begin
< $llsetith
< @:=
< nil
< @;
< $e
< @:=
< $self
< @.
< $entryith
< @(
< $index
< @)
< @;
< if
< $e
< @<>
< nil
< then
< begin
< $llsetith
< @:=
< $e
< @.
< $element
< @;
< $e
< @.
< $element
< @:=
< $element
< @;
< end
< @;
< end
< @;
< function
< $lladdith
< @(
< $self
< @:
< $linkedlist
< @;
< $index
< @:
< $integer
< @;
< $element
< @:
< $hasequals
< @)
< @:
< $boolean
< @;
< var
< $e
< @:
< $llentry
< @;
< begin
< if
< $index
< @=
< $self
< @.
< $size
< then
< begin
< $e
< @:=
< $self
< @.
< $header
< @;
< end
< else
< begin
< $e
< @:=
< $self
< @.
< $entryith
< @(
< $index
< @)
< @;
< end
< @;
< $self
< @.
< $addbeforeentry
< @(
< $element
< @,
< $e
< @)
< @;
< $lladdith
< @:=
< $true
< @;
< end
< @;
< function
< $llremoveith
< @(
< $self
< @:
< $linkedlist
< @;
< $index
< @:
< $integer
< @)
< @:
< $boolean
< @;
< var
< $oo
< @:
< $hasequals
< @;
< begin
< $oo
< @:=
< $self
< @.
< $removeentry
< @(
< $self
< @.
< $entryith
< @(
< $index
< @)
< @)
< @;
< $llremoveith
< @:=
< $true
< @;
< end
< @;
< function
< $llentryith
< @(
< $self
< @:
< $linkedlist
< @;
< $index
< @:
< $integer
< @)
< @:
< $llentry
< @;
< var
< $e
< @:
< $llentry
< @;
< begin
< $llentryith
< @:=
< nil
< @;
< if
< @(
< $index
< @>=
< #0
< @)
< and
< @(
< $index
< @<
< $self
< @.
< $size
< @)
< then
< begin
< $e
< @:=
< $self
< @.
< $header
< @.
< $next
< @;
< while
< $index
< @>
< #0
< do
< begin
< $e
< @:=
< $e
< @.
< $next
< @;
< $index
< @:=
< $index
< @-
< #1
< @;
< end
< @;
< $llentryith
< @:=
< $e
< @;
< end
< @;
< end
< @;
< function
< $llindexof
< @(
< $self
< @:
< $linkedlist
< @;
< $o
< @:
< $hasequals
< @)
< @:
< $integer
< @;
< var
< $index
< @:
< $integer
< @;
< $e
< @:
< $llentry
< @;
< $searching
< @:
< $boolean
< @;
< begin
< $llindexof
< @:=
< @-
< #1
< @;
< $index
< @:=
< #0
< @;
< $e
< @:=
< $self
< @.
< $header
< @.
< $next
< @;
< $searching
< @:=
< $true
< @;
< while
< $searching
< do
< begin
< if
< $e
< @<>
< $self
< @.
< $header
< then
< begin
< if
< $o
< @.
< $equals
< @(
< $e
< @.
< $element
< @)
< then
< begin
< $llindexof
< @:=
< $index
< @;
< $searching
< @:=
< $false
< @;
< end
< else
< begin
< $index
< @:=
< $index
< @+
< #1
< @;
< $e
< @:=
< $e
< @.
< $next
< @;
< end
< @;
< end
< else
< begin
< $searching
< @:=
< $false
< @;
< end
< @;
< end
< @;
< end
< @;
< function
< $lllastindexof
< @(
< $self
< @:
< $linkedlist
< @;
< $o
< @:
< $hasequals
< @)
< @:
< $integer
< @;
< var
< $index
< @:
< $integer
< @;
< $e
< @:
< $llentry
< @;
< $searching
< @:
< $boolean
< @;
< begin
< $lllastindexof
< @:=
< @-
< #1
< @;
< $index
< @:=
< $self
< @.
< $size
< @;
< $e
< @:=
< $self
< @.
< $header
< @.
< $previous
< @;
< $searching
< @:=
< $true
< @;
< while
< $searching
< do
< begin
< if
< $e
< @<>
< $self
< @.
< $header
< then
< begin
< $index
< @:=
< $index
< @-
< #1
< @;
< if
< $o
< @.
< $equals
< @(
< $e
< @.
< $element
< @)
< then
< begin
< $lllastindexof
< @:=
< $index
< @;
< $searching
< @:=
< $false
< @;
< end
< else
< begin
< $e
< @:=
< $e
< @.
< $previous
< @;
< end
< @;
< end
< else
< begin
< $searching
< @:=
< $false
< @;
< end
< @;
< end
< @;
< end
< @;
< procedure
< $lladdbeforeentry
< @(
< $self
< @:
< $linkedlist
< @;
< $e
< @:
< $hasequals
< @;
< $entry
< @:
< $llentry
< @)
< @;
< var
< $newent
< @:
< $llentry
< @;
< begin
< $newent
< @:=
< $new
< @(
< $llentry
< @)
< @.
< $init
< @(
< $e
< @,
< $entry
< @,
< $entry
< @.
< $previous
< @)
< @;
< $newent
< @.
< $previous
< @.
< $next
< @:=
< $newent
< @;
< $newent
< @.
< $next
< @.
< $previous
< @:=
< $newent
< @;
< $self
< @.
< $mysize
< @:=
< $self
< @.
< $mysize
< @+
< #1
< @;
< end
< @;
< function
< $llremoveentry
< @(
< $self
< @:
< $linkedlist
< @;
< $e
< @:
< $llentry
< @)
< @:
< $hasequals
< @;
< begin
< $llremoveentry
< @:=
< nil
< @;
< if
< @(
< $e
< @<>
< $self
< @.
< $header
< @)
< and
< @(
< $e
< @<>
< nil
< @)
< then
< begin
< $llremoveentry
< @:=
< $e
< @.
< $element
< @;
< $e
< @.
< $previous
< @.
< $next
< @:=
< $e
< @.
< $next
< @;
< $e
< @.
< $next
< @.
< $previous
< @:=
< $e
< @.
< $previous
< @;
< $e
< @.
< $previous
< @:=
< nil
< @;
< $e
< @.
< $next
< @:=
< nil
< @;
< $e
< @.
< $element
< @:=
< nil
< @;
< $self
< @.
< $mysize
< @:=
< $self
< @.
< $mysize
< @-
< #1
< @;
< end
< @;
< end
< @;
< function
< $llgetlistiteratorith
< @(
< $self
< @:
< $linkedlist
< @;
< $index
< @:
< $integer
< @)
< @:
< $listiterator
< @;
< begin
< $llgetlistiteratorith
< @:=
< $new
< @(
< $lllstitr
< @)
< @.
< $init
< @(
< $self
< @,
< $index
< @)
< @;
< end
< @;
< function
< $llliinit
< @(
< $self
< @:
< $lllstitr
< @;
< $lst
< @:
< $linkedlist
< @;
< $index
< @:
< $integer
< @)
< @:
< $lllstitr
< @;
< begin
< $self
< @.
< $lastreturned
< @:=
< $lst
< @.
< $header
< @;
< $self
< @.
< $thelist
< @:=
< $lst
< @;
< if
< @(
< $index
< @>=
< #0
< @)
< and
< @(
< $index
< @<=
< $lst
< @.
< $size
< @)
< then
< begin
< $self
< @.
< $nextent
< @:=
< $self
< @.
< $thelist
< @.
< $header
< @.
< $next
< @;
< $self
< @.
< $nextidx
< @:=
< #0
< @;
< while
< $index
< @>
< #0
< do
< begin
< $self
< @.
< $nextent
< @:=
< $self
< @.
< $nextent
< @.
< $next
< @;
< $self
< @.
< $nextidx
< @:=
< $self
< @.
< $nextidx
< @+
< #1
< @;
< $index
< @:=
< $index
< @-
< #1
< @;
< end
< @;
< end
< @;
< end
< @;
< function
< $lllihasnext
< @(
< $self
< @:
< $lllstitr
< @)
< @:
< $boolean
< @;
< begin
< $lllihasnext
< @:=
< @(
< $self
< @.
< $nextidx
< @<>
< $self
< @.
< $thelist
< @.
< $size
< @)
< @;
< end
< @;
< function
< $lllinext
< @(
< $self
< @:
< $lllstitr
< @)
< @:
< $hasequals
< @;
< begin
< $lllinext
< @:=
< nil
< @;
< if
< $self
< @.
< $nextidx
< @<>
< $self
< @.
< $thelist
< @.
< $size
< then
< begin
< $self
< @.
< $lastreturned
< @:=
< $self
< @.
< $nextent
< @;
< $self
< @.
< $nextent
< @:=
< $self
< @.
< $nextent
< @.
< $next
< @;
< $self
< @.
< $nextidx
< @:=
< $self
< @.
< $nextidx
< @+
< #1
< @;
< $lllinext
< @:=
< $self
< @.
< $lastreturned
< @.
< $element
< @;
< end
< @;
< end
< @;
< function
< $lllinextindex
< @(
< $self
< @:
< $lllstitr
< @)
< @:
< $integer
< @;
< begin
< $lllinextindex
< @:=
< $self
< @.
< $nextidx
< @;
< end
< @;
< function
< $lllihasprevious
< @(
< $self
< @:
< $lllstitr
< @)
< @:
< $boolean
< @;
< begin
< $lllihasprevious
< @:=
< @(
< $self
< @.
< $nextidx
< @<>
< #0
< @)
< @;
< end
< @;
< function
< $llliprevious
< @(
< $self
< @:
< $lllstitr
< @)
< @:
< $hasequals
< @;
< begin
< $llliprevious
< @:=
< nil
< @;
< if
< $self
< @.
< $nextidx
< @<>
< #0
< then
< begin
< $self
< @.
< $lastreturned
< @:=
< $self
< @.
< $nextent
< @.
< $previous
< @;
< $self
< @.
< $nextent
< @:=
< $self
< @.
< $nextent
< @.
< $previous
< @;
< $self
< @.
< $nextidx
< @:=
< $self
< @.
< $nextidx
< @-
< #1
< @;
< $llliprevious
< @:=
< $self
< @.
< $lastreturned
< @.
< $element
< @;
< end
< @;
< end
< @;
< function
< $lllipreviousindex
< @(
< $self
< @:
< $lllstitr
< @)
< @:
< $integer
< @;
< begin
< $lllipreviousindex
< @:=
< $self
< @.
< $nextidx
< @-
< #1
< @;
< end
< @;
< procedure
< $llliremove
< @(
< $self
< @:
< $lllstitr
< @)
< @;
< var
< $lastnext
< @:
< $llentry
< @;
< $oo
< @:
< $hasequals
< @;
< begin
< $lastnext
< @:=
< $self
< @.
< $lastreturned
< @.
< $next
< @;
< $oo
< @:=
< $self
< @.
< $thelist
< @.
< $removeentry
< @(
< $self
< @.
< $lastreturned
< @)
< @;
< if
< $self
< @.
< $nextent
< @=
< $self
< @.
< $lastreturned
< then
< begin
< $self
< @.
< $nextent
< @:=
< $lastnext
< @;
< end
< else
< begin
< $self
< @.
< $nextidx
< @:=
< $self
< @.
< $nextidx
< @-
< #1
< @;
< end
< @;
< $self
< @.
< $lastreturned
< @:=
< $self
< @.
< $thelist
< @.
< $header
< @;
< end
< @;
< procedure
< $llliset
< @(
< $self
< @:
< $lllstitr
< @;
< $e
< @:
< $hasequals
< @)
< @;
< begin
< if
< $self
< @.
< $lastreturned
< @<>
< $self
< @.
< $thelist
< @.
< $header
< then
< begin
< $self
< @.
< $lastreturned
< @.
< $element
< @:=
< $e
< @;
< end
< @;
< end
< @;
< procedure
< $llliadd
< @(
< $self
< @:
< $lllstitr
< @;
< $e
< @:
< $hasequals
< @)
< @;
< begin
< $self
< @.
< $lastreturned
< @:=
< $self
< @.
< $thelist
< @.
< $header
< @;
< $self
< @.
< $thelist
< @.
< $addbeforeentry
< @(
< $e
< @,
< $self
< @.
< $nextent
< @)
< @;
< $self
< @.
< $nextidx
< @:=
< $self
< @.
< $nextidx
< @+
< #1
< @;
< end
< @;
< begin
< end
< @.
< EOF
< EOF


testprocdecl.err:
0a1,9
> Exception occurred:
> java.lang.IllegalStateException: Operator was not found in the operator table: (:
> 	at MPC.TokenOp.get(TokenOp.java:89)
> 	at MPC.MPCScanner.next_token(MPCScanner.java:498)
> 	at java_cup.runtime.lr_parser.scan(lr_parser.java:349)
> 	at java_cup.runtime.lr_parser.parse(lr_parser.java:578)
> 	at MPC.Parse.perform(Parse.java:45)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testprocdecl.token:
2,4c2
< $testprocdecl
< @;
< type
---
> $testprocdecl;type
7,9c5
< $integer
< @;
< procedure
---
> $integer;procedure
11,179d6
< @(
< $a
< @:
< $a
< @)
< @;
< begin
< end
< @;
< procedure
< $p2
< @(
< $t1
< @:
< $t1
< @)
< @;
< begin
< end
< @;
< procedure
< $p3
< @(
< $x
< @:
< $y
< @)
< @;
< begin
< end
< @;
< procedure
< $p4
< @(
< $x
< @:
< $t2
< @)
< @;
< begin
< end
< @;
< function
< $f1
< @(
< $a
< @:
< $a
< @)
< @:
< $integer
< @;
< begin
< end
< @;
< function
< $f2
< @(
< $t1
< @:
< $t1
< @)
< @:
< $integer
< @;
< begin
< end
< @;
< function
< $f3
< @(
< $x
< @:
< $y
< @)
< @:
< $integer
< @;
< begin
< end
< @;
< function
< $f4
< @(
< $x
< @:
< $t2
< @)
< @:
< $integer
< @;
< begin
< end
< @;
< function
< $f5
< @(
< $x
< @:
< $integer
< @)
< @:
< $x
< @;
< begin
< end
< @;
< function
< $f6
< @(
< $x
< @:
< $integer
< @)
< @:
< $y
< @;
< begin
< end
< @;
< function
< $f7
< @(
< $x
< @:
< $integer
< @)
< @:
< $t1
< @;
< begin
< end
< @;
< function
< $f8
< @(
< $t1
< @:
< $integer
< @)
< @:
< $t1
< @;
< begin
< end
< @;
< function
< $f9
< @(
< $x
< @:
< $integer
< @)
< @:
< $t2
< @;
< begin
< end
< @;
< type
< $t2
< @=
< $boolean
< @;
< begin
< end
< @.
< EOF
< EOF


testread.err:
0a1,9
> Exception occurred:
> java.lang.IllegalStateException: Operator was not found in the operator table: (,
> 	at MPC.TokenOp.get(TokenOp.java:89)
> 	at MPC.MPCScanner.next_token(MPCScanner.java:498)
> 	at java_cup.runtime.lr_parser.scan(lr_parser.java:349)
> 	at java_cup.runtime.lr_parser.parse(lr_parser.java:578)
> 	at MPC.Parse.perform(Parse.java:45)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testread.token:
2,4c2
< $testread
< @;
< var
---
> $testread;var
7,9c5
< $integer
< @;
< begin
---
> $integer;begin
11,27d6
< @(
< $x
< @,
< $x
< @)
< @;
< $writeln
< @(
< 'x = '
< @,
< $x
< @)
< @;
< end
< @.
< EOF
< EOF



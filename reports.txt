gcd.err:
0a1,5
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


gcd.parse:
1,44d0
< (program: 
<   (decls: 
<     (decl->program: gcd[1]))
<   (block: 
<     (decls: 
<       (decl->variable: x[3]
<         (type->kind=ident: integer[3]))
<       (decl->variable: y[3]
<         (type->kind=ident: integer[3])))
<     (stmts: 
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false readln[6]
<           (exprs: 
<             (expr-> binding: x[6])
<             (expr-> binding: y[6]))))
<       (stmt->whilestmt:
<         (expr-> binexp: <>
<           (expr-> binding: x[7])
<           (expr-> binding: y[7]))
<         (stmt->compoundstmt:
<           (stmts: 
<             (stmt->ifstmt: 
<               (expr-> binexp: >
<                 (expr-> binding: x[8])
<                 (expr-> binding: y[8]))
<               (stmt->assignstmt:
<                 (expr-> binding: x[8])
<                 (expr-> binexp: -
<                   (expr-> binding: x[8])
<                   (expr-> binding: y[8])))
<               (else: 
<                 (stmt->assignstmt:
<                   (expr-> binding: y[8])
<                   (expr-> binexp: -
<                     (expr-> binding: y[8])
<                     (expr-> binding: x[8])))))
<             (stmt->emptystmt:))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[10]
<           (exprs: 
<             (expr->[value='GCD = '] string: 'GCD = '
<               type->(type->kind=string))
<             (expr-> binding: x[10]))))
<       (stmt->emptystmt:))))


proctest.err:
0a1,5
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


proctest.parse:
1,337d0
< (program: 
<   (decls: 
<     (decl->program: procfunctest[1]))
<   (block: 
<     (decls: 
<       (decl->type: rng[3]
<         (type->kind=subrange:
<           (expr->[value=1] int: 1
<             type->(type->kind=integer))
<           (expr->[value=10] int: 10
<             type->(type->kind=integer))))
<       (decl->procedure: p0[5]
<         (block: 
<           (stmts: 
<             (stmt->emptystmt:))))
<       (decl->procedure: p1[9]
<         (formals: 
<           (decl->formal x[9]
<             (varmode=false)
<             (type->kind=ident: integer[9])))
<         (block: 
<           (stmts: 
<             (stmt->emptystmt:))))
<       (decl->procedure: p2[13]
<         (formals: 
<           (decl->formal x[13]
<             (varmode=false)
<             (type->kind=ident: integer[13]))
<           (decl->formal y[13]
<             (varmode=false)
<             (type->kind=ident: boolean[13])))
<         (block: 
<           (stmts: 
<             (stmt->emptystmt:))))
<       (decl->procedure: p3[17]
<         (formals: 
<           (decl->formal x[17]
<             (varmode=false)
<             (type->kind=ident: integer[17]))
<           (decl->formal r[17]
<             (varmode=false)
<             (type->kind=ident: rng[17]))
<           (decl->formal xx[17]
<             (varmode=true)
<             (type->kind=ident: integer[17]))
<           (decl->formal rr[17]
<             (varmode=true)
<             (type->kind=ident: rng[17])))
<         (block: 
<           (stmts: 
<             (stmt->emptystmt:))))
<       (decl->function: f0[21]
<         (type->kind=ident: integer[21])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: f0[23])
<               (expr->[value=0] int: 0
<                 type->(type->kind=integer)))
<             (stmt->emptystmt:))))
<       (decl->function: f1[26]
<         (formals: 
<           (decl->formal x[26]
<             (varmode=false)
<             (type->kind=ident: integer[26])))
<         (type->kind=ident: integer[26])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: f1[28])
<               (expr-> binding: x[28]))
<             (stmt->emptystmt:))))
<       (decl->function: f2[31]
<         (formals: 
<           (decl->formal x[31]
<             (varmode=false)
<             (type->kind=ident: integer[31]))
<           (decl->formal y[31]
<             (varmode=false)
<             (type->kind=ident: boolean[31])))
<         (type->kind=ident: boolean[31])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: f2[33])
<               (expr-> binding: y[33]))
<             (stmt->emptystmt:))))
<       (decl->function: f3[36]
<         (type->kind=ident: boolean[36])
<         (block: 
<           (decls: 
<             (decl->procedure: pp[37]
<               (block: 
<                 (decls: 
<                   (decl->procedure: qq[38]
<                     (block: 
<                       (stmts: 
<                         (stmt->assignstmt:
<                           (expr-> binding: pp[40])
<                           (expr->[value=5] int: 5
<                             type->(type->kind=integer)))
<                         (stmt->emptystmt:)))))
<                 (stmts: 
<                   (stmt->assignstmt:
<                     (expr-> binding: f3[43])
<                     (expr-> binding: false[43]))
<                   (stmt->assignstmt:
<                     (expr-> binding: pp[44])
<                     (expr->[value=17] int: 17
<                       type->(type->kind=integer)))
<                   (stmt->emptystmt:))))
<             (decl->function: ff[46]
<               (type->kind=ident: boolean[46])
<               (block: 
<                 (stmts: 
<                   (stmt->assignstmt:
<                     (expr-> binding: f3[48])
<                     (expr-> binding: true[48]))
<                   (stmt->assignstmt:
<                     (expr-> binding: ff[49])
<                     (expr-> binding: false[49]))
<                   (stmt->emptystmt:)))))
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: f3[52])
<               (expr-> binding: true[52]))
<             (stmt->assignstmt:
<               (expr-> binding: f3[53])
<               (expr->[value=3] int: 3
<                 type->(type->kind=integer)))
<             (stmt->emptystmt:))))
<       (decl->type: pint[58]
<         (type->kind=pointer:
<           ))
<       (decl->variable: r[61]
<         (type->kind=ident: rng[61]))
<       (decl->variable: x[62]
<         (type->kind=ident: integer[62]))
<       (decl->variable: y[63]
<         (type->kind=ident: boolean[63]))
<       (decl->variable: p[64]
<         (type->kind=pointer:
<           )))
<     (stmts: 
<       (stmt->callstmt:
<         (expr-> binding: p0[66]))
<       (stmt->callstmt:
<         (expr-> binding: p1[67]))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false p0[68]
<           (exprs: 
<             (expr-> binding: x[68]))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false p1[69]
<           (exprs: 
<             (expr-> binding: x[69]))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false p1[70]
<           (exprs: 
<             (expr-> binding: y[70]))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false p1[71]
<           (exprs: 
<             (expr-> binding: x[71])
<             (expr-> binding: y[71]))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false p2[72]
<           (exprs: 
<             (expr-> binding: x[72]))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false p2[73]
<           (exprs: 
<             (expr-> binding: x[73])
<             (expr-> binding: y[73]))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false p2[74]
<           (exprs: 
<             (expr-> binding: y[74])
<             (expr-> binding: x[74]))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false p3[75]
<           (exprs: 
<             (expr-> binding: x[75])
<             (expr-> binding: r[75])
<             (expr-> binding: x[75])
<             (expr-> binding: r[75]))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false p3[76]
<           (exprs: 
<             (expr-> binding: r[76])
<             (expr-> binding: x[76])
<             (expr-> binding: x[76])
<             (expr-> binding: r[76]))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false p3[77]
<           (exprs: 
<             (expr-> binding: x[77])
<             (expr-> binding: r[77])
<             (expr-> binding: r[77])
<             (expr-> binding: x[77]))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false p3[78]
<           (exprs: 
<             (expr->[value=50] int: 50
<               type->(type->kind=integer))
<             (expr->[value=50] int: 50
<               type->(type->kind=integer))
<             (expr-> binding: x[78])
<             (expr-> binding: r[78]))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false p3[79]
<           (exprs: 
<             (expr->[value=50] int: 50
<               type->(type->kind=integer))
<             (expr->[value=50] int: 50
<               type->(type->kind=integer))
<             (expr->[value=50] int: 50
<               type->(type->kind=integer))
<             (expr->[value=50] int: 50
<               type->(type->kind=integer)))))
<       (stmt->assignstmt:
<         (expr-> binding: x[80])
<         (expr-> binding: f0[80]))
<       (stmt->assignstmt:
<         (expr-> binding: x[81])
<         (expr-> binding: f1[81]))
<       (stmt->assignstmt:
<         (expr-> binding: x[82])
<         (expr-> call: isMethodCall=false f0[82]
<           (exprs: 
<             (expr-> binding: x[82]))))
<       (stmt->assignstmt:
<         (expr-> binding: x[83])
<         (expr-> call: isMethodCall=false f1[83]
<           (exprs: 
<             (expr-> binding: x[83]))))
<       (stmt->assignstmt:
<         (expr-> binding: x[84])
<         (expr-> call: isMethodCall=false f1[84]
<           (exprs: 
<             (expr-> binding: y[84]))))
<       (stmt->assignstmt:
<         (expr-> binding: y[85])
<         (expr-> call: isMethodCall=false f2[85]
<           (exprs: 
<             (expr-> binding: x[85]))))
<       (stmt->assignstmt:
<         (expr-> binding: x[86])
<         (expr-> call: isMethodCall=false f2[86]
<           (exprs: 
<             (expr-> binding: x[86])
<             (expr-> binding: y[86]))))
<       (stmt->assignstmt:
<         (expr-> binding: y[87])
<         (expr-> call: isMethodCall=false f2[87]
<           (exprs: 
<             (expr-> binding: x[87])
<             (expr-> binding: y[87]))))
<       (stmt->assignstmt:
<         (expr-> binding: y[88])
<         (expr-> call: isMethodCall=false f2[88]
<           (exprs: 
<             (expr-> binding: y[88])
<             (expr-> binding: x[88]))))
<       (stmt->callstmt:
<         (expr-> binding: readln[89]))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false readln[90]
<           (exprs: 
<             (expr->[value=3] int: 3
<               type->(type->kind=integer)))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false readln[91]
<           (exprs: 
<             (expr-> binding: x[91]))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false readln[92]
<           (exprs: 
<             (expr-> binding: x[92])
<             (expr->[value=3] int: 3
<               type->(type->kind=integer)))))
<       (stmt->callstmt:
<         (expr-> binding: write[93]))
<       (stmt->callstmt:
<         (expr-> binding: writeln[94]))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false write[95]
<           (exprs: 
<             (expr-> binding: x[95])
<             (expr->[value=3] int: 3
<               type->(type->kind=integer)))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[96]
<           (exprs: 
<             (expr-> binding: x[96])
<             (expr->[value=3] int: 3
<               type->(type->kind=integer)))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false write[97]
<           (exprs: 
<             (expr-> binding: p[97]))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false new[98]
<           (exprs: 
<             (expr-> binding: p[98]))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false new[99]
<           (exprs: 
<             (expr-> binding: x[99]))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false new[100]
<           (exprs: 
<             (expr->[value=3] int: 3
<               type->(type->kind=integer)))))
<       (stmt->callstmt:
<         (expr-> binding: new[101]))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false new[102]
<           (exprs: 
<             (expr-> binding: p[102])
<             (expr-> binding: x[102]))))
<       (stmt->assignstmt:
<         (expr-> binding: p[103])
<         (expr-> call: isMethodCall=false new[103]
<           (exprs: 
<             (expr-> binding: pint[103]))))
<       (stmt->assignstmt:
<         (expr-> binding: x[104])
<         (expr-> call: isMethodCall=false new[104]
<           (exprs: 
<             (expr-> binding: pint[104]))))
<       (stmt->assignstmt:
<         (expr-> binding: y[105])
<         (expr-> call: isMethodCall=false new[105]
<           (exprs: 
<             (expr-> binding: boolean[105]))))
<       (stmt->emptystmt:))))


scancomment.err:
0a1,5
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


scancomment2.err:
4a5,9
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


scaneof1.err:
0a1,5
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


scaneof2.err:
0a1,5
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


scangood.err:
0a1,5
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


scanids.err:
1d0
< line 1: Syntax Error: $x
9a9,13
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


scanints.err:
1d0
< line -1: Syntax Error: #0
53a53,57
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


scanmin.err:
0a1,5
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


scanstringnl.err:
8a9,13
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


stchain.err:
0a1,5
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


stchain.parse:
1,576d0
< (program: 
<   (decls: 
<     (decl->program: phase5test[1]))
<   (block: 
<     (decls: 
<       (decl->procedure: printscores[3]
<         (formals: 
<           (decl->formal a[3]
<             (varmode=false)
<             (type->kind=ident: integer[3]))
<           (decl->formal b[3]
<             (varmode=false)
<             (type->kind=ident: integer[3]))
<           (decl->formal c[3]
<             (varmode=false)
<             (type->kind=ident: integer[3])))
<         (block: 
<           (stmts: 
<             (stmt->ifstmt: 
<               (expr-> binexp: =
<                 (expr-> binding: a[5])
<                 (expr-> binding: b[5]))
<               (stmt->callstmt:
<                 (expr-> call: isMethodCall=false writeln[6]
<                   (exprs: 
<                     (expr->[value='\t:-) GOOD : got full '] string: '\t:-) GOOD : got full '
<                       type->(type->kind=string))
<                     (expr-> binding: a[6])
<                     (expr->[value=' pt(s).       TOTAL SCORE: '] string: ' pt(s).       TOTAL SCORE: '
<                       type->(type->kind=string))
<                     (expr-> binding: c[6]))))
<               (else: 
<                 (stmt->callstmt:
<                   (expr-> call: isMethodCall=false writeln[8]
<                     (exprs: 
<                       (expr->[value='\t:-( SORRY: missed '] string: '\t:-( SORRY: missed '
<                         type->(type->kind=string))
<                       (expr-> binding: a[8])
<                       (expr->[value=' pt(s).         TOTAL SCORE: '] string: ' pt(s).         TOTAL SCORE: '
<                         type->(type->kind=string))
<                       (expr-> binding: c[8]))))))
<             (stmt->emptystmt:))))
<       (decl->variable: score[12]
<         (type->kind=ident: integer[12]))
<       (decl->variable: localscore[13]
<         (type->kind=ident: integer[13]))
<       (decl->function: scope1[27]
<         (formals: 
<           (decl->formal l[27]
<             (varmode=false)
<             (type->kind=ident: integer[27]))
<           (decl->formal m[27]
<             (varmode=false)
<             (type->kind=ident: integer[27]))
<           (decl->formal n[27]
<             (varmode=false)
<             (type->kind=ident: integer[27]))
<           (decl->formal o[27]
<             (varmode=false)
<             (type->kind=ident: integer[27])))
<         (type->kind=ident: integer[27])
<         (block: 
<           (decls: 
<             (decl->variable: a[29]
<               (type->kind=ident: integer[29]))
<             (decl->procedure: scope2[30]
<               (formals: 
<                 (decl->formal m[30]
<                   (varmode=false)
<                   (type->kind=ident: integer[30]))
<                 (decl->formal n[30]
<                   (varmode=false)
<                   (type->kind=ident: integer[30]))
<                 (decl->formal o[30]
<                   (varmode=false)
<                   (type->kind=ident: integer[30])))
<               (block: 
<                 (decls: 
<                   (decl->variable: b[32]
<                     (type->kind=ident: integer[32]))
<                   (decl->procedure: scope3[33]
<                     (formals: 
<                       (decl->formal n[33]
<                         (varmode=false)
<                         (type->kind=ident: integer[33]))
<                       (decl->formal o[33]
<                         (varmode=false)
<                         (type->kind=ident: integer[33])))
<                     (block: 
<                       (decls: 
<                         (decl->variable: c[35]
<                           (type->kind=ident: integer[35]))
<                         (decl->procedure: scope4[36]
<                           (formals: 
<                             (decl->formal o[36]
<                               (varmode=false)
<                               (type->kind=ident: integer[36])))
<                           (block: 
<                             (decls: 
<                               (decl->variable: d[38]
<                                 (type->kind=ident: integer[38])))
<                             (stmts: 
<                               (stmt->assignstmt:
<                                 (expr-> binding: d[40])
<                                 (expr-> binexp: *
<                                   (expr-> binding: l[40])
<                                   (expr-> binding: o[40])))
<                               (stmt->ifstmt: 
<                                 (expr-> binexp: and
<                                   (expr-> binexp: and
<                                     (expr-> binexp: =
<                                       (expr-> binding: b[41])
<                                       (expr-> binexp: *
<                                         (expr->[value=2] int: 2
<                                           type->(type->kind=integer))
<                                         (expr-> binding: a[41])))
<                                     (expr-> binexp: =
<                                       (expr-> binding: c[41])
<                                       (expr-> binexp: *
<                                         (expr->[value=2] int: 2
<                                           type->(type->kind=integer))
<                                         (expr-> binding: b[41]))))
<                                   (expr-> binexp: =
<                                     (expr-> binding: d[41])
<                                     (expr-> binexp: *
<                                       (expr->[value=2] int: 2
<                                         type->(type->kind=integer))
<                                       (expr-> binding: c[41]))))
<                                 (stmt->assignstmt:
<                                   (expr-> binding: localscore[42])
<                                   (expr->[value=10] int: 10
<                                     type->(type->kind=integer)))
<                                 (else: 
<                                   (stmt->assignstmt:
<                                     (expr-> binding: localscore[44])
<                                     (expr->[value=0] int: 0
<                                       type->(type->kind=integer)))))
<                               (stmt->callstmt:
<                                 (expr-> call: isMethodCall=false writeln[45]
<                                   (exprs: 
<                                     (expr->[value='\ta: '] string: '\ta: '
<                                       type->(type->kind=string))
<                                     (expr-> binding: a[45])
<                                     (expr->[value='  b: '] string: '  b: '
<                                       type->(type->kind=string))
<                                     (expr-> binding: b[45])
<                                     (expr->[value='  c: '] string: '  c: '
<                                       type->(type->kind=string))
<                                     (expr-> binding: c[45])
<                                     (expr->[value='  d: '] string: '  d: '
<                                       type->(type->kind=string))
<                                     (expr-> binding: d[45]))))
<                               (stmt->emptystmt:)))))
<                       (stmts: 
<                         (stmt->assignstmt:
<                           (expr-> binding: c[49])
<                           (expr-> binexp: *
<                             (expr-> binding: l[49])
<                             (expr-> binding: o[49])))
<                         (stmt->callstmt:
<                           (expr-> call: isMethodCall=false scope4[50]
<                             (exprs: 
<                               (expr-> binexp: *
<                                 (expr->[value=2] int: 2
<                                   type->(type->kind=integer))
<                                 (expr-> binding: o[50])))))
<                         (stmt->emptystmt:)))))
<                 (stmts: 
<                   (stmt->assignstmt:
<                     (expr-> binding: b[53])
<                     (expr-> binexp: *
<                       (expr-> binding: l[53])
<                       (expr-> binding: o[53])))
<                   (stmt->callstmt:
<                     (expr-> call: isMethodCall=false scope3[54]
<                       (exprs: 
<                         (expr-> binding: n[54])
<                         (expr-> binexp: *
<                           (expr->[value=2] int: 2
<                             type->(type->kind=integer))
<                           (expr-> binding: o[54])))))
<                   (stmt->emptystmt:)))))
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: a[57])
<               (expr-> binexp: *
<                 (expr-> binding: l[57])
<                 (expr-> binding: o[57])))
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=false scope2[58]
<                 (exprs: 
<                   (expr-> binding: m[58])
<                   (expr-> binding: n[58])
<                   (expr-> binexp: *
<                     (expr->[value=2] int: 2
<                       type->(type->kind=integer))
<                     (expr-> binding: o[58])))))
<             (stmt->assignstmt:
<               (expr-> binding: scope1[59])
<               (expr-> binding: localscore[59]))
<             (stmt->emptystmt:))))
<       (decl->function: twistedchain[62]
<         (formals: 
<           (decl->formal l[62]
<             (varmode=false)
<             (type->kind=ident: integer[62]))
<           (decl->formal m[62]
<             (varmode=false)
<             (type->kind=ident: integer[62])))
<         (type->kind=ident: integer[62])
<         (block: 
<           (decls: 
<             (decl->variable: store[63]
<               (type->kind=ident: integer[63]))
<             (decl->variable: count[63]
<               (type->kind=ident: integer[63]))
<             (decl->variable: localscore[63]
<               (type->kind=ident: integer[63]))
<             (decl->procedure: a1[65]
<               (formals: 
<                 (decl->formal i[65]
<                   (varmode=false)
<                   (type->kind=ident: integer[65]))
<                 (decl->formal j[65]
<                   (varmode=false)
<                   (type->kind=ident: integer[65])))
<               (block: 
<                 (decls: 
<                   (decl->variable: b[66]
<                     (type->kind=ident: integer[66]))
<                   (decl->procedure: a2[67]
<                     (formals: 
<                       (decl->formal k[67]
<                         (varmode=false)
<                         (type->kind=ident: integer[67]))
<                       (decl->formal l[67]
<                         (varmode=false)
<                         (type->kind=ident: integer[67])))
<                     (block: 
<                       (decls: 
<                         (decl->variable: a[68]
<                           (type->kind=ident: integer[68])))
<                       (stmts: 
<                         (stmt->assignstmt:
<                           (expr-> binding: a[70])
<                           (expr-> binding: i[70]))
<                         (stmt->assignstmt:
<                           (expr-> binding: b[72])
<                           (expr-> binexp: +
<                             (expr-> binding: l[72])
<                             (expr->[value=1] int: 1
<                               type->(type->kind=integer))))
<                         (stmt->callstmt:
<                           (expr-> call: isMethodCall=false writeln[73]
<                             (exprs: 
<                               (expr->[value='a : '] string: 'a : '
<                                 type->(type->kind=string))
<                               (expr-> binding: a[73])
<                               (expr->[value=', l : '] string: ', l : '
<                                 type->(type->kind=string))
<                               (expr-> binding: l[73]))))
<                         (stmt->callstmt:
<                           (expr-> call: isMethodCall=false writeln[74]
<                             (exprs: 
<                               (expr->[value='k : '] string: 'k : '
<                                 type->(type->kind=string))
<                               (expr-> binding: k[74])
<                               (expr->[value=', b : '] string: ', b : '
<                                 type->(type->kind=string))
<                               (expr-> binding: b[74]))))
<                         (stmt->ifstmt: 
<                           (expr-> binexp: and
<                             (expr-> binexp: and
<                               (expr-> binexp: and
<                                 (expr-> binexp: =
<                                   (expr-> binding: a[75])
<                                   (expr-> binding: store[75]))
<                                 (expr-> binexp: =
<                                   (expr-> binding: k[75])
<                                   (expr-> binexp: -
<                                     (expr-> binding: store[75])
<                                     (expr->[value=1] int: 1
<                                       type->(type->kind=integer)))))
<                               (expr-> binexp: =
<                                 (expr-> binding: l[75])
<                                 (expr-> binding: count[75])))
<                             (expr-> binexp: =
<                               (expr-> binding: b[75])
<                               (expr-> binexp: +
<                                 (expr-> binding: count[75])
<                                 (expr->[value=1] int: 1
<                                   type->(type->kind=integer)))))
<                           (stmt->compoundstmt:
<                             (stmts: 
<                               (stmt->assignstmt:
<                                 (expr-> binding: localscore[78])
<                                 (expr-> binexp: +
<                                   (expr-> binding: localscore[78])
<                                   (expr->[value=2] int: 2
<                                     type->(type->kind=integer))))
<                               (stmt->assignstmt:
<                                 (expr-> binding: store[79])
<                                 (expr-> binexp: -
<                                   (expr-> binding: store[79])
<                                   (expr->[value=2] int: 2
<                                     type->(type->kind=integer))))
<                               (stmt->assignstmt:
<                                 (expr-> binding: count[80])
<                                 (expr-> binexp: +
<                                   (expr-> binding: count[80])
<                                   (expr->[value=2] int: 2
<                                     type->(type->kind=integer))))
<                               (stmt->emptystmt:))))
<                         (stmt->ifstmt: 
<                           (expr-> binexp: and
<                             (expr-> binexp: <>
<                               (expr-> binding: i[82])
<                               (expr->[value=0] int: 0
<                                 type->(type->kind=integer)))
<                             (expr-> binexp: <>
<                               (expr-> binding: k[82])
<                               (expr->[value=0] int: 0
<                                 type->(type->kind=integer))))
<                           (stmt->callstmt:
<                             (expr-> call: isMethodCall=false a1[83]
<                               (exprs: 
<                                 (expr-> binexp: -
<                                   (expr-> binding: k[83])
<                                   (expr->[value=1] int: 1
<                                     type->(type->kind=integer)))
<                                 (expr-> binexp: +
<                                   (expr-> binding: l[83])
<                                   (expr->[value=1] int: 1
<                                     type->(type->kind=integer)))))))
<                         (stmt->emptystmt:)))))
<                 (stmts: 
<                   (stmt->callstmt:
<                     (expr-> call: isMethodCall=false a2[86]
<                       (exprs: 
<                         (expr-> binexp: -
<                           (expr-> binding: i[86])
<                           (expr->[value=1] int: 1
<                             type->(type->kind=integer)))
<                         (expr-> binexp: +
<                           (expr-> binding: j[86])
<                           (expr->[value=1] int: 1
<                             type->(type->kind=integer))))))
<                   (stmt->emptystmt:))))
<             (decl->variable: outerk[89]
<               (type->kind=ident: integer[89]))
<             (decl->variable: outerl[89]
<               (type->kind=ident: integer[89]))
<             (decl->procedure: b1[91]
<               (formals: 
<                 (decl->formal i[91]
<                   (varmode=false)
<                   (type->kind=ident: integer[91]))
<                 (decl->formal j[91]
<                   (varmode=false)
<                   (type->kind=ident: integer[91])))
<               (block: 
<                 (decls: 
<                   (decl->procedure: b2a[92]
<                     (formals: 
<                       (decl->formal k[92]
<                         (varmode=false)
<                         (type->kind=ident: integer[92]))
<                       (decl->formal l[92]
<                         (varmode=false)
<                         (type->kind=ident: integer[92])))
<                     (block: 
<                       (stmts: 
<                         (stmt->callstmt:
<                           (expr-> call: isMethodCall=false writeln[94]
<                             (exprs: 
<                               (expr->[value='k : '] string: 'k : '
<                                 type->(type->kind=string))
<                               (expr-> binding: k[94])
<                               (expr->[value=', l: '] string: ', l: '
<                                 type->(type->kind=string))
<                               (expr-> binding: l[94]))))
<                         (stmt->assignstmt:
<                           (expr-> binding: outerk[95])
<                           (expr-> binding: k[95]))
<                         (stmt->assignstmt:
<                           (expr-> binding: outerl[95])
<                           (expr-> binding: l[95]))
<                         (stmt->ifstmt: 
<                           (expr-> binexp: and
<                             (expr-> binexp: =
<                               (expr-> binding: outerk[96])
<                               (expr-> binding: store[96]))
<                             (expr-> binexp: =
<                               (expr-> binding: outerl[96])
<                               (expr-> binding: count[96])))
<                           (stmt->compoundstmt:
<                             (stmts: 
<                               (stmt->assignstmt:
<                                 (expr-> binding: localscore[99])
<                                 (expr-> binexp: +
<                                   (expr-> binding: localscore[99])
<                                   (expr->[value=1] int: 1
<                                     type->(type->kind=integer))))
<                               (stmt->assignstmt:
<                                 (expr-> binding: store[100])
<                                 (expr-> binexp: -
<                                   (expr-> binding: store[100])
<                                   (expr->[value=1] int: 1
<                                     type->(type->kind=integer))))
<                               (stmt->assignstmt:
<                                 (expr-> binding: count[101])
<                                 (expr-> binexp: +
<                                   (expr-> binding: count[101])
<                                   (expr->[value=1] int: 1
<                                     type->(type->kind=integer))))
<                               (stmt->emptystmt:))))
<                         (stmt->ifstmt: 
<                           (expr-> binexp: <>
<                             (expr-> binding: k[103])
<                             (expr->[value=0] int: 0
<                               type->(type->kind=integer)))
<                           (stmt->callstmt:
<                             (expr-> call: isMethodCall=false b1[104]
<                               (exprs: 
<                                 (expr-> binexp: -
<                                   (expr-> binding: k[104])
<                                   (expr->[value=1] int: 1
<                                     type->(type->kind=integer)))
<                                 (expr-> binexp: +
<                                   (expr-> binding: l[104])
<                                   (expr->[value=1] int: 1
<                                     type->(type->kind=integer)))))))
<                         (stmt->emptystmt:))))
<                   (decl->procedure: b2b[106]
<                     (formals: 
<                       (decl->formal k[106]
<                         (varmode=false)
<                         (type->kind=ident: integer[106]))
<                       (decl->formal l[106]
<                         (varmode=false)
<                         (type->kind=ident: integer[106])))
<                     (block: 
<                       (stmts: 
<                         (stmt->callstmt:
<                           (expr-> call: isMethodCall=false b2a[108]
<                             (exprs: 
<                               (expr-> binding: k[108])
<                               (expr-> binding: l[108]))))
<                         (stmt->emptystmt:)))))
<                 (stmts: 
<                   (stmt->callstmt:
<                     (expr-> call: isMethodCall=false b2b[111]
<                       (exprs: 
<                         (expr-> binding: i[111])
<                         (expr-> binding: j[111]))))
<                   (stmt->emptystmt:)))))
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: count[115])
<               (expr->[value=1] int: 1
<                 type->(type->kind=integer)))
<             (stmt->assignstmt:
<               (expr-> binding: localscore[116])
<               (expr->[value=0] int: 0
<                 type->(type->kind=integer)))
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=false writeln[117]
<                 (exprs: 
<                   (expr->[value='TEST a : 10 pts'] string: 'TEST a : 10 pts'
<                     type->(type->kind=string)))))
<             (stmt->assignstmt:
<               (expr-> binding: store[118])
<               (expr-> binding: l[118]))
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=false a1[119]
<                 (exprs: 
<                   (expr-> binding: l[119])
<                   (expr-> binding: m[119]))))
<             (stmt->assignstmt:
<               (expr-> binding: store[120])
<               (expr-> binexp: -
<                 (expr-> binding: l[120])
<                 (expr->[value=2] int: 2
<                   type->(type->kind=integer))))
<             (stmt->assignstmt:
<               (expr-> binding: count[121])
<               (expr->[value=0] int: 0
<                 type->(type->kind=integer)))
<             (stmt->assignstmt:
<               (expr-> binding: outerk[122])
<               (expr-> binexp: -
<                 (expr-> binding: l[122])
<                 (expr->[value=2] int: 2
<                   type->(type->kind=integer))))
<             (stmt->assignstmt:
<               (expr-> binding: outerl[123])
<               (expr->[value=0] int: 0
<                 type->(type->kind=integer)))
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=false writeln[124]
<                 (exprs: 
<                   (expr->[value='TEST b : 10 pts'] string: 'TEST b : 10 pts'
<                     type->(type->kind=string)))))
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=false b1[125]
<                 (exprs: 
<                   (expr-> binexp: -
<                     (expr-> binding: l[125])
<                     (expr->[value=2] int: 2
<                       type->(type->kind=integer)))
<                   (expr-> binding: m[125]))))
<             (stmt->assignstmt:
<               (expr-> binding: twistedchain[126])
<               (expr-> binding: localscore[126]))
<             (stmt->emptystmt:)))))
<     (stmts: 
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[131]
<           (exprs: 
<             (expr->[value='TESTING STATIC CHAINS:'] string: 'TESTING STATIC CHAINS:'
<               type->(type->kind=string)))))
<       (stmt->assignstmt:
<         (expr-> binding: score[132])
<         (expr-> binexp: +
<           (expr-> binding: score[132])
<           (expr-> call: isMethodCall=false scope1[132]
<             (exprs: 
<               (expr->[value=2] int: 2
<                 type->(type->kind=integer))
<               (expr->[value=3] int: 3
<                 type->(type->kind=integer))
<               (expr->[value=4] int: 4
<                 type->(type->kind=integer))
<               (expr->[value=5] int: 5
<                 type->(type->kind=integer))))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[133]
<           (exprs: 
<             (expr->[value='TEST : simple static chain'] string: 'TEST : simple static chain'
<               type->(type->kind=string)))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false printscores[134]
<           (exprs: 
<             (expr->[value=10] int: 10
<               type->(type->kind=integer))
<             (expr-> binding: localscore[134])
<             (expr-> binding: score[134]))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[136]
<           (exprs: 
<             (expr->[value='TEST : twisted static chain'] string: 'TEST : twisted static chain'
<               type->(type->kind=string)))))
<       (stmt->assignstmt:
<         (expr-> binding: localscore[137])
<         (expr-> binexp: *
<           (expr->[value=2] int: 2
<             type->(type->kind=integer))
<           (expr-> call: isMethodCall=false twistedchain[137]
<             (exprs: 
<               (expr->[value=5] int: 5
<                 type->(type->kind=integer))
<               (expr->[value=0] int: 0
<                 type->(type->kind=integer))))))
<       (stmt->assignstmt:
<         (expr-> binding: score[138])
<         (expr-> binexp: +
<           (expr-> binding: score[138])
<           (expr-> binding: localscore[138])))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false printscores[139]
<           (exprs: 
<             (expr->[value=20] int: 20
<               type->(type->kind=integer))
<             (expr-> binding: localscore[139])
<             (expr-> binding: score[139]))))
<       (stmt->emptystmt:))))


testb2.err:
0a1,5
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testb2.parse:
1,78d0
< (program: 
<   (decls: 
<     (decl->program: stmt[1]))
<   (block: 
<     (decls: 
<       (decl->variable: int[3]
<         (type->kind=ident: integer[3]))
<       (decl->variable: bol[4]
<         (type->kind=ident: boolean[4]))
<       (decl->variable: d[5]
<         (type->kind=ident: integer[5]))
<       (decl->variable: c[5]
<         (type->kind=ident: integer[5]))
<       (decl->const: r[6]
<         (expr->[value=2] int: 2
<           type->(type->kind=integer))))
<     (stmts: 
<       (stmt->casestmt:
<         (expr-> binding: r[10])
<         (caselist: 
<           (labellist: 
<             (expr->[value=1] int: 1
<               type->(type->kind=integer)))
<           (stmt->emptystmt:)
<           (labellist: 
<             (expr->[value=2] int: 2
<               type->(type->kind=integer)))
<           (stmt->assignstmt:
<             (expr-> binding: bol[12])
<             (expr-> binexp: and
<               (expr-> binexp: <>
<                 (expr-> binding: true[12])
<                 (expr-> binding: false[12]))
<               (expr-> binding: true[12])))
<           (labellist: 
<             (expr->[value=3] int: 3
<               type->(type->kind=integer)))
<           (stmt->emptystmt:)))
<       (stmt->assignstmt:
<         (expr-> binding: c[16])
<         (expr->[value=43] int: 43
<           type->(type->kind=integer)))
<       (stmt->assignstmt:
<         (expr-> binding: d[17])
<         (expr->[value=1] int: 1
<           type->(type->kind=integer)))
<       (stmt->repeatstmt:
<         (expr-> binexp: =
<           (expr-> binding: d[21])
<           (expr->[value=4] int: 4
<             type->(type->kind=integer)))
<         (stmts: 
<           (stmt->assignstmt:
<             (expr-> binding: int[19])
<             (expr-> binexp: +
<               (expr-> binexp: *
<                 (expr->[value=234] int: 234
<                   type->(type->kind=integer))
<                 (expr-> binding: c[19]))
<               (expr-> binexp: div
<                 (expr-> binexp: -
<                   (expr-> binding: c[19])
<                   (expr->[value=6] int: 6
<                     type->(type->kind=integer)))
<                 (expr-> binexp: +
<                   (expr-> binding: d[19])
<                   (expr-> binexp: *
<                     (expr->[value=5] int: 5
<                       type->(type->kind=integer))
<                     (expr-> binding: c[19]))))))
<           (stmt->assignstmt:
<             (expr-> binding: d[20])
<             (expr-> binexp: +
<               (expr-> binding: d[20])
<               (expr->[value=1] int: 1
<                 type->(type->kind=integer))))
<           (stmt->emptystmt:)))
<       (stmt->emptystmt:))))


testbad.err:
1,3c1,5
< line 21: Syntax Error: @(
< line 42: Syntax Error: begin
< line 95: Syntax Error: @.
---
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testbranch.err:
0a1,5
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testbranch.parse:
1,169d0
< (program: 
<   (decls: 
<     (decl->program: testbranch[1]))
<   (block: 
<     (decls: 
<       (decl->procedure: reached[3]
<         (block: 
<           (decls: 
<             (decl->variable: x[5]
<               (type->kind=ident: integer[5]))
<             (decl->variable: y[5]
<               (type->kind=ident: integer[5])))
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: x[7])
<               (expr->[value=1] int: 1
<                 type->(type->kind=integer)))
<             (stmt->assignstmt:
<               (expr-> binding: y[8])
<               (expr-> binexp: -
<                 (expr->[value=2] int: 2
<                   type->(type->kind=integer))
<                 (expr-> binding: x[8])))
<             (stmt->ifstmt: 
<               (expr-> binexp: <>
<                 (expr-> binding: x[9])
<                 (expr-> binding: y[9]))
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->callstmt:
<                     (expr-> binding: unreached[10]))
<                   (stmt->callstmt:
<                     (expr-> call: isMethodCall=false write[11]
<                       (exprs: 
<                         (expr->[value='bar'] string: 'bar'
<                           type->(type->kind=string)))))
<                   (stmt->emptystmt:))))
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=false writeln[13]
<                 (exprs: 
<                   (expr->[value='foo'] string: 'foo'
<                     type->(type->kind=string)))))
<             (stmt->emptystmt:))))
<       (decl->procedure: unreached[16]
<         (block: 
<           (stmts: 
<             (stmt->emptystmt:))))
<       (decl->procedure: branchingforms[20]
<         (block: 
<           (decls: 
<             (decl->variable: x[22]
<               (type->kind=ident: integer[22]))
<             (decl->variable: y[22]
<               (type->kind=ident: integer[22]))
<             (decl->variable: z[22]
<               (type->kind=ident: integer[22]))
<             (decl->variable: a[22]
<               (type->kind=ident: integer[22]))
<             (decl->variable: b[22]
<               (type->kind=ident: integer[22]))
<             (decl->variable: c[22]
<               (type->kind=ident: integer[22]))
<             (decl->variable: bb[23]
<               (type->kind=ident: boolean[23])))
<           (stmts: 
<             (stmt->ifstmt: 
<               (expr-> binexp: and
<                 (expr-> binexp: <
<                   (expr-> binding: x[25])
<                   (expr-> binding: y[25]))
<                 (expr-> binexp: <
<                   (expr-> binding: y[25])
<                   (expr-> binding: z[25])))
<               (stmt->assignstmt:
<                 (expr-> binding: bb[25])
<                 (expr-> binding: true[25])))
<             (stmt->whilestmt:
<               (expr-> binexp: or
<                 (expr-> binexp: <>
<                   (expr-> binding: a[26])
<                   (expr-> binding: b[26]))
<                 (expr-> binexp: =
<                   (expr-> binding: z[26])
<                   (expr->[value=0] int: 0
<                     type->(type->kind=integer))))
<               (stmt->assignstmt:
<                 (expr-> binding: x[26])
<                 (expr-> binexp: +
<                   (expr-> binding: x[26])
<                   (expr->[value=1] int: 1
<                     type->(type->kind=integer)))))
<             (stmt->repeatstmt:
<               (expr-> unexp: not
<                 (expr-> binexp: or
<                   (expr-> binexp: or
<                     (expr-> binexp: =
<                       (expr-> binding: a[27])
<                       (expr-> binding: b[27]))
<                     (expr-> binexp: <>
<                       (expr-> binding: y[27])
<                       (expr-> binding: z[27])))
<                   (expr-> binding: bb[27])))
<               (stmts: 
<                 (stmt->assignstmt:
<                   (expr-> binding: z[27])
<                   (expr-> binexp: +
<                     (expr-> binding: z[27])
<                     (expr->[value=2] int: 2
<                       type->(type->kind=integer))))
<                 (stmt->emptystmt:)))
<             (stmt->emptystmt:))))
<       (decl->variable: z[31]
<         (type->kind=ident: integer[31])))
<     (stmts: 
<       (stmt->assignstmt:
<         (expr-> binding: z[34])
<         (expr->[value=0] int: 0
<           type->(type->kind=integer)))
<       (stmt->callstmt:
<         (expr-> binding: reached[35]))
<       (stmt->ifstmt: 
<         (expr-> binexp: <>
<           (expr-> binding: z[36])
<           (expr->[value=0] int: 0
<             type->(type->kind=integer)))
<         (stmt->ifstmt: 
<           (expr-> binexp: <>
<             (expr-> binding: z[37])
<             (expr->[value=1] int: 1
<               type->(type->kind=integer)))
<           (stmt->assignstmt:
<             (expr-> binding: z[37])
<             (expr->[value=2] int: 2
<               type->(type->kind=integer)))
<           (else: 
<             (stmt->assignstmt:
<               (expr-> binding: z[37])
<               (expr->[value=3] int: 3
<                 type->(type->kind=integer)))))
<         (else: 
<           (stmt->ifstmt: 
<             (expr-> binexp: <>
<               (expr-> binding: z[38])
<               (expr->[value=4] int: 4
<                 type->(type->kind=integer)))
<             (stmt->assignstmt:
<               (expr-> binding: z[38])
<               (expr->[value=5] int: 5
<                 type->(type->kind=integer)))
<             (else: 
<               (stmt->assignstmt:
<                 (expr-> binding: z[38])
<                 (expr->[value=6] int: 6
<                   type->(type->kind=integer)))))))
<       (stmt->whilestmt:
<         (expr-> binding: false[39])
<         (stmt->assignstmt:
<           (expr-> binding: z[40])
<           (expr-> binexp: +
<             (expr-> binding: z[40])
<             (expr->[value=1] int: 1
<               type->(type->kind=integer)))))
<       (stmt->assignstmt:
<         (expr-> binding: z[41])
<         (expr-> binexp: +
<           (expr-> binding: z[41])
<           (expr->[value=100] int: 100
<             type->(type->kind=integer))))
<       (stmt->emptystmt:))))


testcall.err:
0a1,5
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testcall.parse:
1,248d0
< (program: 
<   (decls: 
<     (decl->program: testcall[1]))
<   (block: 
<     (decls: 
<       (decl->type: r[3]
<         (type->kind=record:
<           (fields: 
<             (decl->field: a[3]
<               (type->kind=ident: integer[3]))
<             (decl->field: b[3]
<               (type->kind=ident: integer[3])))))
<       (decl->type: pt[4]
<         (type->kind=pointer:
<           ))
<       (decl->variable: rr[6]
<         (type->kind=ident: r[6]))
<       (decl->variable: ii[6]
<         (type->kind=ident: integer[6]))
<       (decl->variable: pp[6]
<         (type->kind=ident: pt[6]))
<       (decl->procedure: p1[8]
<         (formals: 
<           (decl->formal x[8]
<             (varmode=false)
<             (type->kind=ident: r[8]))
<           (decl->formal y[8]
<             (varmode=true)
<             (type->kind=ident: r[8]))
<           (decl->formal i[8]
<             (varmode=false)
<             (type->kind=ident: integer[8]))
<           (decl->formal j[8]
<             (varmode=true)
<             (type->kind=ident: integer[8]))
<           (decl->formal p[9]
<             (varmode=false)
<             (type->kind=ident: pt[9]))
<           (decl->formal q[9]
<             (varmode=true)
<             (type->kind=ident: pt[9])))
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: y[11])
<               (expr-> binding: x[11]))
<             (stmt->assignstmt:
<               (expr-> binexp: .
<                 (expr-> binding: x[12])
<                 (expr-> id: a))
<               (expr-> binexp: .
<                 (expr-> binding: y[12])
<                 (expr-> id: a)))
<             (stmt->assignstmt:
<               (expr-> binding: i[13])
<               (expr-> binding: j[13]))
<             (stmt->assignstmt:
<               (expr-> binding: j[14])
<               (expr-> binding: i[14]))
<             (stmt->assignstmt:
<               (expr-> binding: i[15])
<               (expr-> binexp: .
<                 (expr-> unexp: ^
<                   (expr-> binding: p[15]))
<                 (expr-> id: a)))
<             (stmt->assignstmt:
<               (expr-> binding: i[16])
<               (expr-> binexp: .
<                 (expr-> unexp: ^
<                   (expr-> binding: p[16]))
<                 (expr-> id: b)))
<             (stmt->assignstmt:
<               (expr-> binding: i[17])
<               (expr-> binexp: .
<                 (expr-> unexp: ^
<                   (expr-> binding: q[17]))
<                 (expr-> id: a)))
<             (stmt->assignstmt:
<               (expr-> binding: i[18])
<               (expr-> binexp: .
<                 (expr-> unexp: ^
<                   (expr-> binding: q[18]))
<                 (expr-> id: b)))
<             (stmt->emptystmt:))))
<       (decl->function: f1[21]
<         (formals: 
<           (decl->formal x[21]
<             (varmode=false)
<             (type->kind=ident: r[21])))
<         (type->kind=ident: r[21])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: f1[23])
<               (expr-> binding: x[23]))
<             (stmt->assignstmt:
<               (expr-> binding: f1[24])
<               (expr-> binding: rr[24]))
<             (stmt->emptystmt:))))
<       (decl->function: f2[27]
<         (formals: 
<           (decl->formal i[27]
<             (varmode=true)
<             (type->kind=ident: integer[27])))
<         (type->kind=ident: integer[27])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: f2[29])
<               (expr-> binexp: +
<                 (expr-> binding: i[29])
<                 (expr->[value=2] int: 2
<                   type->(type->kind=integer))))
<             (stmt->emptystmt:))))
<       (decl->function: f3[32]
<         (type->kind=ident: pt[32])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: f3[34])
<               (expr-> binding: pp[34]))
<             (stmt->emptystmt:))))
<       (decl->variable: nesting[37]
<         (type->kind=ident: integer[37]))
<       (decl->procedure: nest1[39]
<         (block: 
<           (decls: 
<             (decl->procedure: nest2[40]
<               (block: 
<                 (decls: 
<                   (decl->procedure: nest3[41]
<                     (block: 
<                       (stmts: 
<                         (stmt->assignstmt:
<                           (expr-> binding: nesting[43])
<                           (expr-> binexp: -
<                             (expr-> binding: nesting[43])
<                             (expr->[value=1] int: 1
<                               type->(type->kind=integer))))
<                         (stmt->ifstmt: 
<                           (expr-> binexp: >
<                             (expr-> binding: nesting[44])
<                             (expr->[value=0] int: 0
<                               type->(type->kind=integer)))
<                           (stmt->compoundstmt:
<                             (stmts: 
<                               (stmt->callstmt:
<                                 (expr-> binding: nest3[45]))
<                               (stmt->callstmt:
<                                 (expr-> binding: nest2[46]))
<                               (stmt->callstmt:
<                                 (expr-> binding: nest1[47]))
<                               (stmt->emptystmt:))))
<                         (stmt->assignstmt:
<                           (expr-> binding: nesting[49])
<                           (expr-> binexp: +
<                             (expr-> binding: nesting[49])
<                             (expr->[value=1] int: 1
<                               type->(type->kind=integer))))
<                         (stmt->emptystmt:)))))
<                 (stmts: 
<                   (stmt->assignstmt:
<                     (expr-> binding: nesting[52])
<                     (expr-> binexp: -
<                       (expr-> binding: nesting[52])
<                       (expr->[value=1] int: 1
<                         type->(type->kind=integer))))
<                   (stmt->ifstmt: 
<                     (expr-> binexp: >
<                       (expr-> binding: nesting[53])
<                       (expr->[value=0] int: 0
<                         type->(type->kind=integer)))
<                     (stmt->compoundstmt:
<                       (stmts: 
<                         (stmt->callstmt:
<                           (expr-> binding: nest3[54]))
<                         (stmt->callstmt:
<                           (expr-> binding: nest2[55]))
<                         (stmt->callstmt:
<                           (expr-> binding: nest1[56]))
<                         (stmt->emptystmt:))))
<                   (stmt->assignstmt:
<                     (expr-> binding: nesting[58])
<                     (expr-> binexp: +
<                       (expr-> binding: nesting[58])
<                       (expr->[value=1] int: 1
<                         type->(type->kind=integer))))
<                   (stmt->emptystmt:)))))
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: nesting[61])
<               (expr-> binexp: -
<                 (expr-> binding: nesting[61])
<                 (expr->[value=1] int: 1
<                   type->(type->kind=integer))))
<             (stmt->ifstmt: 
<               (expr-> binexp: >
<                 (expr-> binding: nesting[62])
<                 (expr->[value=0] int: 0
<                   type->(type->kind=integer)))
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->callstmt:
<                     (expr-> binding: nest2[63]))
<                   (stmt->callstmt:
<                     (expr-> binding: nest1[64]))
<                   (stmt->emptystmt:))))
<             (stmt->assignstmt:
<               (expr-> binding: nesting[66])
<               (expr-> binexp: +
<                 (expr-> binding: nesting[66])
<                 (expr->[value=1] int: 1
<                   type->(type->kind=integer))))
<             (stmt->emptystmt:)))))
<     (stmts: 
<       (stmt->assignstmt:
<         (expr-> binding: nesting[70])
<         (expr->[value=10] int: 10
<           type->(type->kind=integer)))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false new[71]
<           (exprs: 
<             (expr-> binding: pp[71]))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false p1[72]
<           (exprs: 
<             (expr-> binding: rr[72])
<             (expr-> binding: rr[72])
<             (expr-> binding: ii[72])
<             (expr-> binding: ii[72])
<             (expr-> binding: pp[72])
<             (expr-> binding: pp[72]))))
<       (stmt->assignstmt:
<         (expr-> binding: rr[73])
<         (expr-> call: isMethodCall=false f1[73]
<           (exprs: 
<             (expr-> binding: rr[73]))))
<       (stmt->assignstmt:
<         (expr-> binding: ii[74])
<         (expr-> call: isMethodCall=false f2[74]
<           (exprs: 
<             (expr-> binding: ii[74]))))
<       (stmt->assignstmt:
<         (expr-> binding: pp[75])
<         (expr-> binding: f3[75]))
<       (stmt->callstmt:
<         (expr-> binding: nest1[76]))
<       (stmt->emptystmt:))))


testdead.err:
0a1,5
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testdead.parse:
1,70d0
< (program: 
<   (decls: 
<     (decl->program: test[1]))
<   (block: 
<     (decls: 
<       (decl->type: tabs1[4]
<         (type->kind=pointer:
<           (type->kind=object: name=tabs1
<             (extends: (type->kind=ident: root[4]))
<             (abstract: true)
<             (fields: 
<               (decl->field: x[4]
<                 (type->kind=ident: integer[4]))))))
<       (decl->type: tconc11[5]
<         (type->kind=pointer:
<           (type->kind=object: name=tconc11
<             (extends: (type->kind=ident: tabs1[5]))
<             (abstract: false)
<             (fields: 
<               (decl->field: y[5]
<                 (type->kind=ident: integer[5]))))))
<       (decl->type: tconc12[6]
<         (type->kind=pointer:
<           (type->kind=object: name=tconc12
<             (extends: (type->kind=ident: tabs1[6]))
<             (abstract: false)
<             (fields: 
<               (decl->field: z[6]
<                 (type->kind=ident: integer[6]))))))
<       (decl->type: tabs2[7]
<         (type->kind=pointer:
<           (type->kind=object: name=tabs2
<             (extends: (type->kind=ident: root[4]))
<             (abstract: true)
<             (fields: 
<               (decl->field: b[7]
<                 (type->kind=ident: boolean[7]))))))
<       (decl->variable: p1[9]
<         (type->kind=ident: tabs1[9])))
<     (stmts: 
<       (stmt->assignstmt:
<         (expr-> binding: p1[12])
<         (expr-> call: isMethodCall=false new[12]
<           (exprs: 
<             (expr-> binding: tconc11[12]))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[13]
<           (exprs: 
<             (expr->[value='Got here!'] string: 'Got here!'
<               type->(type->kind=string)))))
<       (stmt->whilestmt:
<         (expr-> binding: true[14])
<         (stmt->callstmt:
<           (expr-> call: isMethodCall=false writeln[15]
<             (exprs: 
<               (expr->[value='Hello World'] string: 'Hello World'
<                 type->(type->kind=string))))))
<       (stmt->whilestmt:
<         (expr-> binding: false[16])
<         (stmt->callstmt:
<           (expr-> call: isMethodCall=false writeln[17]
<             (exprs: 
<               (expr->[value='Not more?'] string: 'Not more?'
<                 type->(type->kind=string))))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[18]
<           (exprs: 
<             (expr->[value='More?'] string: 'More?'
<               type->(type->kind=string)))))
<       (stmt->emptystmt:))))


testdiv.err:
0a1,5
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testdiv.parse:
1,25d0
< (program: 
<   (decls: 
<     (decl->program: testdiv[1]))
<   (block: 
<     (decls: 
<       (decl->variable: i[2]
<         (type->kind=ident: integer[2]))
<       (decl->variable: j[2]
<         (type->kind=ident: integer[2]))
<       (decl->variable: k[2]
<         (type->kind=ident: integer[2])))
<     (stmts: 
<       (stmt->assignstmt:
<         (expr-> binding: i[4])
<         (expr-> binexp: div
<           (expr-> binding: j[4])
<           (expr->[value=0] int: 0
<             type->(type->kind=integer))))
<       (stmt->assignstmt:
<         (expr-> binding: i[5])
<         (expr-> binexp: mod
<           (expr-> binding: j[5])
<           (expr->[value=0] int: 0
<             type->(type->kind=integer))))
<       (stmt->emptystmt:))))


testfor.err:
0a1,5
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testfor.parse:
1,85d0
< (program: 
<   (decls: 
<     (decl->program: testfor[1]))
<   (block: 
<     (decls: 
<       (decl->variable: i[3]
<         (type->kind=ident: integer[3]))
<       (decl->variable: m[4]
<         (type->kind=subrange:
<           (expr->[value=1] int: 1
<             type->(type->kind=integer))
<           (expr->[value=10] int: 10
<             type->(type->kind=integer))))
<       (decl->variable: n[4]
<         (type->kind=subrange:
<           (expr->[value=1] int: 1
<             type->(type->kind=integer))
<           (expr->[value=10] int: 10
<             type->(type->kind=integer))))
<       (decl->variable: x[5]
<         (type->kind=ident: integer[5])))
<     (stmts: 
<       (stmt->assignstmt:
<         (expr-> binding: x[7])
<         (expr->[value=0] int: 0
<           type->(type->kind=integer)))
<       (stmt->forstmt:i[8]
<         (expr->[value=1] int: 1
<           type->(type->kind=integer))
<         (expr->[value=10] int: 10
<           type->(type->kind=integer))
<         (upward:true)
<         (stmt->assignstmt:
<           (expr-> binding: x[9])
<           (expr-> binexp: +
<             (expr-> binding: x[9])
<             (expr-> binding: i[9]))))
<       (stmt->assignstmt:
<         (expr-> binding: x[10])
<         (expr->[value=0] int: 0
<           type->(type->kind=integer)))
<       (stmt->forstmt:n[11]
<         (expr->[value=1] int: 1
<           type->(type->kind=integer))
<         (expr->[value=10] int: 10
<           type->(type->kind=integer))
<         (upward:true)
<         (stmt->assignstmt:
<           (expr-> binding: x[12])
<           (expr-> binexp: +
<             (expr-> binding: x[12])
<             (expr->[value=1] int: 1
<               type->(type->kind=integer)))))
<       (stmt->forstmt:n[13]
<         (expr->[value=1] int: 1
<           type->(type->kind=integer))
<         (expr-> binding: m[13])
<         (upward:true)
<         (stmt->assignstmt:
<           (expr-> binding: x[14])
<           (expr-> binexp: +
<             (expr-> binding: x[14])
<             (expr->[value=1] int: 1
<               type->(type->kind=integer)))))
<       (stmt->forstmt:n[15]
<         (expr-> binding: m[15])
<         (expr-> binding: m[15])
<         (upward:false)
<         (stmt->assignstmt:
<           (expr-> binding: x[16])
<           (expr-> binexp: -
<             (expr-> binding: x[16])
<             (expr->[value=1] int: 1
<               type->(type->kind=integer)))))
<       (stmt->forstmt:n[17]
<         (expr-> binding: i[17])
<         (expr-> binding: i[17])
<         (upward:true)
<         (stmt->assignstmt:
<           (expr-> binding: x[18])
<           (expr-> binexp: +
<             (expr-> binding: x[18])
<             (expr->[value=2] int: 2
<               type->(type->kind=integer)))))
<       (stmt->emptystmt:))))


testgood.err:
0a1,5
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testgood.parse:
1,93d0
< (program: 
<   (decls: 
<     (decl->program: test[1]))
<   (block: 
<     (decls: 
<       (decl->const: n[3]
<         (expr->[value=10] int: 10
<           type->(type->kind=integer)))
<       (decl->function: incr[5]
<         (formals: 
<           (decl->formal x[5]
<             (varmode=false)
<             (type->kind=ident: integer[5])))
<         (type->kind=ident: integer[5])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: incr[7])
<               (expr-> binexp: +
<                 (expr-> binding: x[7])
<                 (expr->[value=1] int: 1
<                   type->(type->kind=integer))))
<             (stmt->emptystmt:))))
<       (decl->variable: i[10]
<         (type->kind=ident: integer[10]))
<       (decl->variable: w1[11]
<         (type->kind=ident: integer[11]))
<       (decl->variable: w2[11]
<         (type->kind=ident: integer[11]))
<       (decl->variable: w3[11]
<         (type->kind=ident: integer[11])))
<     (stmts: 
<       (stmt->assignstmt:
<         (expr-> binding: i[12])
<         (expr->[value=0] int: 0
<           type->(type->kind=integer)))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false readln[13]
<           (exprs: 
<             (expr-> binding: w1[13])
<             (expr-> binding: w2[13])
<             (expr-> binding: w3[13]))))
<       (stmt->repeatstmt:
<         (expr-> binexp: =
<           (expr-> binding: i[20])
<           (expr-> call: isMethodCall=false incr[20]
<             (exprs: 
<               (expr-> binding: n[20]))))
<         (stmts: 
<           (stmt->assignstmt:
<             (expr-> binding: i[14])
<             (expr-> binexp: +
<               (expr-> binding: i[14])
<               (expr->[value=1] int: 1
<                 type->(type->kind=integer))))
<           (stmt->assignstmt:
<             (expr-> binding: w1[15])
<             (expr-> binexp: *
<               (expr-> binding: w1[15])
<               (expr->[value=1] int: 1
<                 type->(type->kind=integer))))
<           (stmt->assignstmt:
<             (expr-> binding: w2[16])
<             (expr-> binexp: *
<               (expr-> binding: w2[16])
<               (expr->[value=2] int: 2
<                 type->(type->kind=integer))))
<           (stmt->assignstmt:
<             (expr-> binding: w3[17])
<             (expr-> binexp: *
<               (expr-> binding: w3[17])
<               (expr->[value=3] int: 3
<                 type->(type->kind=integer))))
<           (stmt->callstmt:
<             (expr-> call: isMethodCall=false writeln[18]
<               (exprs: 
<                 (expr->[value='this is a test '] string: 'this is a test '
<                   type->(type->kind=string))
<                 (expr-> binding: i[18])
<                 (expr->[value=' :'] string: ' :'
<                   type->(type->kind=string)))))
<           (stmt->callstmt:
<             (expr-> call: isMethodCall=false writeln[19]
<               (exprs: 
<                 (expr->[value=' '] string: ' '
<                   type->(type->kind=string))
<                 (expr-> binding: w3[19])
<                 (expr->[value=' '] string: ' '
<                   type->(type->kind=string))
<                 (expr-> binding: w2[19])
<                 (expr->[value=' '] string: ' '
<                   type->(type->kind=string))
<                 (expr-> binding: w1[19])))))))))


testio.err:
0a1,5
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testio.parse:
1,39d0
< (program: 
<   (decls: 
<     (decl->program: test[1]))
<   (block: 
<     (decls: 
<       (decl->const: a[3]
<         (expr->[value=10] int: 10
<           type->(type->kind=integer)))
<       (decl->const: b[4]
<         (expr->[value=20] int: 20
<           type->(type->kind=integer)))
<       (decl->variable: x[6]
<         (type->kind=ident: integer[6]))
<       (decl->variable: y[6]
<         (type->kind=ident: integer[6]))
<       (decl->variable: z[6]
<         (type->kind=ident: integer[6])))
<     (stmts: 
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false readln[8]
<           (exprs: 
<             (expr-> binding: x[8])
<             (expr-> binding: y[8]))))
<       (stmt->assignstmt:
<         (expr-> binding: x[9])
<         (expr-> binexp: +
<           (expr-> binexp: +
<             (expr-> binexp: +
<               (expr-> binding: x[9])
<               (expr-> binding: y[9]))
<             (expr-> binding: a[9]))
<           (expr-> binding: b[9])))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[10]
<           (exprs: 
<             (expr->[value='X = '] string: 'X = '
<               type->(type->kind=string))
<             (expr-> binding: x[10]))))
<       (stmt->emptystmt:))))


testmin.err:
0a1,5
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testmin.parse:
1,45d0
< (program: 
<   (decls: 
<     (decl->program: test[1]))
<   (block: 
<     (decls: 
<       (decl->const: n[3]
<         (expr-> binding: true[3]))
<       (decl->variable: b[5]
<         (type->kind=ident: boolean[5]))
<       (decl->variable: w1[6]
<         (type->kind=ident: boolean[6]))
<       (decl->variable: w2[6]
<         (type->kind=ident: boolean[6]))
<       (decl->variable: w3[6]
<         (type->kind=ident: boolean[6])))
<     (stmts: 
<       (stmt->assignstmt:
<         (expr-> binding: b[7])
<         (expr-> binding: false[7]))
<       (stmt->whilestmt:
<         (expr-> binexp: =
<           (expr-> binding: b[8])
<           (expr-> binding: n[8]))
<         (stmt->compoundstmt:
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: w1[10])
<               (expr-> binexp: and
<                 (expr-> binding: w1[10])
<                 (expr-> binding: true[10])))
<             (stmt->assignstmt:
<               (expr-> binding: w2[11])
<               (expr-> binexp: or
<                 (expr-> binding: w2[11])
<                 (expr-> binding: false[11])))
<             (stmt->assignstmt:
<               (expr-> binding: w3[12])
<               (expr-> unexp: not
<                 (expr-> binexp: or
<                   (expr-> binding: w3[12])
<                   (expr-> binexp: and
<                     (expr-> binding: w2[12])
<                     (expr-> binding: w1[12])))))
<             (stmt->emptystmt:))))
<       (stmt->emptystmt:))))


testmisc.err:
0a1,5
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testmisc.parse:
1,938d0
< (program: 
<   (decls: 
<     (decl->program: phase4test[1]))
<   (block: 
<     (decls: 
<       (decl->const: firstval[4]
<         (expr->[value=1] int: 1
<           type->(type->kind=integer)))
<       (decl->const: lastval[5]
<         (expr->[value=5] int: 5
<           type->(type->kind=integer)))
<       (decl->const: exitval[6]
<         (expr->[value=3] int: 3
<           type->(type->kind=integer)))
<       (decl->variable: i[9]
<         (type->kind=ident: integer[9]))
<       (decl->variable: j[9]
<         (type->kind=ident: integer[9]))
<       (decl->variable: k[9]
<         (type->kind=ident: integer[9]))
<       (decl->variable: l[10]
<         (type->kind=ident: boolean[10]))
<       (decl->variable: x[14]
<         (type->kind=ident: integer[14]))
<       (decl->variable: y[14]
<         (type->kind=ident: integer[14]))
<       (decl->variable: z[14]
<         (type->kind=ident: integer[14]))
<       (decl->procedure: passints[16]
<         (formals: 
<           (decl->formal x[16]
<             (varmode=false)
<             (type->kind=ident: integer[16]))
<           (decl->formal y[16]
<             (varmode=false)
<             (type->kind=ident: integer[16]))
<           (decl->formal z[16]
<             (varmode=false)
<             (type->kind=ident: integer[16])))
<         (block: 
<           (stmts: 
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=false writeln[18]
<                 (exprs: 
<                   (expr->[value='Values of arguments x, y, z within passints: '] string: 'Values of arguments x, y, z within passints: '
<                     type->(type->kind=string))
<                   (expr-> binding: x[18])
<                   (expr->[value=' '] string: ' '
<                     type->(type->kind=string))
<                   (expr-> binding: y[18])
<                   (expr->[value=' '] string: ' '
<                     type->(type->kind=string))
<                   (expr-> binding: z[18]))))
<             (stmt->emptystmt:))))
<       (decl->function: factorial[22]
<         (formals: 
<           (decl->formal n[22]
<             (varmode=false)
<             (type->kind=ident: integer[22])))
<         (type->kind=ident: integer[22])
<         (block: 
<           (stmts: 
<             (stmt->ifstmt: 
<               (expr-> binexp: <=
<                 (expr-> binding: n[24])
<                 (expr->[value=2] int: 2
<                   type->(type->kind=integer)))
<               (stmt->assignstmt:
<                 (expr-> binding: factorial[25])
<                 (expr-> binding: n[25]))
<               (else: 
<                 (stmt->assignstmt:
<                   (expr-> binding: factorial[27])
<                   (expr-> binexp: *
<                     (expr-> binding: n[27])
<                     (expr-> call: isMethodCall=false factorial[27]
<                       (exprs: 
<                         (expr-> binexp: -
<                           (expr-> binding: n[27])
<                           (expr->[value=1] int: 1
<                             type->(type->kind=integer)))))))))
<             (stmt->emptystmt:))))
<       (decl->function: prime[32]
<         (formals: 
<           (decl->formal n[32]
<             (varmode=false)
<             (type->kind=ident: integer[32])))
<         (type->kind=ident: boolean[32])
<         (block: 
<           (decls: 
<             (decl->variable: result[34]
<               (type->kind=ident: boolean[34]))
<             (decl->variable: loop[34]
<               (type->kind=ident: boolean[34]))
<             (decl->variable: i[35]
<               (type->kind=ident: integer[35])))
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: result[37])
<               (expr-> binding: true[37]))
<             (stmt->ifstmt: 
<               (expr-> binexp: >=
<                 (expr-> binding: n[38])
<                 (expr->[value=2] int: 2
<                   type->(type->kind=integer)))
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->ifstmt: 
<                     (expr-> binexp: <>
<                       (expr-> binexp: mod
<                         (expr-> binding: n[40])
<                         (expr->[value=2] int: 2
<                           type->(type->kind=integer)))
<                       (expr->[value=0] int: 0
<                         type->(type->kind=integer)))
<                     (stmt->compoundstmt:
<                       (stmts: 
<                         (stmt->assignstmt:
<                           (expr-> binding: i[42])
<                           (expr->[value=3] int: 3
<                             type->(type->kind=integer)))
<                         (stmt->assignstmt:
<                           (expr-> binding: loop[43])
<                           (expr-> binding: true[43]))
<                         (stmt->whilestmt:
<                           (expr-> binding: loop[44])
<                           (stmt->compoundstmt:
<                             (stmts: 
<                               (stmt->ifstmt: 
<                                 (expr-> binexp: >
<                                   (expr-> binexp: *
<                                     (expr-> binding: i[46])
<                                     (expr-> binding: i[46]))
<                                   (expr-> binding: n[46]))
<                                 (stmt->compoundstmt:
<                                   (stmts: 
<                                     (stmt->assignstmt:
<                                       (expr-> binding: result[48])
<                                       (expr-> binding: true[48]))
<                                     (stmt->assignstmt:
<                                       (expr-> binding: loop[49])
<                                       (expr-> binding: false[49]))
<                                     (stmt->emptystmt:)))
<                                 (else: 
<                                   (stmt->ifstmt: 
<                                     (expr-> binexp: =
<                                       (expr-> binexp: mod
<                                         (expr-> binding: n[52])
<                                         (expr-> binding: i[52]))
<                                       (expr->[value=0] int: 0
<                                         type->(type->kind=integer)))
<                                     (stmt->compoundstmt:
<                                       (stmts: 
<                                         (stmt->assignstmt:
<                                           (expr-> binding: result[54])
<                                           (expr-> binding: false[54]))
<                                         (stmt->assignstmt:
<                                           (expr-> binding: loop[55])
<                                           (expr-> binding: false[55]))
<                                         (stmt->emptystmt:)))
<                                     (else: 
<                                       (stmt->assignstmt:
<                                         (expr-> binding: i[57])
<                                         (expr-> binexp: +
<                                           (expr-> binding: i[57])
<                                           (expr->[value=1] int: 1
<                                             type->(type->kind=integer))))))))
<                               (stmt->emptystmt:))))
<                         (stmt->emptystmt:)))
<                     (else: 
<                       (stmt->assignstmt:
<                         (expr-> binding: result[60])
<                         (expr-> binding: false[60]))))
<                   (stmt->emptystmt:)))
<               (else: 
<                 (stmt->assignstmt:
<                   (expr-> binding: result[62])
<                   (expr-> binding: false[62]))))
<             (stmt->assignstmt:
<               (expr-> binding: prime[63])
<               (expr-> binding: result[63]))
<             (stmt->emptystmt:))))
<       (decl->procedure: simple[67]
<         (formals: 
<           (decl->formal a[67]
<             (varmode=false)
<             (type->kind=ident: integer[67]))
<           (decl->formal b[67]
<             (varmode=true)
<             (type->kind=ident: integer[67]))
<           (decl->formal c[67]
<             (varmode=false)
<             (type->kind=ident: boolean[67])))
<         (block: 
<           (stmts: 
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=false writeln[69]
<                 (exprs: 
<                   (expr->[value='enter procedure a='] string: 'enter procedure a='
<                     type->(type->kind=string))
<                   (expr-> binding: a[69])
<                   (expr->[value=', b='] string: ', b='
<                     type->(type->kind=string))
<                   (expr-> binding: b[69])
<                   (expr->[value=', c='] string: ', c='
<                     type->(type->kind=string))
<                   (expr-> binding: c[69]))))
<             (stmt->ifstmt: 
<               (expr-> binding: c[70])
<               (stmt->assignstmt:
<                 (expr-> binding: b[70])
<                 (expr-> binexp: +
<                   (expr-> binding: a[70])
<                   (expr->[value=6] int: 6
<                     type->(type->kind=integer))))
<               (else: 
<                 (stmt->assignstmt:
<                   (expr-> binding: b[71])
<                   (expr-> binexp: -
<                     (expr-> binding: a[71])
<                     (expr->[value=6] int: 6
<                       type->(type->kind=integer))))))
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=false writeln[72]
<                 (exprs: 
<                   (expr->[value='exit procedure a='] string: 'exit procedure a='
<                     type->(type->kind=string))
<                   (expr-> binding: a[72])
<                   (expr->[value=', b='] string: ', b='
<                     type->(type->kind=string))
<                   (expr-> binding: b[72])
<                   (expr->[value=', c='] string: ', c='
<                     type->(type->kind=string))
<                   (expr-> binding: c[72]))))
<             (stmt->emptystmt:)))))
<     (stmts: 
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[78]
<           (exprs: 
<             (expr->[value='IF tests'] string: 'IF tests'
<               type->(type->kind=string)))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false write[79]
<           (exprs: 
<             (expr->[value='Enter an integer>'] string: 'Enter an integer>'
<               type->(type->kind=string)))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false readln[80]
<           (exprs: 
<             (expr-> binding: i[80]))))
<       (stmt->ifstmt: 
<         (expr-> binexp: >
<           (expr-> binding: i[81])
<           (expr->[value=0] int: 0
<             type->(type->kind=integer)))
<         (stmt->callstmt:
<           (expr-> call: isMethodCall=false writeln[82]
<             (exprs: 
<               (expr-> binding: i[82])
<               (expr->[value=' is a positive integer'] string: ' is a positive integer'
<                 type->(type->kind=string)))))
<         (else: 
<           (stmt->ifstmt: 
<             (expr-> binexp: <
<               (expr-> binding: i[83])
<               (expr->[value=0] int: 0
<                 type->(type->kind=integer)))
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=false writeln[84]
<                 (exprs: 
<                   (expr-> binding: i[84])
<                   (expr->[value=' is a negative integer'] string: ' is a negative integer'
<                     type->(type->kind=string)))))
<             (else: 
<               (stmt->callstmt:
<                 (expr-> call: isMethodCall=false writeln[86]
<                   (exprs: 
<                     (expr-> binding: i[86])
<                     (expr->[value=' is zero'] string: ' is zero'
<                       type->(type->kind=string)))))))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[88]
<           (exprs: 
<             (expr->[value='Nested IFs'] string: 'Nested IFs'
<               type->(type->kind=string)))))
<       (stmt->ifstmt: 
<         (expr-> binexp: >
<           (expr-> binding: i[89])
<           (expr->[value=0] int: 0
<             type->(type->kind=integer)))
<         (stmt->ifstmt: 
<           (expr-> binexp: =
<             (expr-> binexp: mod
<               (expr-> binding: i[90])
<               (expr->[value=2] int: 2
<                 type->(type->kind=integer)))
<             (expr->[value=0] int: 0
<               type->(type->kind=integer)))
<           (stmt->callstmt:
<             (expr-> call: isMethodCall=false writeln[91]
<               (exprs: 
<                 (expr-> binding: i[91])
<                 (expr->[value=' is a positive, even integer'] string: ' is a positive, even integer'
<                   type->(type->kind=string)))))
<           (else: 
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=false writeln[93]
<                 (exprs: 
<                   (expr-> binding: i[93])
<                   (expr->[value=' is a positive, odd integer'] string: ' is a positive, odd integer'
<                     type->(type->kind=string)))))))
<         (else: 
<           (stmt->ifstmt: 
<             (expr-> binexp: <
<               (expr-> binding: i[94])
<               (expr->[value=0] int: 0
<                 type->(type->kind=integer)))
<             (stmt->ifstmt: 
<               (expr-> binexp: =
<                 (expr-> binexp: mod
<                   (expr-> binding: i[95])
<                   (expr->[value=2] int: 2
<                     type->(type->kind=integer)))
<                 (expr->[value=0] int: 0
<                   type->(type->kind=integer)))
<               (stmt->callstmt:
<                 (expr-> call: isMethodCall=false writeln[96]
<                   (exprs: 
<                     (expr-> binding: i[96])
<                     (expr->[value=' is a negative, even integer'] string: ' is a negative, even integer'
<                       type->(type->kind=string)))))
<               (else: 
<                 (stmt->callstmt:
<                   (expr-> call: isMethodCall=false writeln[98]
<                     (exprs: 
<                       (expr-> binding: i[98])
<                       (expr->[value=' is a negative, odd integer'] string: ' is a negative, odd integer'
<                         type->(type->kind=string)))))))
<             (else: 
<               (stmt->callstmt:
<                 (expr-> call: isMethodCall=false writeln[100]
<                   (exprs: 
<                     (expr-> binding: i[100])
<                     (expr->[value=' is zero'] string: ' is zero'
<                       type->(type->kind=string)))))))))
<       (stmt->callstmt:
<         (expr-> binding: writeln[102]))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[103]
<           (exprs: 
<             (expr->[value='WHILE tests'] string: 'WHILE tests'
<               type->(type->kind=string)))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[104]
<           (exprs: 
<             (expr->[value='WHILE i <= 5'] string: 'WHILE i <= 5'
<               type->(type->kind=string)))))
<       (stmt->assignstmt:
<         (expr-> binding: i[105])
<         (expr->[value=1] int: 1
<           type->(type->kind=integer)))
<       (stmt->whilestmt:
<         (expr-> binexp: <=
<           (expr-> binding: i[106])
<           (expr->[value=5] int: 5
<             type->(type->kind=integer)))
<         (stmt->compoundstmt:
<           (stmts: 
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=false writeln[108]
<                 (exprs: 
<                   (expr->[value='i = '] string: 'i = '
<                     type->(type->kind=string))
<                   (expr-> binding: i[108]))))
<             (stmt->assignstmt:
<               (expr-> binding: i[109])
<               (expr-> binexp: +
<                 (expr-> binding: i[109])
<                 (expr->[value=1] int: 1
<                   type->(type->kind=integer)))))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[112]
<           (exprs: 
<             (expr->[value='WHILE i <= 1'] string: 'WHILE i <= 1'
<               type->(type->kind=string)))))
<       (stmt->assignstmt:
<         (expr-> binding: i[113])
<         (expr->[value=1] int: 1
<           type->(type->kind=integer)))
<       (stmt->whilestmt:
<         (expr-> binexp: <=
<           (expr-> binding: i[114])
<           (expr->[value=1] int: 1
<             type->(type->kind=integer)))
<         (stmt->compoundstmt:
<           (stmts: 
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=false writeln[116]
<                 (exprs: 
<                   (expr->[value='i = '] string: 'i = '
<                     type->(type->kind=string))
<                   (expr-> binding: i[116]))))
<             (stmt->assignstmt:
<               (expr-> binding: i[117])
<               (expr-> binexp: +
<                 (expr-> binding: i[117])
<                 (expr->[value=1] int: 1
<                   type->(type->kind=integer)))))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[119]
<           (exprs: 
<             (expr->[value='WHILE i <= 0'] string: 'WHILE i <= 0'
<               type->(type->kind=string)))))
<       (stmt->assignstmt:
<         (expr-> binding: i[120])
<         (expr->[value=1] int: 1
<           type->(type->kind=integer)))
<       (stmt->whilestmt:
<         (expr-> binexp: <=
<           (expr-> binding: i[121])
<           (expr->[value=0] int: 0
<             type->(type->kind=integer)))
<         (stmt->compoundstmt:
<           (stmts: 
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=false writeln[123]
<                 (exprs: 
<                   (expr->[value='i = '] string: 'i = '
<                     type->(type->kind=string))
<                   (expr-> binding: i[123]))))
<             (stmt->assignstmt:
<               (expr-> binding: i[124])
<               (expr-> binexp: +
<                 (expr-> binding: i[124])
<                 (expr->[value=1] int: 1
<                   type->(type->kind=integer)))))))
<       (stmt->assignstmt:
<         (expr-> binding: i[127])
<         (expr->[value=1] int: 1
<           type->(type->kind=integer)))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[128]
<           (exprs: 
<             (expr->[value='Nested WHILEs'] string: 'Nested WHILEs'
<               type->(type->kind=string)))))
<       (stmt->whilestmt:
<         (expr-> binexp: <=
<           (expr-> binding: i[129])
<           (expr->[value=3] int: 3
<             type->(type->kind=integer)))
<         (stmt->compoundstmt:
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: j[131])
<               (expr->[value=1] int: 1
<                 type->(type->kind=integer)))
<             (stmt->whilestmt:
<               (expr-> binexp: <=
<                 (expr-> binding: j[132])
<                 (expr->[value=3] int: 3
<                   type->(type->kind=integer)))
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->callstmt:
<                     (expr-> call: isMethodCall=false writeln[134]
<                       (exprs: 
<                         (expr-> binding: i[134])
<                         (expr->[value=' + '] string: ' + '
<                           type->(type->kind=string))
<                         (expr-> binding: j[134])
<                         (expr->[value=' = '] string: ' = '
<                           type->(type->kind=string))
<                         (expr-> binexp: +
<                           (expr-> binding: i[134])
<                           (expr-> binding: j[134])))))
<                   (stmt->assignstmt:
<                     (expr-> binding: j[135])
<                     (expr-> binexp: +
<                       (expr-> binding: j[135])
<                       (expr->[value=1] int: 1
<                         type->(type->kind=integer)))))))
<             (stmt->assignstmt:
<               (expr-> binding: i[137])
<               (expr-> binexp: +
<                 (expr-> binding: i[137])
<                 (expr->[value=1] int: 1
<                   type->(type->kind=integer))))
<             (stmt->emptystmt:))))
<       (stmt->callstmt:
<         (expr-> binding: writeln[140]))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[141]
<           (exprs: 
<             (expr->[value='REPEAT tests'] string: 'REPEAT tests'
<               type->(type->kind=string)))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[142]
<           (exprs: 
<             (expr->[value='REPEAT UNTIL i > 5'] string: 'REPEAT UNTIL i > 5'
<               type->(type->kind=string)))))
<       (stmt->assignstmt:
<         (expr-> binding: i[143])
<         (expr->[value=1] int: 1
<           type->(type->kind=integer)))
<       (stmt->repeatstmt:
<         (expr-> binexp: >
<           (expr-> binding: i[147])
<           (expr->[value=5] int: 5
<             type->(type->kind=integer)))
<         (stmts: 
<           (stmt->callstmt:
<             (expr-> call: isMethodCall=false writeln[145]
<               (exprs: 
<                 (expr->[value='i = '] string: 'i = '
<                   type->(type->kind=string))
<                 (expr-> binding: i[145]))))
<           (stmt->assignstmt:
<             (expr-> binding: i[146])
<             (expr-> binexp: +
<               (expr-> binding: i[146])
<               (expr->[value=1] int: 1
<                 type->(type->kind=integer))))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[148]
<           (exprs: 
<             (expr->[value='REPEAT UNTIL i > 1'] string: 'REPEAT UNTIL i > 1'
<               type->(type->kind=string)))))
<       (stmt->assignstmt:
<         (expr-> binding: i[149])
<         (expr->[value=1] int: 1
<           type->(type->kind=integer)))
<       (stmt->repeatstmt:
<         (expr-> binexp: >
<           (expr-> binding: i[153])
<           (expr->[value=1] int: 1
<             type->(type->kind=integer)))
<         (stmts: 
<           (stmt->callstmt:
<             (expr-> call: isMethodCall=false writeln[151]
<               (exprs: 
<                 (expr->[value='i = '] string: 'i = '
<                   type->(type->kind=string))
<                 (expr-> binding: i[151]))))
<           (stmt->assignstmt:
<             (expr-> binding: i[152])
<             (expr-> binexp: +
<               (expr-> binding: i[152])
<               (expr->[value=1] int: 1
<                 type->(type->kind=integer))))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[154]
<           (exprs: 
<             (expr->[value='REPEAT UNTIL i > 0'] string: 'REPEAT UNTIL i > 0'
<               type->(type->kind=string)))))
<       (stmt->assignstmt:
<         (expr-> binding: i[155])
<         (expr->[value=1] int: 1
<           type->(type->kind=integer)))
<       (stmt->repeatstmt:
<         (expr-> binexp: >
<           (expr-> binding: i[159])
<           (expr->[value=0] int: 0
<             type->(type->kind=integer)))
<         (stmts: 
<           (stmt->callstmt:
<             (expr-> call: isMethodCall=false writeln[157]
<               (exprs: 
<                 (expr->[value='i = '] string: 'i = '
<                   type->(type->kind=string))
<                 (expr-> binding: i[157]))))
<           (stmt->assignstmt:
<             (expr-> binding: i[158])
<             (expr-> binexp: +
<               (expr-> binding: i[158])
<               (expr->[value=1] int: 1
<                 type->(type->kind=integer))))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[160]
<           (exprs: 
<             (expr->[value='Nested REPEATs'] string: 'Nested REPEATs'
<               type->(type->kind=string)))))
<       (stmt->assignstmt:
<         (expr-> binding: i[161])
<         (expr->[value=1] int: 1
<           type->(type->kind=integer)))
<       (stmt->repeatstmt:
<         (expr-> binexp: >
<           (expr-> binding: i[169])
<           (expr->[value=3] int: 3
<             type->(type->kind=integer)))
<         (stmts: 
<           (stmt->assignstmt:
<             (expr-> binding: j[163])
<             (expr->[value=1] int: 1
<               type->(type->kind=integer)))
<           (stmt->repeatstmt:
<             (expr-> binexp: >
<               (expr-> binding: j[167])
<               (expr->[value=3] int: 3
<                 type->(type->kind=integer)))
<             (stmts: 
<               (stmt->callstmt:
<                 (expr-> call: isMethodCall=false writeln[165]
<                   (exprs: 
<                     (expr-> binding: i[165])
<                     (expr->[value=' + '] string: ' + '
<                       type->(type->kind=string))
<                     (expr-> binding: j[165])
<                     (expr->[value=' = '] string: ' = '
<                       type->(type->kind=string))
<                     (expr-> binexp: +
<                       (expr-> binding: i[165])
<                       (expr-> binding: j[165])))))
<               (stmt->assignstmt:
<                 (expr-> binding: j[166])
<                 (expr-> binexp: +
<                   (expr-> binding: j[166])
<                   (expr->[value=1] int: 1
<                     type->(type->kind=integer))))))
<           (stmt->assignstmt:
<             (expr-> binding: i[168])
<             (expr-> binexp: +
<               (expr-> binding: i[168])
<               (expr->[value=1] int: 1
<                 type->(type->kind=integer))))))
<       (stmt->assignstmt:
<         (expr-> binding: j[171])
<         (expr->[value=2] int: 2
<           type->(type->kind=integer)))
<       (stmt->assignstmt:
<         (expr-> binding: k[172])
<         (expr->[value=6] int: 6
<           type->(type->kind=integer)))
<       (stmt->callstmt:
<         (expr-> binding: writeln[173]))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[174]
<           (exprs: 
<             (expr->[value='FOR tests'] string: 'FOR tests'
<               type->(type->kind=string)))))
<       (stmt->callstmt:
<         (expr-> binding: writeln[175]))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[176]
<           (exprs: 
<             (expr->[value=' 1 TO 5'] string: ' 1 TO 5'
<               type->(type->kind=string)))))
<       (stmt->forstmt:i[177]
<         (expr->[value=1] int: 1
<           type->(type->kind=integer))
<         (expr->[value=5] int: 5
<           type->(type->kind=integer))
<         (upward:true)
<         (stmt->callstmt:
<           (expr-> call: isMethodCall=false write[178]
<             (exprs: 
<               (expr->[value=' '] string: ' '
<                 type->(type->kind=string))
<               (expr-> binding: i[178])))))
<       (stmt->callstmt:
<         (expr-> binding: writeln[179]))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[180]
<           (exprs: 
<             (expr->[value=' 1 TO j*5='] string: ' 1 TO j*5='
<               type->(type->kind=string))
<             (expr-> binexp: *
<               (expr-> binding: j[180])
<               (expr->[value=5] int: 5
<                 type->(type->kind=integer))))))
<       (stmt->forstmt:i[181]
<         (expr->[value=1] int: 1
<           type->(type->kind=integer))
<         (expr-> binexp: *
<           (expr-> binding: j[181])
<           (expr->[value=5] int: 5
<             type->(type->kind=integer)))
<         (upward:true)
<         (stmt->callstmt:
<           (expr-> call: isMethodCall=false write[182]
<             (exprs: 
<               (expr->[value=' '] string: ' '
<                 type->(type->kind=string))
<               (expr-> binding: i[182])))))
<       (stmt->callstmt:
<         (expr-> binding: writeln[183]))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[184]
<           (exprs: 
<             (expr->[value=' 1 TO j='] string: ' 1 TO j='
<               type->(type->kind=string))
<             (expr-> binding: j[184]))))
<       (stmt->forstmt:i[185]
<         (expr->[value=1] int: 1
<           type->(type->kind=integer))
<         (expr-> binding: j[185])
<         (upward:true)
<         (stmt->callstmt:
<           (expr-> call: isMethodCall=false write[186]
<             (exprs: 
<               (expr->[value=' '] string: ' '
<                 type->(type->kind=string))
<               (expr-> binding: i[186])))))
<       (stmt->callstmt:
<         (expr-> binding: writeln[187]))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[188]
<           (exprs: 
<             (expr->[value='K='] string: 'K='
<               type->(type->kind=string))
<             (expr-> binding: k[188])
<             (expr->[value=' DOWNTO j='] string: ' DOWNTO j='
<               type->(type->kind=string))
<             (expr-> binding: j[188]))))
<       (stmt->forstmt:i[189]
<         (expr-> binding: k[189])
<         (expr-> binding: j[189])
<         (upward:false)
<         (stmt->callstmt:
<           (expr-> call: isMethodCall=false write[190]
<             (exprs: 
<               (expr->[value=' '] string: ' '
<                 type->(type->kind=string))
<               (expr-> binding: i[190])))))
<       (stmt->callstmt:
<         (expr-> binding: writeln[191]))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[192]
<           (exprs: 
<             (expr->[value=' 5 DOWNTO 1'] string: ' 5 DOWNTO 1'
<               type->(type->kind=string)))))
<       (stmt->forstmt:i[193]
<         (expr->[value=5] int: 5
<           type->(type->kind=integer))
<         (expr->[value=1] int: 1
<           type->(type->kind=integer))
<         (upward:false)
<         (stmt->callstmt:
<           (expr-> call: isMethodCall=false write[194]
<             (exprs: 
<               (expr->[value=' '] string: ' '
<                 type->(type->kind=string))
<               (expr-> binding: i[194])))))
<       (stmt->callstmt:
<         (expr-> binding: writeln[195]))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[196]
<           (exprs: 
<             (expr->[value=' 1 TO 1'] string: ' 1 TO 1'
<               type->(type->kind=string)))))
<       (stmt->forstmt:i[197]
<         (expr->[value=1] int: 1
<           type->(type->kind=integer))
<         (expr->[value=1] int: 1
<           type->(type->kind=integer))
<         (upward:true)
<         (stmt->callstmt:
<           (expr-> call: isMethodCall=false write[198]
<             (exprs: 
<               (expr->[value=' '] string: ' '
<                 type->(type->kind=string))
<               (expr-> binding: i[198])))))
<       (stmt->callstmt:
<         (expr-> binding: writeln[199]))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[200]
<           (exprs: 
<             (expr->[value=' 1 DOWNTO 0'] string: ' 1 DOWNTO 0'
<               type->(type->kind=string)))))
<       (stmt->forstmt:i[201]
<         (expr->[value=1] int: 1
<           type->(type->kind=integer))
<         (expr->[value=0] int: 0
<           type->(type->kind=integer))
<         (upward:false)
<         (stmt->callstmt:
<           (expr-> call: isMethodCall=false write[202]
<             (exprs: 
<               (expr->[value=' '] string: ' '
<                 type->(type->kind=string))
<               (expr-> binding: i[202])))))
<       (stmt->callstmt:
<         (expr-> binding: writeln[203]))
<       (stmt->callstmt:
<         (expr-> binding: writeln[205]))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[206]
<           (exprs: 
<             (expr->[value='Nested FORs'] string: 'Nested FORs'
<               type->(type->kind=string)))))
<       (stmt->forstmt:i[207]
<         (expr->[value=1] int: 1
<           type->(type->kind=integer))
<         (expr->[value=3] int: 3
<           type->(type->kind=integer))
<         (upward:true)
<         (stmt->forstmt:j[208]
<           (expr->[value=1] int: 1
<             type->(type->kind=integer))
<           (expr->[value=3] int: 3
<             type->(type->kind=integer))
<           (upward:true)
<           (stmt->callstmt:
<             (expr-> call: isMethodCall=false writeln[209]
<               (exprs: 
<                 (expr-> binding: i[209])
<                 (expr->[value=' + '] string: ' + '
<                   type->(type->kind=string))
<                 (expr-> binding: j[209])
<                 (expr->[value=' = '] string: ' = '
<                   type->(type->kind=string))
<                 (expr-> binexp: +
<                   (expr-> binding: i[209])
<                   (expr-> binding: j[209])))))))
<       (stmt->callstmt:
<         (expr-> binding: writeln[213]))
<       (stmt->callstmt:
<         (expr-> binding: writeln[213]))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[214]
<           (exprs: 
<             (expr->[value='Pass by value test'] string: 'Pass by value test'
<               type->(type->kind=string)))))
<       (stmt->assignstmt:
<         (expr-> binding: x[215])
<         (expr->[value=100] int: 100
<           type->(type->kind=integer)))
<       (stmt->assignstmt:
<         (expr-> binding: y[216])
<         (expr->[value=200] int: 200
<           type->(type->kind=integer)))
<       (stmt->assignstmt:
<         (expr-> binding: z[217])
<         (expr->[value=300] int: 300
<           type->(type->kind=integer)))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false passints[218]
<           (exprs: 
<             (expr->[value=0] int: 0
<               type->(type->kind=integer))
<             (expr->[value=1] int: 1
<               type->(type->kind=integer))
<             (expr->[value=2] int: 2
<               type->(type->kind=integer)))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[219]
<           (exprs: 
<             (expr->[value='Values of x, y, z after passints: '] string: 'Values of x, y, z after passints: '
<               type->(type->kind=string))
<             (expr-> binding: x[219])
<             (expr->[value=' '] string: ' '
<               type->(type->kind=string))
<             (expr-> binding: y[219])
<             (expr->[value=' '] string: ' '
<               type->(type->kind=string))
<             (expr-> binding: z[219]))))
<       (stmt->ifstmt: 
<         (expr-> binexp: and
<           (expr-> binexp: and
<             (expr-> call: isMethodCall=false prime[222]
<               (exprs: 
<                 (expr->[value=19] int: 19
<                   type->(type->kind=integer))))
<             (expr-> call: isMethodCall=false prime[222]
<               (exprs: 
<                 (expr->[value=31] int: 31
<                   type->(type->kind=integer)))))
<           (expr-> unexp: not
<             (expr-> call: isMethodCall=false prime[222]
<               (exprs: 
<                 (expr->[value=63] int: 63
<                   type->(type->kind=integer))))))
<         (stmt->callstmt:
<           (expr-> call: isMethodCall=false writeln[223]
<             (exprs: 
<               (expr->[value='prime passes tests'] string: 'prime passes tests'
<                 type->(type->kind=string))))))
<       (stmt->assignstmt:
<         (expr-> binding: x[226])
<         (expr-> call: isMethodCall=false factorial[226]
<           (exprs: 
<             (expr->[value=8] int: 8
<               type->(type->kind=integer)))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[227]
<           (exprs: 
<             (expr->[value='Recursion = '] string: 'Recursion = '
<               type->(type->kind=string))
<             (expr-> binding: x[227]))))
<       (stmt->ifstmt: 
<         (expr-> binexp: =
<           (expr-> call: isMethodCall=false factorial[228]
<             (exprs: 
<               (expr->[value=8] int: 8
<                 type->(type->kind=integer))))
<           (expr->[value=40320] int: 40320
<             type->(type->kind=integer)))
<         (stmt->callstmt:
<           (expr-> call: isMethodCall=false writeln[229]
<             (exprs: 
<               (expr->[value='Recursion test passes'] string: 'Recursion test passes'
<                 type->(type->kind=string)))))
<         (else: 
<           (stmt->callstmt:
<             (expr-> call: isMethodCall=false writeln[231]
<               (exprs: 
<                 (expr->[value='Recursion test fails'] string: 'Recursion test fails'
<                   type->(type->kind=string)))))))
<       (stmt->assignstmt:
<         (expr-> binding: i[234])
<         (expr->[value=3] int: 3
<           type->(type->kind=integer)))
<       (stmt->assignstmt:
<         (expr-> binding: j[235])
<         (expr->[value=4] int: 4
<           type->(type->kind=integer)))
<       (stmt->assignstmt:
<         (expr-> binding: l[236])
<         (expr-> binding: true[236]))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false simple[238]
<           (exprs: 
<             (expr-> binding: i[238])
<             (expr-> binding: j[238])
<             (expr-> binding: l[238]))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[240]
<           (exprs: 
<             (expr->[value='i='] string: 'i='
<               type->(type->kind=string))
<             (expr-> binding: i[240])
<             (expr->[value=', j='] string: ', j='
<               type->(type->kind=string))
<             (expr-> binding: j[240])
<             (expr->[value=', l='] string: ', l='
<               type->(type->kind=string))
<             (expr-> binding: l[240]))))
<       (stmt->emptystmt:))))


testmisc2.err:
0a1,5
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testmisc2.parse:
1,1470d0
< (program: 
<   (decls: 
<     (decl->program: bigtest[1]))
<   (block: 
<     (decls: 
<       (decl->const: c1[4]
<         (expr->[value='string constant'] string: 'string constant'
<           type->(type->kind=string)))
<       (decl->const: c2[5]
<         (expr->[value=100] int: 100
<           type->(type->kind=integer)))
<       (decl->type: t1[8]
<         (type->kind=subrange:
<           (expr->[value=100] int: 100
<             type->(type->kind=integer))
<           (expr->[value=200] int: 200
<             type->(type->kind=integer))))
<       (decl->type: t2[9]
<         (type->kind=subrange:
<           (expr->[value='string1'] string: 'string1'
<             type->(type->kind=string))
<           (expr->[value='string2'] string: 'string2'
<             type->(type->kind=string))))
<       (decl->variable: v1[12]
<         (type->kind=array:(type->kind=subrange:
<             (expr->[value=10] int: 10
<               type->(type->kind=integer))
<             (expr->[value=20] int: 20
<               type->(type->kind=integer)))
<           (type->kind=array:(type->kind=subrange:
<               (expr->[value=20] int: 20
<                 type->(type->kind=integer))
<               (expr->[value=30] int: 30
<                 type->(type->kind=integer)))
<             (type->kind=array:(type->kind=subrange:
<                 (expr->[value=30] int: 30
<                   type->(type->kind=integer))
<                 (expr->[value=40] int: 40
<                   type->(type->kind=integer)))
<               (type->kind=ident: integer[12])))))
<       (decl->variable: v2[12]
<         (type->kind=array:(type->kind=subrange:
<             (expr->[value=10] int: 10
<               type->(type->kind=integer))
<             (expr->[value=20] int: 20
<               type->(type->kind=integer)))
<           (type->kind=array:(type->kind=subrange:
<               (expr->[value=20] int: 20
<                 type->(type->kind=integer))
<               (expr->[value=30] int: 30
<                 type->(type->kind=integer)))
<             (type->kind=array:(type->kind=subrange:
<                 (expr->[value=30] int: 30
<                   type->(type->kind=integer))
<                 (expr->[value=40] int: 40
<                   type->(type->kind=integer)))
<               (type->kind=ident: integer[12])))))
<       (decl->variable: v3[13]
<         (type->kind=array:(type->kind=subrange:
<             (expr->[value=10] int: 10
<               type->(type->kind=integer))
<             (expr->[value=20] int: 20
<               type->(type->kind=integer)))
<           (type->kind=array:(type->kind=subrange:
<               (expr->[value=20] int: 20
<                 type->(type->kind=integer))
<               (expr->[value=30] int: 30
<                 type->(type->kind=integer)))
<             (type->kind=array:(type->kind=subrange:
<                 (expr->[value=30] int: 30
<                   type->(type->kind=integer))
<                 (expr->[value=40] int: 40
<                   type->(type->kind=integer)))
<               (type->kind=ident: integer[13])))))
<       (decl->variable: v4[13]
<         (type->kind=array:(type->kind=subrange:
<             (expr->[value=10] int: 10
<               type->(type->kind=integer))
<             (expr->[value=20] int: 20
<               type->(type->kind=integer)))
<           (type->kind=array:(type->kind=subrange:
<               (expr->[value=20] int: 20
<                 type->(type->kind=integer))
<               (expr->[value=30] int: 30
<                 type->(type->kind=integer)))
<             (type->kind=array:(type->kind=subrange:
<                 (expr->[value=30] int: 30
<                   type->(type->kind=integer))
<                 (expr->[value=40] int: 40
<                   type->(type->kind=integer)))
<               (type->kind=ident: integer[13])))))
<       (decl->variable: v5[14]
<         (type->kind=array:(type->kind=subrange:
<             (expr->[value=10] int: 10
<               type->(type->kind=integer))
<             (expr->[value=20] int: 20
<               type->(type->kind=integer)))
<           (type->kind=array:(type->kind=subrange:
<               (expr->[value=20] int: 20
<                 type->(type->kind=integer))
<               (expr->[value=30] int: 30
<                 type->(type->kind=integer)))
<             (type->kind=array:(type->kind=subrange:
<                 (expr->[value=30] int: 30
<                   type->(type->kind=integer))
<                 (expr->[value=40] int: 40
<                   type->(type->kind=integer)))
<               (type->kind=ident: integer[14])))))
<       (decl->procedure: p1[16]
<         (block: 
<           (stmts: 
<             (stmt->emptystmt:))))
<       (decl->function: f1[20]
<         (type->kind=ident: integer[20])
<         (block: 
<           (stmts: 
<             (stmt->emptystmt:)
<             (stmt->emptystmt:))))
<       (decl->const: c1[25]
<         (expr-> unexp: +
<           (expr->[value=100] int: 100
<             type->(type->kind=integer))))
<       (decl->const: c2[26]
<         (expr-> unexp: -
<           (expr-> binding: c1[26])))
<       (decl->const: c3[27]
<         (expr-> unexp: +
<           (expr->[value=100] int: 100
<             type->(type->kind=integer))))
<       (decl->const: c4[28]
<         (expr-> unexp: -
<           (expr-> binding: c3[28])))
<       (decl->variable: a[31]
<         (type->kind=array:(type->kind=subrange:
<             (expr->[value=1] int: 1
<               type->(type->kind=integer))
<             (expr->[value=100] int: 100
<               type->(type->kind=integer)))
<           (type->kind=record:
<             (fields: 
<               (decl->field: a[34]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=50] int: 50
<                       type->(type->kind=integer))
<                     (expr->[value=60] int: 60
<                       type->(type->kind=integer)))
<                   (type->kind=ident: integer[34])))
<               (decl->field: b[34]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=50] int: 50
<                       type->(type->kind=integer))
<                     (expr->[value=60] int: 60
<                       type->(type->kind=integer)))
<                   (type->kind=ident: integer[34])))
<               (decl->field: c[35]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=100] int: 100
<                       type->(type->kind=integer))
<                     (expr->[value=110] int: 110
<                       type->(type->kind=integer)))
<                   (type->kind=array:(type->kind=subrange:
<                       (expr->[value=5] int: 5
<                         type->(type->kind=integer))
<                       (expr->[value=10] int: 10
<                         type->(type->kind=integer)))
<                     (type->kind=array:(type->kind=subrange:
<                         (expr->[value=80] int: 80
<                           type->(type->kind=integer))
<                         (expr->[value=90] int: 90
<                           type->(type->kind=integer)))
<                       (type->kind=record:)))))
<               (decl->field: d[35]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=100] int: 100
<                       type->(type->kind=integer))
<                     (expr->[value=110] int: 110
<                       type->(type->kind=integer)))
<                   (type->kind=array:(type->kind=subrange:
<                       (expr->[value=5] int: 5
<                         type->(type->kind=integer))
<                       (expr->[value=10] int: 10
<                         type->(type->kind=integer)))
<                     (type->kind=array:(type->kind=subrange:
<                         (expr->[value=80] int: 80
<                           type->(type->kind=integer))
<                         (expr->[value=90] int: 90
<                           type->(type->kind=integer)))
<                       (type->kind=record:)))))
<               (decl->field: e[35]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=100] int: 100
<                       type->(type->kind=integer))
<                     (expr->[value=110] int: 110
<                       type->(type->kind=integer)))
<                   (type->kind=array:(type->kind=subrange:
<                       (expr->[value=5] int: 5
<                         type->(type->kind=integer))
<                       (expr->[value=10] int: 10
<                         type->(type->kind=integer)))
<                     (type->kind=array:(type->kind=subrange:
<                         (expr->[value=80] int: 80
<                           type->(type->kind=integer))
<                         (expr->[value=90] int: 90
<                           type->(type->kind=integer)))
<                       (type->kind=record:)))))
<               (decl->field: f[35]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=100] int: 100
<                       type->(type->kind=integer))
<                     (expr->[value=110] int: 110
<                       type->(type->kind=integer)))
<                   (type->kind=array:(type->kind=subrange:
<                       (expr->[value=5] int: 5
<                         type->(type->kind=integer))
<                       (expr->[value=10] int: 10
<                         type->(type->kind=integer)))
<                     (type->kind=array:(type->kind=subrange:
<                         (expr->[value=80] int: 80
<                           type->(type->kind=integer))
<                         (expr->[value=90] int: 90
<                           type->(type->kind=integer)))
<                       (type->kind=record:)))))))))
<       (decl->variable: b[31]
<         (type->kind=array:(type->kind=subrange:
<             (expr->[value=1] int: 1
<               type->(type->kind=integer))
<             (expr->[value=100] int: 100
<               type->(type->kind=integer)))
<           (type->kind=record:
<             (fields: 
<               (decl->field: a[34]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=50] int: 50
<                       type->(type->kind=integer))
<                     (expr->[value=60] int: 60
<                       type->(type->kind=integer)))
<                   (type->kind=ident: integer[34])))
<               (decl->field: b[34]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=50] int: 50
<                       type->(type->kind=integer))
<                     (expr->[value=60] int: 60
<                       type->(type->kind=integer)))
<                   (type->kind=ident: integer[34])))
<               (decl->field: c[35]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=100] int: 100
<                       type->(type->kind=integer))
<                     (expr->[value=110] int: 110
<                       type->(type->kind=integer)))
<                   (type->kind=array:(type->kind=subrange:
<                       (expr->[value=5] int: 5
<                         type->(type->kind=integer))
<                       (expr->[value=10] int: 10
<                         type->(type->kind=integer)))
<                     (type->kind=array:(type->kind=subrange:
<                         (expr->[value=80] int: 80
<                           type->(type->kind=integer))
<                         (expr->[value=90] int: 90
<                           type->(type->kind=integer)))
<                       (type->kind=record:)))))
<               (decl->field: d[35]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=100] int: 100
<                       type->(type->kind=integer))
<                     (expr->[value=110] int: 110
<                       type->(type->kind=integer)))
<                   (type->kind=array:(type->kind=subrange:
<                       (expr->[value=5] int: 5
<                         type->(type->kind=integer))
<                       (expr->[value=10] int: 10
<                         type->(type->kind=integer)))
<                     (type->kind=array:(type->kind=subrange:
<                         (expr->[value=80] int: 80
<                           type->(type->kind=integer))
<                         (expr->[value=90] int: 90
<                           type->(type->kind=integer)))
<                       (type->kind=record:)))))
<               (decl->field: e[35]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=100] int: 100
<                       type->(type->kind=integer))
<                     (expr->[value=110] int: 110
<                       type->(type->kind=integer)))
<                   (type->kind=array:(type->kind=subrange:
<                       (expr->[value=5] int: 5
<                         type->(type->kind=integer))
<                       (expr->[value=10] int: 10
<                         type->(type->kind=integer)))
<                     (type->kind=array:(type->kind=subrange:
<                         (expr->[value=80] int: 80
<                           type->(type->kind=integer))
<                         (expr->[value=90] int: 90
<                           type->(type->kind=integer)))
<                       (type->kind=record:)))))
<               (decl->field: f[35]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=100] int: 100
<                       type->(type->kind=integer))
<                     (expr->[value=110] int: 110
<                       type->(type->kind=integer)))
<                   (type->kind=array:(type->kind=subrange:
<                       (expr->[value=5] int: 5
<                         type->(type->kind=integer))
<                       (expr->[value=10] int: 10
<                         type->(type->kind=integer)))
<                     (type->kind=array:(type->kind=subrange:
<                         (expr->[value=80] int: 80
<                           type->(type->kind=integer))
<                         (expr->[value=90] int: 90
<                           type->(type->kind=integer)))
<                       (type->kind=record:)))))))))
<       (decl->variable: c[31]
<         (type->kind=array:(type->kind=subrange:
<             (expr->[value=1] int: 1
<               type->(type->kind=integer))
<             (expr->[value=100] int: 100
<               type->(type->kind=integer)))
<           (type->kind=record:
<             (fields: 
<               (decl->field: a[34]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=50] int: 50
<                       type->(type->kind=integer))
<                     (expr->[value=60] int: 60
<                       type->(type->kind=integer)))
<                   (type->kind=ident: integer[34])))
<               (decl->field: b[34]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=50] int: 50
<                       type->(type->kind=integer))
<                     (expr->[value=60] int: 60
<                       type->(type->kind=integer)))
<                   (type->kind=ident: integer[34])))
<               (decl->field: c[35]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=100] int: 100
<                       type->(type->kind=integer))
<                     (expr->[value=110] int: 110
<                       type->(type->kind=integer)))
<                   (type->kind=array:(type->kind=subrange:
<                       (expr->[value=5] int: 5
<                         type->(type->kind=integer))
<                       (expr->[value=10] int: 10
<                         type->(type->kind=integer)))
<                     (type->kind=array:(type->kind=subrange:
<                         (expr->[value=80] int: 80
<                           type->(type->kind=integer))
<                         (expr->[value=90] int: 90
<                           type->(type->kind=integer)))
<                       (type->kind=record:)))))
<               (decl->field: d[35]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=100] int: 100
<                       type->(type->kind=integer))
<                     (expr->[value=110] int: 110
<                       type->(type->kind=integer)))
<                   (type->kind=array:(type->kind=subrange:
<                       (expr->[value=5] int: 5
<                         type->(type->kind=integer))
<                       (expr->[value=10] int: 10
<                         type->(type->kind=integer)))
<                     (type->kind=array:(type->kind=subrange:
<                         (expr->[value=80] int: 80
<                           type->(type->kind=integer))
<                         (expr->[value=90] int: 90
<                           type->(type->kind=integer)))
<                       (type->kind=record:)))))
<               (decl->field: e[35]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=100] int: 100
<                       type->(type->kind=integer))
<                     (expr->[value=110] int: 110
<                       type->(type->kind=integer)))
<                   (type->kind=array:(type->kind=subrange:
<                       (expr->[value=5] int: 5
<                         type->(type->kind=integer))
<                       (expr->[value=10] int: 10
<                         type->(type->kind=integer)))
<                     (type->kind=array:(type->kind=subrange:
<                         (expr->[value=80] int: 80
<                           type->(type->kind=integer))
<                         (expr->[value=90] int: 90
<                           type->(type->kind=integer)))
<                       (type->kind=record:)))))
<               (decl->field: f[35]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=100] int: 100
<                       type->(type->kind=integer))
<                     (expr->[value=110] int: 110
<                       type->(type->kind=integer)))
<                   (type->kind=array:(type->kind=subrange:
<                       (expr->[value=5] int: 5
<                         type->(type->kind=integer))
<                       (expr->[value=10] int: 10
<                         type->(type->kind=integer)))
<                     (type->kind=array:(type->kind=subrange:
<                         (expr->[value=80] int: 80
<                           type->(type->kind=integer))
<                         (expr->[value=90] int: 90
<                           type->(type->kind=integer)))
<                       (type->kind=record:)))))))))
<       (decl->variable: d[31]
<         (type->kind=array:(type->kind=subrange:
<             (expr->[value=1] int: 1
<               type->(type->kind=integer))
<             (expr->[value=100] int: 100
<               type->(type->kind=integer)))
<           (type->kind=record:
<             (fields: 
<               (decl->field: a[34]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=50] int: 50
<                       type->(type->kind=integer))
<                     (expr->[value=60] int: 60
<                       type->(type->kind=integer)))
<                   (type->kind=ident: integer[34])))
<               (decl->field: b[34]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=50] int: 50
<                       type->(type->kind=integer))
<                     (expr->[value=60] int: 60
<                       type->(type->kind=integer)))
<                   (type->kind=ident: integer[34])))
<               (decl->field: c[35]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=100] int: 100
<                       type->(type->kind=integer))
<                     (expr->[value=110] int: 110
<                       type->(type->kind=integer)))
<                   (type->kind=array:(type->kind=subrange:
<                       (expr->[value=5] int: 5
<                         type->(type->kind=integer))
<                       (expr->[value=10] int: 10
<                         type->(type->kind=integer)))
<                     (type->kind=array:(type->kind=subrange:
<                         (expr->[value=80] int: 80
<                           type->(type->kind=integer))
<                         (expr->[value=90] int: 90
<                           type->(type->kind=integer)))
<                       (type->kind=record:)))))
<               (decl->field: d[35]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=100] int: 100
<                       type->(type->kind=integer))
<                     (expr->[value=110] int: 110
<                       type->(type->kind=integer)))
<                   (type->kind=array:(type->kind=subrange:
<                       (expr->[value=5] int: 5
<                         type->(type->kind=integer))
<                       (expr->[value=10] int: 10
<                         type->(type->kind=integer)))
<                     (type->kind=array:(type->kind=subrange:
<                         (expr->[value=80] int: 80
<                           type->(type->kind=integer))
<                         (expr->[value=90] int: 90
<                           type->(type->kind=integer)))
<                       (type->kind=record:)))))
<               (decl->field: e[35]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=100] int: 100
<                       type->(type->kind=integer))
<                     (expr->[value=110] int: 110
<                       type->(type->kind=integer)))
<                   (type->kind=array:(type->kind=subrange:
<                       (expr->[value=5] int: 5
<                         type->(type->kind=integer))
<                       (expr->[value=10] int: 10
<                         type->(type->kind=integer)))
<                     (type->kind=array:(type->kind=subrange:
<                         (expr->[value=80] int: 80
<                           type->(type->kind=integer))
<                         (expr->[value=90] int: 90
<                           type->(type->kind=integer)))
<                       (type->kind=record:)))))
<               (decl->field: f[35]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=100] int: 100
<                       type->(type->kind=integer))
<                     (expr->[value=110] int: 110
<                       type->(type->kind=integer)))
<                   (type->kind=array:(type->kind=subrange:
<                       (expr->[value=5] int: 5
<                         type->(type->kind=integer))
<                       (expr->[value=10] int: 10
<                         type->(type->kind=integer)))
<                     (type->kind=array:(type->kind=subrange:
<                         (expr->[value=80] int: 80
<                           type->(type->kind=integer))
<                         (expr->[value=90] int: 90
<                           type->(type->kind=integer)))
<                       (type->kind=record:)))))))))
<       (decl->variable: e[31]
<         (type->kind=array:(type->kind=subrange:
<             (expr->[value=1] int: 1
<               type->(type->kind=integer))
<             (expr->[value=100] int: 100
<               type->(type->kind=integer)))
<           (type->kind=record:
<             (fields: 
<               (decl->field: a[34]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=50] int: 50
<                       type->(type->kind=integer))
<                     (expr->[value=60] int: 60
<                       type->(type->kind=integer)))
<                   (type->kind=ident: integer[34])))
<               (decl->field: b[34]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=50] int: 50
<                       type->(type->kind=integer))
<                     (expr->[value=60] int: 60
<                       type->(type->kind=integer)))
<                   (type->kind=ident: integer[34])))
<               (decl->field: c[35]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=100] int: 100
<                       type->(type->kind=integer))
<                     (expr->[value=110] int: 110
<                       type->(type->kind=integer)))
<                   (type->kind=array:(type->kind=subrange:
<                       (expr->[value=5] int: 5
<                         type->(type->kind=integer))
<                       (expr->[value=10] int: 10
<                         type->(type->kind=integer)))
<                     (type->kind=array:(type->kind=subrange:
<                         (expr->[value=80] int: 80
<                           type->(type->kind=integer))
<                         (expr->[value=90] int: 90
<                           type->(type->kind=integer)))
<                       (type->kind=record:)))))
<               (decl->field: d[35]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=100] int: 100
<                       type->(type->kind=integer))
<                     (expr->[value=110] int: 110
<                       type->(type->kind=integer)))
<                   (type->kind=array:(type->kind=subrange:
<                       (expr->[value=5] int: 5
<                         type->(type->kind=integer))
<                       (expr->[value=10] int: 10
<                         type->(type->kind=integer)))
<                     (type->kind=array:(type->kind=subrange:
<                         (expr->[value=80] int: 80
<                           type->(type->kind=integer))
<                         (expr->[value=90] int: 90
<                           type->(type->kind=integer)))
<                       (type->kind=record:)))))
<               (decl->field: e[35]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=100] int: 100
<                       type->(type->kind=integer))
<                     (expr->[value=110] int: 110
<                       type->(type->kind=integer)))
<                   (type->kind=array:(type->kind=subrange:
<                       (expr->[value=5] int: 5
<                         type->(type->kind=integer))
<                       (expr->[value=10] int: 10
<                         type->(type->kind=integer)))
<                     (type->kind=array:(type->kind=subrange:
<                         (expr->[value=80] int: 80
<                           type->(type->kind=integer))
<                         (expr->[value=90] int: 90
<                           type->(type->kind=integer)))
<                       (type->kind=record:)))))
<               (decl->field: f[35]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=100] int: 100
<                       type->(type->kind=integer))
<                     (expr->[value=110] int: 110
<                       type->(type->kind=integer)))
<                   (type->kind=array:(type->kind=subrange:
<                       (expr->[value=5] int: 5
<                         type->(type->kind=integer))
<                       (expr->[value=10] int: 10
<                         type->(type->kind=integer)))
<                     (type->kind=array:(type->kind=subrange:
<                         (expr->[value=80] int: 80
<                           type->(type->kind=integer))
<                         (expr->[value=90] int: 90
<                           type->(type->kind=integer)))
<                       (type->kind=record:)))))))))
<       (decl->variable: f[31]
<         (type->kind=array:(type->kind=subrange:
<             (expr->[value=1] int: 1
<               type->(type->kind=integer))
<             (expr->[value=100] int: 100
<               type->(type->kind=integer)))
<           (type->kind=record:
<             (fields: 
<               (decl->field: a[34]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=50] int: 50
<                       type->(type->kind=integer))
<                     (expr->[value=60] int: 60
<                       type->(type->kind=integer)))
<                   (type->kind=ident: integer[34])))
<               (decl->field: b[34]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=50] int: 50
<                       type->(type->kind=integer))
<                     (expr->[value=60] int: 60
<                       type->(type->kind=integer)))
<                   (type->kind=ident: integer[34])))
<               (decl->field: c[35]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=100] int: 100
<                       type->(type->kind=integer))
<                     (expr->[value=110] int: 110
<                       type->(type->kind=integer)))
<                   (type->kind=array:(type->kind=subrange:
<                       (expr->[value=5] int: 5
<                         type->(type->kind=integer))
<                       (expr->[value=10] int: 10
<                         type->(type->kind=integer)))
<                     (type->kind=array:(type->kind=subrange:
<                         (expr->[value=80] int: 80
<                           type->(type->kind=integer))
<                         (expr->[value=90] int: 90
<                           type->(type->kind=integer)))
<                       (type->kind=record:)))))
<               (decl->field: d[35]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=100] int: 100
<                       type->(type->kind=integer))
<                     (expr->[value=110] int: 110
<                       type->(type->kind=integer)))
<                   (type->kind=array:(type->kind=subrange:
<                       (expr->[value=5] int: 5
<                         type->(type->kind=integer))
<                       (expr->[value=10] int: 10
<                         type->(type->kind=integer)))
<                     (type->kind=array:(type->kind=subrange:
<                         (expr->[value=80] int: 80
<                           type->(type->kind=integer))
<                         (expr->[value=90] int: 90
<                           type->(type->kind=integer)))
<                       (type->kind=record:)))))
<               (decl->field: e[35]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=100] int: 100
<                       type->(type->kind=integer))
<                     (expr->[value=110] int: 110
<                       type->(type->kind=integer)))
<                   (type->kind=array:(type->kind=subrange:
<                       (expr->[value=5] int: 5
<                         type->(type->kind=integer))
<                       (expr->[value=10] int: 10
<                         type->(type->kind=integer)))
<                     (type->kind=array:(type->kind=subrange:
<                         (expr->[value=80] int: 80
<                           type->(type->kind=integer))
<                         (expr->[value=90] int: 90
<                           type->(type->kind=integer)))
<                       (type->kind=record:)))))
<               (decl->field: f[35]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=100] int: 100
<                       type->(type->kind=integer))
<                     (expr->[value=110] int: 110
<                       type->(type->kind=integer)))
<                   (type->kind=array:(type->kind=subrange:
<                       (expr->[value=5] int: 5
<                         type->(type->kind=integer))
<                       (expr->[value=10] int: 10
<                         type->(type->kind=integer)))
<                     (type->kind=array:(type->kind=subrange:
<                         (expr->[value=80] int: 80
<                           type->(type->kind=integer))
<                         (expr->[value=90] int: 90
<                           type->(type->kind=integer)))
<                       (type->kind=record:)))))))))
<       (decl->variable: g[31]
<         (type->kind=array:(type->kind=subrange:
<             (expr->[value=1] int: 1
<               type->(type->kind=integer))
<             (expr->[value=100] int: 100
<               type->(type->kind=integer)))
<           (type->kind=record:
<             (fields: 
<               (decl->field: a[34]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=50] int: 50
<                       type->(type->kind=integer))
<                     (expr->[value=60] int: 60
<                       type->(type->kind=integer)))
<                   (type->kind=ident: integer[34])))
<               (decl->field: b[34]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=50] int: 50
<                       type->(type->kind=integer))
<                     (expr->[value=60] int: 60
<                       type->(type->kind=integer)))
<                   (type->kind=ident: integer[34])))
<               (decl->field: c[35]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=100] int: 100
<                       type->(type->kind=integer))
<                     (expr->[value=110] int: 110
<                       type->(type->kind=integer)))
<                   (type->kind=array:(type->kind=subrange:
<                       (expr->[value=5] int: 5
<                         type->(type->kind=integer))
<                       (expr->[value=10] int: 10
<                         type->(type->kind=integer)))
<                     (type->kind=array:(type->kind=subrange:
<                         (expr->[value=80] int: 80
<                           type->(type->kind=integer))
<                         (expr->[value=90] int: 90
<                           type->(type->kind=integer)))
<                       (type->kind=record:)))))
<               (decl->field: d[35]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=100] int: 100
<                       type->(type->kind=integer))
<                     (expr->[value=110] int: 110
<                       type->(type->kind=integer)))
<                   (type->kind=array:(type->kind=subrange:
<                       (expr->[value=5] int: 5
<                         type->(type->kind=integer))
<                       (expr->[value=10] int: 10
<                         type->(type->kind=integer)))
<                     (type->kind=array:(type->kind=subrange:
<                         (expr->[value=80] int: 80
<                           type->(type->kind=integer))
<                         (expr->[value=90] int: 90
<                           type->(type->kind=integer)))
<                       (type->kind=record:)))))
<               (decl->field: e[35]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=100] int: 100
<                       type->(type->kind=integer))
<                     (expr->[value=110] int: 110
<                       type->(type->kind=integer)))
<                   (type->kind=array:(type->kind=subrange:
<                       (expr->[value=5] int: 5
<                         type->(type->kind=integer))
<                       (expr->[value=10] int: 10
<                         type->(type->kind=integer)))
<                     (type->kind=array:(type->kind=subrange:
<                         (expr->[value=80] int: 80
<                           type->(type->kind=integer))
<                         (expr->[value=90] int: 90
<                           type->(type->kind=integer)))
<                       (type->kind=record:)))))
<               (decl->field: f[35]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=100] int: 100
<                       type->(type->kind=integer))
<                     (expr->[value=110] int: 110
<                       type->(type->kind=integer)))
<                   (type->kind=array:(type->kind=subrange:
<                       (expr->[value=5] int: 5
<                         type->(type->kind=integer))
<                       (expr->[value=10] int: 10
<                         type->(type->kind=integer)))
<                     (type->kind=array:(type->kind=subrange:
<                         (expr->[value=80] int: 80
<                           type->(type->kind=integer))
<                         (expr->[value=90] int: 90
<                           type->(type->kind=integer)))
<                       (type->kind=record:)))))))))
<       (decl->variable: h[31]
<         (type->kind=array:(type->kind=subrange:
<             (expr->[value=1] int: 1
<               type->(type->kind=integer))
<             (expr->[value=100] int: 100
<               type->(type->kind=integer)))
<           (type->kind=record:
<             (fields: 
<               (decl->field: a[34]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=50] int: 50
<                       type->(type->kind=integer))
<                     (expr->[value=60] int: 60
<                       type->(type->kind=integer)))
<                   (type->kind=ident: integer[34])))
<               (decl->field: b[34]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=50] int: 50
<                       type->(type->kind=integer))
<                     (expr->[value=60] int: 60
<                       type->(type->kind=integer)))
<                   (type->kind=ident: integer[34])))
<               (decl->field: c[35]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=100] int: 100
<                       type->(type->kind=integer))
<                     (expr->[value=110] int: 110
<                       type->(type->kind=integer)))
<                   (type->kind=array:(type->kind=subrange:
<                       (expr->[value=5] int: 5
<                         type->(type->kind=integer))
<                       (expr->[value=10] int: 10
<                         type->(type->kind=integer)))
<                     (type->kind=array:(type->kind=subrange:
<                         (expr->[value=80] int: 80
<                           type->(type->kind=integer))
<                         (expr->[value=90] int: 90
<                           type->(type->kind=integer)))
<                       (type->kind=record:)))))
<               (decl->field: d[35]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=100] int: 100
<                       type->(type->kind=integer))
<                     (expr->[value=110] int: 110
<                       type->(type->kind=integer)))
<                   (type->kind=array:(type->kind=subrange:
<                       (expr->[value=5] int: 5
<                         type->(type->kind=integer))
<                       (expr->[value=10] int: 10
<                         type->(type->kind=integer)))
<                     (type->kind=array:(type->kind=subrange:
<                         (expr->[value=80] int: 80
<                           type->(type->kind=integer))
<                         (expr->[value=90] int: 90
<                           type->(type->kind=integer)))
<                       (type->kind=record:)))))
<               (decl->field: e[35]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=100] int: 100
<                       type->(type->kind=integer))
<                     (expr->[value=110] int: 110
<                       type->(type->kind=integer)))
<                   (type->kind=array:(type->kind=subrange:
<                       (expr->[value=5] int: 5
<                         type->(type->kind=integer))
<                       (expr->[value=10] int: 10
<                         type->(type->kind=integer)))
<                     (type->kind=array:(type->kind=subrange:
<                         (expr->[value=80] int: 80
<                           type->(type->kind=integer))
<                         (expr->[value=90] int: 90
<                           type->(type->kind=integer)))
<                       (type->kind=record:)))))
<               (decl->field: f[35]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=100] int: 100
<                       type->(type->kind=integer))
<                     (expr->[value=110] int: 110
<                       type->(type->kind=integer)))
<                   (type->kind=array:(type->kind=subrange:
<                       (expr->[value=5] int: 5
<                         type->(type->kind=integer))
<                       (expr->[value=10] int: 10
<                         type->(type->kind=integer)))
<                     (type->kind=array:(type->kind=subrange:
<                         (expr->[value=80] int: 80
<                           type->(type->kind=integer))
<                         (expr->[value=90] int: 90
<                           type->(type->kind=integer)))
<                       (type->kind=record:)))))))))
<       (decl->variable: i[31]
<         (type->kind=array:(type->kind=subrange:
<             (expr->[value=1] int: 1
<               type->(type->kind=integer))
<             (expr->[value=100] int: 100
<               type->(type->kind=integer)))
<           (type->kind=record:
<             (fields: 
<               (decl->field: a[34]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=50] int: 50
<                       type->(type->kind=integer))
<                     (expr->[value=60] int: 60
<                       type->(type->kind=integer)))
<                   (type->kind=ident: integer[34])))
<               (decl->field: b[34]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=50] int: 50
<                       type->(type->kind=integer))
<                     (expr->[value=60] int: 60
<                       type->(type->kind=integer)))
<                   (type->kind=ident: integer[34])))
<               (decl->field: c[35]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=100] int: 100
<                       type->(type->kind=integer))
<                     (expr->[value=110] int: 110
<                       type->(type->kind=integer)))
<                   (type->kind=array:(type->kind=subrange:
<                       (expr->[value=5] int: 5
<                         type->(type->kind=integer))
<                       (expr->[value=10] int: 10
<                         type->(type->kind=integer)))
<                     (type->kind=array:(type->kind=subrange:
<                         (expr->[value=80] int: 80
<                           type->(type->kind=integer))
<                         (expr->[value=90] int: 90
<                           type->(type->kind=integer)))
<                       (type->kind=record:)))))
<               (decl->field: d[35]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=100] int: 100
<                       type->(type->kind=integer))
<                     (expr->[value=110] int: 110
<                       type->(type->kind=integer)))
<                   (type->kind=array:(type->kind=subrange:
<                       (expr->[value=5] int: 5
<                         type->(type->kind=integer))
<                       (expr->[value=10] int: 10
<                         type->(type->kind=integer)))
<                     (type->kind=array:(type->kind=subrange:
<                         (expr->[value=80] int: 80
<                           type->(type->kind=integer))
<                         (expr->[value=90] int: 90
<                           type->(type->kind=integer)))
<                       (type->kind=record:)))))
<               (decl->field: e[35]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=100] int: 100
<                       type->(type->kind=integer))
<                     (expr->[value=110] int: 110
<                       type->(type->kind=integer)))
<                   (type->kind=array:(type->kind=subrange:
<                       (expr->[value=5] int: 5
<                         type->(type->kind=integer))
<                       (expr->[value=10] int: 10
<                         type->(type->kind=integer)))
<                     (type->kind=array:(type->kind=subrange:
<                         (expr->[value=80] int: 80
<                           type->(type->kind=integer))
<                         (expr->[value=90] int: 90
<                           type->(type->kind=integer)))
<                       (type->kind=record:)))))
<               (decl->field: f[35]
<                 (type->kind=array:(type->kind=subrange:
<                     (expr->[value=100] int: 100
<                       type->(type->kind=integer))
<                     (expr->[value=110] int: 110
<                       type->(type->kind=integer)))
<                   (type->kind=array:(type->kind=subrange:
<                       (expr->[value=5] int: 5
<                         type->(type->kind=integer))
<                       (expr->[value=10] int: 10
<                         type->(type->kind=integer)))
<                     (type->kind=array:(type->kind=subrange:
<                         (expr->[value=80] int: 80
<                           type->(type->kind=integer))
<                         (expr->[value=90] int: 90
<                           type->(type->kind=integer)))
<                       (type->kind=record:)))))))))
<       (decl->type: ptr[41]
<         (type->kind=pointer:
<           ))
<       (decl->function: f1[43]
<         (formals: 
<           (decl->formal a[43]
<             (varmode=false)
<             (type->kind=ident: integer[43]))
<           (decl->formal a[44]
<             (varmode=true)
<             (type->kind=ident: integer[44]))
<           (decl->formal b[44]
<             (varmode=true)
<             (type->kind=ident: integer[44]))
<           (decl->formal c[44]
<             (varmode=true)
<             (type->kind=ident: integer[44]))
<           (decl->formal d[45]
<             (varmode=false)
<             (type->kind=ident: integer[45]))
<           (decl->formal e[45]
<             (varmode=false)
<             (type->kind=ident: integer[45]))
<           (decl->formal f[45]
<             (varmode=false)
<             (type->kind=ident: integer[45]))
<           (decl->formal g[46]
<             (varmode=true)
<             (type->kind=ident: integer[46]))
<           (decl->formal h[46]
<             (varmode=true)
<             (type->kind=ident: integer[46]))
<           (decl->formal i[46]
<             (varmode=true)
<             (type->kind=ident: integer[46])))
<         (type->kind=ident: sometype[46])
<         (block: 
<           (decls: 
<             (decl->type: a[48]
<               (type->kind=record:
<                 (fields: 
<                   (decl->field: a[48]
<                     (type->kind=ident: integer[48]))
<                   (decl->field: b[48]
<                     (type->kind=ident: integer[48]))
<                   (decl->field: c[48]
<                     (type->kind=ident: integer[48])))))
<             (decl->type: b[49]
<               (type->kind=record:
<                 (fields: 
<                   (decl->field: a[49]
<                     (type->kind=ident: integer[49]))
<                   (decl->field: b[49]
<                     (type->kind=ident: integer[49]))
<                   (decl->field: c[49]
<                     (type->kind=ident: integer[49])))))
<             (decl->const: constant[51]
<               (expr->[value=1000] int: 1000
<                 type->(type->kind=integer)))
<             (decl->function: infunc[52]
<               (type->kind=ident: type1[52])
<               (block: 
<                 (stmts: 
<                   (stmt->emptystmt:))))
<             (decl->variable: x[55]
<               (type->kind=pointer:
<                 ))
<             (decl->variable: y[55]
<               (type->kind=pointer:
<                 ))
<             (decl->variable: z[55]
<               (type->kind=pointer:
<                 ))
<             (decl->const: c2[56]
<               (expr->[value=30000] int: 30000
<                 type->(type->kind=integer)))
<             (decl->const: c4[56]
<               (expr-> unexp: -
<                 (expr->[value=2] int: 2
<                   type->(type->kind=integer))))
<             (decl->const: c5[56]
<               (expr->[value='this is a test'] string: 'this is a test'
<                 type->(type->kind=string)))
<             (decl->procedure: inproc[57]
<               (formals: 
<                 (decl->formal a[57]
<                   (varmode=true)
<                   (type->kind=ident: integer[57]))
<                 (decl->formal b[57]
<                   (varmode=true)
<                   (type->kind=ident: integer[57]))
<                 (decl->formal c[57]
<                   (varmode=false)
<                   (type->kind=ident: integer[57]))
<                 (decl->formal d[58]
<                   (varmode=false)
<                   (type->kind=ident: integer[58]))
<                 (decl->formal e[58]
<                   (varmode=true)
<                   (type->kind=ident: integer[58])))
<               (block: 
<                 (stmts: 
<                   (stmt->emptystmt:)))))
<           (stmts: 
<             (stmt->emptystmt:))))
<       (decl->type: x[65]
<         (type->kind=record:
<           (fields: 
<             (decl->field: y[66]
<               (type->kind=record:
<                 (fields: 
<                   (decl->field: z[67]
<                     (type->kind=record:
<                       (fields: 
<                         (decl->field: a[68]
<                           (type->kind=array:(type->kind=subrange:
<                               (expr->[value=1] int: 1
<                                 type->(type->kind=integer))
<                               (expr->[value=2] int: 2
<                                 type->(type->kind=integer)))
<                             (type->kind=array:(type->kind=subrange:
<                                 (expr->[value=3] int: 3
<                                   type->(type->kind=integer))
<                                 (expr->[value=4] int: 4
<                                   type->(type->kind=integer)))
<                               (type->kind=array:(type->kind=subrange:
<                                   (expr->[value=5] int: 5
<                                     type->(type->kind=integer))
<                                   (expr->[value=6] int: 6
<                                     type->(type->kind=integer)))
<                                 (type->kind=array:(type->kind=subrange:
<                                     (expr->[value=7] int: 7
<                                       type->(type->kind=integer))
<                                     (expr->[value=8] int: 8
<                                       type->(type->kind=integer)))
<                                   (type->kind=array:(type->kind=subrange:
<                                       (expr->[value=9] int: 9
<                                         type->(type->kind=integer))
<                                       (expr->[value=10] int: 10
<                                         type->(type->kind=integer)))
<                                     (type->kind=ident: integer[68]))))))))))))))))
<       (decl->procedure: foo[73]
<         (block: 
<           (stmts: 
<             (stmt->emptystmt:))))
<       (decl->type: a[77]
<         (type->kind=ident: integer[77]))
<       (decl->variable: a[80]
<         (type->kind=ident: integer[80]))
<       (decl->function: func1[82]
<         (formals: 
<           (decl->formal a[83]
<             (varmode=true)
<             (type->kind=ident: type1[83]))
<           (decl->formal b[83]
<             (varmode=true)
<             (type->kind=ident: type1[83]))
<           (decl->formal c[83]
<             (varmode=true)
<             (type->kind=ident: type1[83]))
<           (decl->formal d[83]
<             (varmode=true)
<             (type->kind=ident: type1[83]))
<           (decl->formal e[83]
<             (varmode=true)
<             (type->kind=ident: type1[83]))
<           (decl->formal f[83]
<             (varmode=true)
<             (type->kind=ident: type1[83]))
<           (decl->formal g[83]
<             (varmode=true)
<             (type->kind=ident: type1[83]))
<           (decl->formal h[83]
<             (varmode=true)
<             (type->kind=ident: type1[83]))
<           (decl->formal i[83]
<             (varmode=true)
<             (type->kind=ident: type1[83]))
<           (decl->formal j[83]
<             (varmode=true)
<             (type->kind=ident: type1[83]))
<           (decl->formal k[83]
<             (varmode=true)
<             (type->kind=ident: type1[83]))
<           (decl->formal l[83]
<             (varmode=true)
<             (type->kind=ident: type1[83]))
<           (decl->formal m[83]
<             (varmode=true)
<             (type->kind=ident: type1[83]))
<           (decl->formal n[83]
<             (varmode=true)
<             (type->kind=ident: type1[83]))
<           (decl->formal o[83]
<             (varmode=true)
<             (type->kind=ident: type1[83]))
<           (decl->formal p[83]
<             (varmode=true)
<             (type->kind=ident: type1[83]))
<           (decl->formal q[83]
<             (varmode=true)
<             (type->kind=ident: type1[83]))
<           (decl->formal r[83]
<             (varmode=true)
<             (type->kind=ident: type1[83]))
<           (decl->formal s[83]
<             (varmode=true)
<             (type->kind=ident: type1[83]))
<           (decl->formal t[83]
<             (varmode=true)
<             (type->kind=ident: type1[83]))
<           (decl->formal u[83]
<             (varmode=true)
<             (type->kind=ident: type1[83]))
<           (decl->formal v[83]
<             (varmode=true)
<             (type->kind=ident: type1[83]))
<           (decl->formal w[83]
<             (varmode=true)
<             (type->kind=ident: type1[83]))
<           (decl->formal x[83]
<             (varmode=true)
<             (type->kind=ident: type1[83]))
<           (decl->formal y[83]
<             (varmode=true)
<             (type->kind=ident: type1[83]))
<           (decl->formal z[83]
<             (varmode=true)
<             (type->kind=ident: type1[83])))
<         (type->kind=ident: type2[83])
<         (block: 
<           (stmts: 
<             (stmt->emptystmt:))))
<       (decl->procedure: proc1[87]
<         (block: 
<           (stmts: 
<             (stmt->emptystmt:)))))
<     (stmts: 
<       (stmt->ifstmt: 
<         (expr-> binexp: =
<           (expr-> binding: a[93])
<           (expr-> binding: b[93]))
<         (stmt->ifstmt: 
<           (expr-> binexp: =
<             (expr-> binding: c[94])
<             (expr-> binding: d[94]))
<           (stmt->ifstmt: 
<             (expr-> binexp: =
<               (expr-> binding: e[95])
<               (expr-> binding: f[95]))
<             (stmt->assignstmt:
<               (expr-> binding: g[96])
<               (expr-> binding: h[96]))
<             (else: 
<               (stmt->assignstmt:
<                 (expr-> binding: g[98])
<                 (expr->[value=2] int: 2
<                   type->(type->kind=integer)))))
<           (else: 
<             (stmt->assignstmt:
<               (expr-> binding: g[100])
<               (expr->[value=3] int: 3
<                 type->(type->kind=integer))))))
<       (stmt->assignstmt:
<         (expr-> binding: a[102])
<         (expr->[value=0] int: 0
<           type->(type->kind=integer)))
<       (stmt->whilestmt:
<         (expr-> binexp: or
<           (expr-> binexp: or
<             (expr-> binexp: <=
<               (expr-> binding: a[103])
<               (expr->[value=100] int: 100
<                 type->(type->kind=integer)))
<             (expr-> binexp: >
<               (expr-> binding: b[103])
<               (expr->[value=20] int: 20
<                 type->(type->kind=integer))))
<           (expr-> binexp: =
<             (expr-> binding: g[103])
<             (expr->[value=12] int: 12
<               type->(type->kind=integer))))
<         (stmt->compoundstmt:
<           (stmts: 
<             (stmt->emptystmt:))))
<       (stmt->repeatstmt:
<         (expr-> binexp: or
<           (expr-> binexp: or
<             (expr-> binexp: <=
<               (expr-> binding: a[109])
<               (expr->[value=100] int: 100
<                 type->(type->kind=integer)))
<             (expr-> binexp: >
<               (expr-> binding: b[109])
<               (expr->[value=20] int: 20
<                 type->(type->kind=integer))))
<           (expr-> binexp: =
<             (expr-> binding: g[109])
<             (expr->[value=12] int: 12
<               type->(type->kind=integer))))
<         (stmts: 
<           (stmt->compoundstmt:
<             (stmts: 
<               (stmt->emptystmt:)))
<           (stmt->emptystmt:)))
<       (stmt->assignstmt:
<         (expr-> binding: a[111])
<         (expr->[value=10] int: 10
<           type->(type->kind=integer)))
<       (stmt->assignstmt:
<         (expr-> binding: b[112])
<         (expr->[value=20] int: 20
<           type->(type->kind=integer)))
<       (stmt->assignstmt:
<         (expr-> binding: c[113])
<         (expr-> binexp: *
<           (expr-> binding: a[113])
<           (expr-> binding: b[113])))
<       (stmt->assignstmt:
<         (expr-> binding: a[115])
<         (expr-> binexp: -
<           (expr-> binexp: +
<             (expr-> binding: a[115])
<             (expr-> binexp: *
<               (expr->[value=10] int: 10
<                 type->(type->kind=integer))
<               (expr-> binding: b[115])))
<           (expr-> binding: c[115])))
<       (stmt->assignstmt:
<         (expr-> binding: a[116])
<         (expr-> binexp: -
<           (expr-> binexp: +
<             (expr-> unexp: -
<               (expr-> binding: a[116]))
<             (expr-> binexp: *
<               (expr->[value=10] int: 10
<                 type->(type->kind=integer))
<               (expr-> binding: b[116])))
<           (expr-> binding: c[116])))
<       (stmt->assignstmt:
<         (expr-> binding: a[118])
<         (expr->[value=0] int: 0
<           type->(type->kind=integer)))
<       (stmt->assignstmt:
<         (expr-> binding: b[119])
<         (expr->[value=2] int: 2
<           type->(type->kind=integer)))
<       (stmt->repeatstmt:
<         (expr-> binexp: =
<           (expr-> binding: a[123])
<           (expr->[value=10] int: 10
<             type->(type->kind=integer)))
<         (stmts: 
<           (stmt->assignstmt:
<             (expr-> binding: a[121])
<             (expr-> binexp: +
<               (expr-> binding: a[121])
<               (expr->[value=1] int: 1
<                 type->(type->kind=integer))))
<           (stmt->assignstmt:
<             (expr-> binding: b[122])
<             (expr-> binexp: *
<               (expr-> binding: b[122])
<               (expr->[value=2] int: 2
<                 type->(type->kind=integer))))
<           (stmt->emptystmt:)))
<       (stmt->forstmt:a[125]
<         (expr-> binexp: +
<           (expr->[value=10] int: 10
<             type->(type->kind=integer))
<           (expr->[value=20] int: 20
<             type->(type->kind=integer)))
<         (expr-> binexp: -
<           (expr->[value=100] int: 100
<             type->(type->kind=integer))
<           (expr->[value=10] int: 10
<             type->(type->kind=integer)))
<         (upward:true)
<         (stmt->compoundstmt:
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: b[127])
<               (expr-> binexp: +
<                 (expr-> binding: b[127])
<                 (expr->[value=1] int: 1
<                   type->(type->kind=integer))))
<             (stmt->assignstmt:
<               (expr-> binding: c[128])
<               (expr-> binexp: +
<                 (expr-> binding: c[128])
<                 (expr->[value=2] int: 2
<                   type->(type->kind=integer))))
<             (stmt->emptystmt:))))
<       (stmt->forstmt:a[131]
<         (expr-> binexp: +
<           (expr->[value=10] int: 10
<             type->(type->kind=integer))
<           (expr->[value=20] int: 20
<             type->(type->kind=integer)))
<         (expr-> binexp: -
<           (expr->[value=100] int: 100
<             type->(type->kind=integer))
<           (expr->[value=10] int: 10
<             type->(type->kind=integer)))
<         (upward:false)
<         (stmt->compoundstmt:
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: b[133])
<               (expr-> binexp: +
<                 (expr-> binding: b[133])
<                 (expr->[value=1] int: 1
<                   type->(type->kind=integer))))
<             (stmt->assignstmt:
<               (expr-> binding: c[134])
<               (expr-> binexp: +
<                 (expr-> binding: c[134])
<                 (expr->[value=2] int: 2
<                   type->(type->kind=integer))))
<             (stmt->emptystmt:))))
<       (stmt->casestmt:
<         (expr-> binding: a[137])
<         (caselist: 
<           (labellist: 
<             (expr->[value=1] int: 1
<               type->(type->kind=integer))
<             (expr->[value=2] int: 2
<               type->(type->kind=integer))
<             (expr->[value=3] int: 3
<               type->(type->kind=integer)))
<           (stmt->assignstmt:
<             (expr-> binding: b[138])
<             (expr->[value=10] int: 10
<               type->(type->kind=integer)))
<           (labellist: 
<             (expr->[value=4] int: 4
<               type->(type->kind=integer))
<             (expr->[value=5] int: 5
<               type->(type->kind=integer))
<             (expr->[value=6] int: 6
<               type->(type->kind=integer)))
<           (stmt->assignstmt:
<             (expr-> binding: b[139])
<             (expr->[value=20] int: 20
<               type->(type->kind=integer)))))
<       (stmt->casestmt:
<         (expr-> binding: a[142])
<         (caselist: 
<           (labellist: 
<             (expr->[value=1] int: 1
<               type->(type->kind=integer))
<             (expr->[value=2] int: 2
<               type->(type->kind=integer))
<             (expr->[value=3] int: 3
<               type->(type->kind=integer)))
<           (stmt->assignstmt:
<             (expr-> binding: b[143])
<             (expr->[value=10] int: 10
<               type->(type->kind=integer)))
<           (labellist: 
<             (expr->[value=4] int: 4
<               type->(type->kind=integer))
<             (expr->[value=5] int: 5
<               type->(type->kind=integer))
<             (expr->[value=6] int: 6
<               type->(type->kind=integer)))
<           (stmt->assignstmt:
<             (expr-> binding: b[144])
<             (expr->[value=20] int: 20
<               type->(type->kind=integer)))))
<       (stmt->assignstmt:
<         (expr-> binding: a[147])
<         (expr-> binexp: .
<           (expr-> binexp: .
<             (expr-> binexp: .
<               (expr-> binding: a[147])
<               (expr-> id: b))
<             (expr-> id: c))
<           (expr-> id: d)))
<       (stmt->assignstmt:
<         (expr-> binding: a[148])
<         (expr-> unexp: ^
<           (expr-> binexp: .
<             (expr-> binexp: .
<               (expr-> binexp: .
<                 (expr-> binding: a[148])
<                 (expr-> id: b))
<               (expr-> id: c))
<             (expr-> id: d))))
<       (stmt->assignstmt:
<         (expr-> binding: a[149])
<         (expr-> binding: a[149]))
<       (stmt->assignstmt:
<         (expr-> binding: b[151])
<         (expr-> call: isMethodCall=false a[151]
<           (exprs: 
<             (expr->[value=10] int: 10
<               type->(type->kind=integer))
<             (expr-> binexp: +
<               (expr-> binding: a[151])
<               (expr-> binding: c[151]))
<             (expr->[value='this is a test'] string: 'this is a test'
<               type->(type->kind=string)))))
<       (stmt->assignstmt:
<         (expr-> binding: a[153])
<         (expr-> binexp: [
<           (expr-> binding: b[153])
<           (expr->[value=1] int: 1
<             type->(type->kind=integer))))
<       (stmt->assignstmt:
<         (expr-> binding: a[154])
<         (expr-> binexp: [
<           (expr-> binexp: [
<             (expr-> binexp: [
<               (expr-> binexp: [
<                 (expr-> binexp: [
<                   (expr-> binding: b[154])
<                   (expr->[value=1] int: 1
<                     type->(type->kind=integer)))
<                 (expr->[value=2] int: 2
<                   type->(type->kind=integer)))
<               (expr->[value=3] int: 3
<                 type->(type->kind=integer)))
<             (expr->[value=4] int: 4
<               type->(type->kind=integer)))
<           (expr->[value=5] int: 5
<             type->(type->kind=integer))))
<       (stmt->emptystmt:))))


testnilnil.err:
0a1,5
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testnilnil.parse:
1,23d0
< (program: 
<   (decls: 
<     (decl->program: testnil[1]))
<   (block: 
<     (stmts: 
<       (stmt->ifstmt: 
<         (expr-> binexp: =
<           (expr->[value=0] nil:
<             type->(type->kind=<NIL>))
<           (expr->[value=0] nil:
<             type->(type->kind=<NIL>)))
<         (stmt->callstmt:
<           (expr-> call: isMethodCall=false writeln[4]
<             (exprs: 
<               (expr->[value='yes'] string: 'yes'
<                 type->(type->kind=string)))))
<         (else: 
<           (stmt->callstmt:
<             (expr-> call: isMethodCall=false writeln[4]
<               (exprs: 
<                 (expr->[value='no'] string: 'no'
<                   type->(type->kind=string)))))))
<       (stmt->emptystmt:))))


testobject.err:
0a1,5
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testobject.parse:
1,821d0
< (program: 
<   (decls: 
<     (decl->program: testobject[3]))
<   (block: 
<     (decls: 
<       (decl->type: anyobject[6]
<         (type->kind=pointer:
<           (type->kind=object: name=anyobject
<             (extends: (type->kind=ident: root[6]))
<             (abstract: true)
<             (methods: 
<               (decl->((type->kind=method procedure name=print
<                     (formals: 
<                       (decl->formal self[8]
<                         (varmode=false)
<                         (type->kind=ident: anyobject[8]))))
<                   implemented-by: print[8]))))))
<       (decl->type: month[11]
<         (type->kind=subrange:
<           (expr->[value=1] int: 1
<             type->(type->kind=integer))
<           (expr->[value=12] int: 12
<             type->(type->kind=integer))))
<       (decl->type: dayofmonth[12]
<         (type->kind=subrange:
<           (expr->[value=1] int: 1
<             type->(type->kind=integer))
<           (expr->[value=31] int: 31
<             type->(type->kind=integer))))
<       (decl->type: date[14]
<         (type->kind=pointer:
<           (type->kind=object: name=date
<             (extends: (type->kind=ident: anyobject[14]))
<             (abstract: false)
<             (fields: 
<               (decl->field: m[15]
<                 (type->kind=ident: month[15]))
<               (decl->field: d[16]
<                 (type->kind=ident: dayofmonth[16]))
<               (decl->field: y[17]
<                 (type->kind=ident: integer[17])))
<             (methods: 
<               (decl->((type->kind=method function name=dayofyear
<                     (formals: 
<                       (decl->formal self[19]
<                         (varmode=false)
<                         (type->kind=ident: date[19])))
<                     (type->kind=ident: integer[19]))
<                   implemented-by: dayofyear[19]))
<               (decl->((type->kind=method procedure name=increment
<                     (formals: 
<                       (decl->formal self[20]
<                         (varmode=false)
<                         (type->kind=ident: date[20]))))
<                   implemented-by: increment[20]))
<               (decl->((type->kind=method function name=equalsdate
<                     (formals: 
<                       (decl->formal self[21]
<                         (varmode=false)
<                         (type->kind=ident: date[21]))
<                       (decl->formal other[21]
<                         (varmode=false)
<                         (type->kind=ident: date[21])))
<                     (type->kind=ident: boolean[21]))
<                   implemented-by: equalsdate[21])))
<             (overrides: 
<               (print[23] dateprint[23])))))
<       (decl->variable: d[26]
<         (type->kind=ident: date[26]))
<       (decl->variable: a[27]
<         (type->kind=ident: anyobject[27]))
<       (decl->variable: r[28]
<         (type->kind=ident: root[28]))
<       (decl->procedure: dateprint[34]
<         (formals: 
<           (decl->formal self[34]
<             (varmode=false)
<             (type->kind=ident: date[34])))
<         (block: 
<           (stmts: 
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=false writeln[36]
<                 (exprs: 
<                   (expr->[value='Entered datePrint'] string: 'Entered datePrint'
<                     type->(type->kind=string)))))
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=false write[37]
<                 (exprs: 
<                   (expr-> binexp: .
<                     (expr-> binding: self[37])
<                     (expr-> id: m)))))
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=false write[38]
<                 (exprs: 
<                   (expr->[value='-'] string: '-'
<                     type->(type->kind=string)))))
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=false write[39]
<                 (exprs: 
<                   (expr-> binexp: .
<                     (expr-> binding: self[39])
<                     (expr-> id: d)))))
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=false write[40]
<                 (exprs: 
<                   (expr->[value='-'] string: '-'
<                     type->(type->kind=string)))))
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=false write[41]
<                 (exprs: 
<                   (expr-> binexp: .
<                     (expr-> binding: self[41])
<                     (expr-> id: y)))))
<             (stmt->emptystmt:))))
<       (decl->function: mkdate[44]
<         (formals: 
<           (decl->formal m[44]
<             (varmode=false)
<             (type->kind=ident: month[44]))
<           (decl->formal d[44]
<             (varmode=false)
<             (type->kind=ident: dayofmonth[44]))
<           (decl->formal y[44]
<             (varmode=false)
<             (type->kind=ident: integer[44])))
<         (type->kind=ident: date[44])
<         (block: 
<           (decls: 
<             (decl->variable: ret[46]
<               (type->kind=ident: date[46])))
<           (stmts: 
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=false writeln[48]
<                 (exprs: 
<                   (expr->[value='Entered mkDate'] string: 'Entered mkDate'
<                     type->(type->kind=string)))))
<             (stmt->assignstmt:
<               (expr-> binding: ret[50])
<               (expr-> call: isMethodCall=false new[50]
<                 (exprs: 
<                   (expr-> binding: date[50]))))
<             (stmt->assignstmt:
<               (expr-> binexp: .
<                 (expr-> binding: ret[51])
<                 (expr-> id: m))
<               (expr-> binding: m[51]))
<             (stmt->assignstmt:
<               (expr-> binexp: .
<                 (expr-> binding: ret[52])
<                 (expr-> id: d))
<               (expr-> binding: d[52]))
<             (stmt->assignstmt:
<               (expr-> binexp: .
<                 (expr-> binding: ret[53])
<                 (expr-> id: y))
<               (expr-> binding: y[53]))
<             (stmt->assignstmt:
<               (expr-> binding: mkdate[55])
<               (expr-> binding: ret[55]))
<             (stmt->emptystmt:))))
<       (decl->function: isleapyear[58]
<         (formals: 
<           (decl->formal y[58]
<             (varmode=false)
<             (type->kind=ident: integer[58])))
<         (type->kind=ident: boolean[58])
<         (block: 
<           (decls: 
<             (decl->variable: remainder[60]
<               (type->kind=ident: integer[60]))
<             (decl->variable: ret[61]
<               (type->kind=ident: boolean[61])))
<           (stmts: 
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=false writeln[63]
<                 (exprs: 
<                   (expr->[value='Entered isLeapYear'] string: 'Entered isLeapYear'
<                     type->(type->kind=string)))))
<             (stmt->assignstmt:
<               (expr-> binding: remainder[65])
<               (expr-> binexp: mod
<                 (expr-> binding: y[65])
<                 (expr->[value=4] int: 4
<                   type->(type->kind=integer))))
<             (stmt->ifstmt: 
<               (expr-> binexp: <>
<                 (expr-> binding: remainder[66])
<                 (expr->[value=0] int: 0
<                   type->(type->kind=integer)))
<               (stmt->assignstmt:
<                 (expr-> binding: ret[67])
<                 (expr-> binding: false[67]))
<               (else: 
<                 (stmt->compoundstmt:
<                   (stmts: 
<                     (stmt->assignstmt:
<                       (expr-> binding: remainder[69])
<                       (expr-> binexp: mod
<                         (expr-> binding: y[69])
<                         (expr->[value=400] int: 400
<                           type->(type->kind=integer))))
<                     (stmt->ifstmt: 
<                       (expr-> binexp: =
<                         (expr->[value=0] int: 0
<                           type->(type->kind=integer))
<                         (expr-> binding: remainder[70]))
<                       (stmt->assignstmt:
<                         (expr-> binding: ret[71])
<                         (expr-> binding: true[71]))
<                       (else: 
<                         (stmt->compoundstmt:
<                           (stmts: 
<                             (stmt->assignstmt:
<                               (expr-> binding: remainder[73])
<                               (expr-> binexp: mod
<                                 (expr-> binding: y[73])
<                                 (expr->[value=100] int: 100
<                                   type->(type->kind=integer))))
<                             (stmt->ifstmt: 
<                               (expr-> binexp: =
<                                 (expr->[value=0] int: 0
<                                   type->(type->kind=integer))
<                                 (expr-> binding: remainder[74]))
<                               (stmt->assignstmt:
<                                 (expr-> binding: ret[75])
<                                 (expr-> binding: false[75]))
<                               (else: 
<                                 (stmt->assignstmt:
<                                   (expr-> binding: ret[77])
<                                   (expr-> binding: true[77]))))))))))))
<             (stmt->assignstmt:
<               (expr-> binding: isleapyear[81])
<               (expr-> binding: ret[81])))))
<       (decl->function: daysinmonth[84]
<         (formals: 
<           (decl->formal m[84]
<             (varmode=false)
<             (type->kind=ident: month[84]))
<           (decl->formal y[84]
<             (varmode=false)
<             (type->kind=ident: integer[84])))
<         (type->kind=ident: dayofmonth[84])
<         (block: 
<           (decls: 
<             (decl->variable: ret[86]
<               (type->kind=ident: integer[86])))
<           (stmts: 
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=false writeln[88]
<                 (exprs: 
<                   (expr->[value='Entered daysInMonth'] string: 'Entered daysInMonth'
<                     type->(type->kind=string)))))
<             (stmt->casestmt:
<               (expr-> binding: m[90])
<               (caselist: 
<                 (labellist: 
<                   (expr->[value=9] int: 9
<                     type->(type->kind=integer))
<                   (expr->[value=4] int: 4
<                     type->(type->kind=integer))
<                   (expr->[value=6] int: 6
<                     type->(type->kind=integer))
<                   (expr->[value=11] int: 11
<                     type->(type->kind=integer)))
<                 (stmt->assignstmt:
<                   (expr-> binding: ret[93])
<                   (expr->[value=30] int: 30
<                     type->(type->kind=integer)))
<                 (labellist: 
<                   (expr->[value=2] int: 2
<                     type->(type->kind=integer)))
<                 (stmt->ifstmt: 
<                   (expr-> call: isMethodCall=false isleapyear[95]
<                     (exprs: 
<                       (expr-> binding: y[95])))
<                   (stmt->assignstmt:
<                     (expr-> binding: ret[96])
<                     (expr->[value=29] int: 29
<                       type->(type->kind=integer)))
<                   (else: 
<                     (stmt->assignstmt:
<                       (expr-> binding: ret[98])
<                       (expr->[value=28] int: 28
<                         type->(type->kind=integer)))))
<                 (labellist: 
<                   (expr->[value=1] int: 1
<                     type->(type->kind=integer))
<                   (expr->[value=3] int: 3
<                     type->(type->kind=integer))
<                   (expr->[value=5] int: 5
<                     type->(type->kind=integer))
<                   (expr->[value=7] int: 7
<                     type->(type->kind=integer))
<                   (expr->[value=8] int: 8
<                     type->(type->kind=integer))
<                   (expr->[value=10] int: 10
<                     type->(type->kind=integer))
<                   (expr->[value=12] int: 12
<                     type->(type->kind=integer)))
<                 (stmt->assignstmt:
<                   (expr-> binding: ret[100])
<                   (expr->[value=31] int: 31
<                     type->(type->kind=integer)))))
<             (stmt->assignstmt:
<               (expr-> binding: daysinmonth[102])
<               (expr-> binding: ret[102])))))
<       (decl->function: datedayofyear[105]
<         (formals: 
<           (decl->formal self[105]
<             (varmode=false)
<             (type->kind=ident: date[105])))
<         (type->kind=ident: integer[105])
<         (block: 
<           (decls: 
<             (decl->variable: m[107]
<               (type->kind=ident: integer[107]))
<             (decl->variable: ret[107]
<               (type->kind=ident: integer[107])))
<           (stmts: 
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=false writeln[109]
<                 (exprs: 
<                   (expr->[value='Entered dateDayOfYear'] string: 'Entered dateDayOfYear'
<                     type->(type->kind=string)))))
<             (stmt->assignstmt:
<               (expr-> binding: m[111])
<               (expr-> binexp: -
<                 (expr-> binexp: .
<                   (expr-> binding: self[111])
<                   (expr-> id: m))
<                 (expr->[value=1] int: 1
<                   type->(type->kind=integer))))
<             (stmt->assignstmt:
<               (expr-> binding: ret[112])
<               (expr-> binexp: .
<                 (expr-> binding: self[112])
<                 (expr-> id: d)))
<             (stmt->forstmt:m[114]
<               (expr-> binding: m[114])
<               (expr->[value=1] int: 1
<                 type->(type->kind=integer))
<               (upward:false)
<               (stmt->assignstmt:
<                 (expr-> binding: ret[115])
<                 (expr-> binexp: +
<                   (expr-> binding: ret[115])
<                   (expr-> call: isMethodCall=false daysinmonth[115]
<                     (exprs: 
<                       (expr-> binexp: .
<                         (expr-> binding: self[115])
<                         (expr-> id: m))
<                       (expr-> binexp: .
<                         (expr-> binding: self[115])
<                         (expr-> id: y)))))))
<             (stmt->assignstmt:
<               (expr-> binding: datedayofyear[117])
<               (expr-> binding: ret[117])))))
<       (decl->procedure: dateincrement[120]
<         (formals: 
<           (decl->formal self[120]
<             (varmode=false)
<             (type->kind=ident: date[120])))
<         (block: 
<           (decls: 
<             (decl->variable: dim[122]
<               (type->kind=ident: dayofmonth[122])))
<           (stmts: 
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=false writeln[124]
<                 (exprs: 
<                   (expr->[value='Entered dateIncrement'] string: 'Entered dateIncrement'
<                     type->(type->kind=string)))))
<             (stmt->assignstmt:
<               (expr-> binding: dim[126])
<               (expr-> call: isMethodCall=false daysinmonth[126]
<                 (exprs: 
<                   (expr-> binexp: .
<                     (expr-> binding: self[126])
<                     (expr-> id: m))
<                   (expr-> binexp: .
<                     (expr-> binding: self[126])
<                     (expr-> id: y)))))
<             (stmt->ifstmt: 
<               (expr-> binexp: =
<                 (expr-> binexp: .
<                   (expr-> binding: self[127])
<                   (expr-> id: d))
<                 (expr-> binding: dim[127]))
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->assignstmt:
<                     (expr-> binexp: .
<                       (expr-> binding: self[128])
<                       (expr-> id: d))
<                     (expr->[value=1] int: 1
<                       type->(type->kind=integer)))
<                   (stmt->ifstmt: 
<                     (expr-> binexp: =
<                       (expr-> binexp: .
<                         (expr-> binding: self[129])
<                         (expr-> id: m))
<                       (expr->[value=12] int: 12
<                         type->(type->kind=integer)))
<                     (stmt->compoundstmt:
<                       (stmts: 
<                         (stmt->assignstmt:
<                           (expr-> binexp: .
<                             (expr-> binding: self[131])
<                             (expr-> id: y))
<                           (expr-> binexp: +
<                             (expr-> binexp: .
<                               (expr-> binding: self[131])
<                               (expr-> id: y))
<                             (expr->[value=1] int: 1
<                               type->(type->kind=integer))))
<                         (stmt->assignstmt:
<                           (expr-> binexp: .
<                             (expr-> binding: self[132])
<                             (expr-> id: m))
<                           (expr->[value=1] int: 1
<                             type->(type->kind=integer)))))
<                     (else: 
<                       (stmt->assignstmt:
<                         (expr-> binexp: .
<                           (expr-> binding: self[135])
<                           (expr-> id: m))
<                         (expr-> binexp: +
<                           (expr-> binexp: .
<                             (expr-> binding: self[135])
<                             (expr-> id: m))
<                           (expr->[value=1] int: 1
<                             type->(type->kind=integer))))))
<                   (stmt->emptystmt:)))
<               (else: 
<                 (stmt->assignstmt:
<                   (expr-> binexp: .
<                     (expr-> binding: self[138])
<                     (expr-> id: d))
<                   (expr-> binexp: +
<                     (expr-> binexp: .
<                       (expr-> binding: self[138])
<                       (expr-> id: d))
<                     (expr->[value=1] int: 1
<                       type->(type->kind=integer)))))))))
<       (decl->function: dateequalsdate[141]
<         (formals: 
<           (decl->formal self[141]
<             (varmode=false)
<             (type->kind=ident: date[141]))
<           (decl->formal other[141]
<             (varmode=false)
<             (type->kind=ident: date[141])))
<         (type->kind=ident: boolean[141])
<         (block: 
<           (decls: 
<             (decl->variable: ret[143]
<               (type->kind=ident: boolean[143])))
<           (stmts: 
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=false writeln[145]
<                 (exprs: 
<                   (expr->[value='Entered dateEqualsDate'] string: 'Entered dateEqualsDate'
<                     type->(type->kind=string)))))
<             (stmt->ifstmt: 
<               (expr-> binexp: =
<                 (expr-> binexp: .
<                   (expr-> binding: self[147])
<                   (expr-> id: y))
<                 (expr-> binexp: .
<                   (expr-> binding: other[147])
<                   (expr-> id: y)))
<               (stmt->ifstmt: 
<                 (expr-> binexp: =
<                   (expr-> binexp: .
<                     (expr-> binding: self[148])
<                     (expr-> id: m))
<                   (expr-> binexp: .
<                     (expr-> binding: other[148])
<                     (expr-> id: m)))
<                 (stmt->ifstmt: 
<                   (expr-> binexp: =
<                     (expr-> binexp: .
<                       (expr-> binding: self[149])
<                       (expr-> id: d))
<                     (expr-> binexp: .
<                       (expr-> binding: other[149])
<                       (expr-> id: d)))
<                   (stmt->assignstmt:
<                     (expr-> binding: ret[150])
<                     (expr-> binding: true[150]))
<                   (else: 
<                     (stmt->assignstmt:
<                       (expr-> binding: ret[152])
<                       (expr-> binding: false[152]))))
<                 (else: 
<                   (stmt->assignstmt:
<                     (expr-> binding: ret[154])
<                     (expr-> binding: false[154]))))
<               (else: 
<                 (stmt->assignstmt:
<                   (expr-> binding: ret[156])
<                   (expr-> binding: false[156]))))
<             (stmt->assignstmt:
<               (expr-> binding: dateequalsdate[157])
<               (expr-> binding: ret[157]))))))
<     (stmts: 
<       (stmt->assignstmt:
<         (expr-> binding: d[161])
<         (expr-> call: isMethodCall=false mkdate[161]
<           (exprs: 
<             (expr->[value=2] int: 2
<               type->(type->kind=integer))
<             (expr->[value=9] int: 9
<               type->(type->kind=integer))
<             (expr->[value=1985] int: 1985
<               type->(type->kind=integer)))))
<       (stmt->callstmt:
<         (expr-> binexp: .
<           (expr-> binding: d[162])
<           (expr-> id: increment)))
<       (stmt->assignstmt:
<         (expr-> binexp: .
<           (expr-> binding: d[163])
<           (expr-> id: y))
<         (expr-> binexp: +
<           (expr-> binexp: .
<             (expr-> binding: d[163])
<             (expr-> id: y))
<           (expr->[value=10] int: 10
<             type->(type->kind=integer))))
<       (stmt->callstmt:
<         (expr-> binexp: .
<           (expr-> binding: d[164])
<           (expr-> id: print)))
<       (stmt->callstmt:
<         (expr-> binding: writeln[165]))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[166]
<           (exprs: 
<             (expr-> binexp: .
<               (expr-> binding: d[166])
<               (expr-> id: dayofyear)))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[167]
<           (exprs: 
<             (expr-> call: isMethodCall=true equalsdate[167]
<               (exprs: 
<                 (expr-> binding: d[167])
<                 (expr-> call: isMethodCall=false mkdate[167]
<                   (exprs: 
<                     (expr->[value=2] int: 2
<                       type->(type->kind=integer))
<                     (expr->[value=10] int: 10
<                       type->(type->kind=integer))
<                     (expr->[value=1995] int: 1995
<                       type->(type->kind=integer)))))))))
<       (stmt->assignstmt:
<         (expr-> binding: a[168])
<         (expr-> binding: d[168]))
<       (stmt->assignstmt:
<         (expr-> binding: d[169])
<         (expr-> call: isMethodCall=false narrow[169]
<           (exprs: 
<             (expr-> binding: a[169])
<             (expr-> binding: date[169]))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false write[170]
<           (exprs: 
<             (expr->[value='ISTYPE '] string: 'ISTYPE '
<               type->(type->kind=string))
<             (expr->[value=1] int: 1
<               type->(type->kind=integer)))))
<       (stmt->ifstmt: 
<         (expr-> call: isMethodCall=false istype[171]
<           (exprs: 
<             (expr-> binding: d[171])
<             (expr-> binding: root[171])))
<         (stmt->callstmt:
<           (expr-> call: isMethodCall=false writeln[171]
<             (exprs: 
<               (expr->[value=' ok'] string: ' ok'
<                 type->(type->kind=string)))))
<         (else: 
<           (stmt->callstmt:
<             (expr-> call: isMethodCall=false writeln[171]
<               (exprs: 
<                 (expr->[value=' bad'] string: ' bad'
<                   type->(type->kind=string)))))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false write[172]
<           (exprs: 
<             (expr->[value='ISTYPE '] string: 'ISTYPE '
<               type->(type->kind=string))
<             (expr->[value=2] int: 2
<               type->(type->kind=integer)))))
<       (stmt->ifstmt: 
<         (expr-> call: isMethodCall=false istype[173]
<           (exprs: 
<             (expr-> binding: d[173])
<             (expr-> binding: date[173])))
<         (stmt->callstmt:
<           (expr-> call: isMethodCall=false writeln[173]
<             (exprs: 
<               (expr->[value=' ok'] string: ' ok'
<                 type->(type->kind=string)))))
<         (else: 
<           (stmt->callstmt:
<             (expr-> call: isMethodCall=false writeln[173]
<               (exprs: 
<                 (expr->[value=' bad'] string: ' bad'
<                   type->(type->kind=string)))))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false write[174]
<           (exprs: 
<             (expr->[value='ISTYPE '] string: 'ISTYPE '
<               type->(type->kind=string))
<             (expr->[value=3] int: 3
<               type->(type->kind=integer)))))
<       (stmt->ifstmt: 
<         (expr-> call: isMethodCall=false istype[175]
<           (exprs: 
<             (expr-> binding: d[175])
<             (expr-> binding: anyobject[175])))
<         (stmt->callstmt:
<           (expr-> call: isMethodCall=false writeln[175]
<             (exprs: 
<               (expr->[value=' ok'] string: ' ok'
<                 type->(type->kind=string)))))
<         (else: 
<           (stmt->callstmt:
<             (expr-> call: isMethodCall=false writeln[175]
<               (exprs: 
<                 (expr->[value=' bad'] string: ' bad'
<                   type->(type->kind=string)))))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false write[178]
<           (exprs: 
<             (expr->[value='ISTYPE '] string: 'ISTYPE '
<               type->(type->kind=string))
<             (expr->[value=4] int: 4
<               type->(type->kind=integer)))))
<       (stmt->ifstmt: 
<         (expr-> call: isMethodCall=false istype[179]
<           (exprs: 
<             (expr->[value=0] nil:
<               type->(type->kind=<NIL>))
<             (expr-> binding: root[179])))
<         (stmt->callstmt:
<           (expr-> call: isMethodCall=false writeln[179]
<             (exprs: 
<               (expr->[value=' ok'] string: ' ok'
<                 type->(type->kind=string)))))
<         (else: 
<           (stmt->callstmt:
<             (expr-> call: isMethodCall=false writeln[179]
<               (exprs: 
<                 (expr->[value=' bad'] string: ' bad'
<                   type->(type->kind=string)))))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false write[180]
<           (exprs: 
<             (expr->[value='ISTYPE '] string: 'ISTYPE '
<               type->(type->kind=string))
<             (expr->[value=5] int: 5
<               type->(type->kind=integer)))))
<       (stmt->ifstmt: 
<         (expr-> call: isMethodCall=false istype[181]
<           (exprs: 
<             (expr->[value=0] nil:
<               type->(type->kind=<NIL>))
<             (expr-> binding: date[181])))
<         (stmt->callstmt:
<           (expr-> call: isMethodCall=false writeln[181]
<             (exprs: 
<               (expr->[value=' ok'] string: ' ok'
<                 type->(type->kind=string)))))
<         (else: 
<           (stmt->callstmt:
<             (expr-> call: isMethodCall=false writeln[181]
<               (exprs: 
<                 (expr->[value=' bad'] string: ' bad'
<                   type->(type->kind=string)))))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false write[182]
<           (exprs: 
<             (expr->[value='ISTYPE '] string: 'ISTYPE '
<               type->(type->kind=string))
<             (expr->[value=6] int: 6
<               type->(type->kind=integer)))))
<       (stmt->ifstmt: 
<         (expr-> call: isMethodCall=false istype[183]
<           (exprs: 
<             (expr->[value=0] nil:
<               type->(type->kind=<NIL>))
<             (expr-> binding: anyobject[183])))
<         (stmt->callstmt:
<           (expr-> call: isMethodCall=false writeln[183]
<             (exprs: 
<               (expr->[value=' ok'] string: ' ok'
<                 type->(type->kind=string)))))
<         (else: 
<           (stmt->callstmt:
<             (expr-> call: isMethodCall=false writeln[183]
<               (exprs: 
<                 (expr->[value=' bad'] string: ' bad'
<                   type->(type->kind=string)))))))
<       (stmt->assignstmt:
<         (expr-> binding: a[185])
<         (expr-> call: isMethodCall=false narrow[185]
<           (exprs: 
<             (expr->[value=0] nil:
<               type->(type->kind=<NIL>))
<             (expr-> binding: anyobject[185]))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[186]
<           (exprs: 
<             (expr->[value='should get here: NARROW(NIL, AnyObject)'] string: 'should get here: NARROW(NIL, AnyObject)'
<               type->(type->kind=string)))))
<       (stmt->assignstmt:
<         (expr-> binding: a[187])
<         (expr-> call: isMethodCall=false narrow[187]
<           (exprs: 
<             (expr->[value=0] nil:
<               type->(type->kind=<NIL>))
<             (expr-> binding: date[187]))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[188]
<           (exprs: 
<             (expr->[value='should get here: NARROW(NIL, Date)'] string: 'should get here: NARROW(NIL, Date)'
<               type->(type->kind=string)))))
<       (stmt->assignstmt:
<         (expr-> binding: r[189])
<         (expr-> call: isMethodCall=false new[189]
<           (exprs: 
<             (expr-> binding: root[189]))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false write[191]
<           (exprs: 
<             (expr->[value='ISTYPE '] string: 'ISTYPE '
<               type->(type->kind=string))
<             (expr->[value=7] int: 7
<               type->(type->kind=integer)))))
<       (stmt->ifstmt: 
<         (expr-> call: isMethodCall=false istype[192]
<           (exprs: 
<             (expr-> binding: r[192])
<             (expr-> binding: root[192])))
<         (stmt->callstmt:
<           (expr-> call: isMethodCall=false writeln[192]
<             (exprs: 
<               (expr->[value=' ok'] string: ' ok'
<                 type->(type->kind=string)))))
<         (else: 
<           (stmt->callstmt:
<             (expr-> call: isMethodCall=false writeln[192]
<               (exprs: 
<                 (expr->[value=' bad'] string: ' bad'
<                   type->(type->kind=string)))))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false write[193]
<           (exprs: 
<             (expr->[value='ISTYPE '] string: 'ISTYPE '
<               type->(type->kind=string))
<             (expr->[value=8] int: 8
<               type->(type->kind=integer)))))
<       (stmt->ifstmt: 
<         (expr-> call: isMethodCall=false istype[194]
<           (exprs: 
<             (expr-> binding: r[194])
<             (expr-> binding: date[194])))
<         (stmt->callstmt:
<           (expr-> call: isMethodCall=false writeln[194]
<             (exprs: 
<               (expr->[value=' bad'] string: ' bad'
<                 type->(type->kind=string)))))
<         (else: 
<           (stmt->callstmt:
<             (expr-> call: isMethodCall=false writeln[194]
<               (exprs: 
<                 (expr->[value=' ok'] string: ' ok'
<                   type->(type->kind=string)))))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false write[195]
<           (exprs: 
<             (expr->[value='ISTYPE '] string: 'ISTYPE '
<               type->(type->kind=string))
<             (expr->[value=9] int: 9
<               type->(type->kind=integer)))))
<       (stmt->ifstmt: 
<         (expr-> call: isMethodCall=false istype[196]
<           (exprs: 
<             (expr-> binding: r[196])
<             (expr-> binding: anyobject[196])))
<         (stmt->callstmt:
<           (expr-> call: isMethodCall=false writeln[196]
<             (exprs: 
<               (expr->[value=' bad'] string: ' bad'
<                 type->(type->kind=string)))))
<         (else: 
<           (stmt->callstmt:
<             (expr-> call: isMethodCall=false writeln[196]
<               (exprs: 
<                 (expr->[value=' ok'] string: ' ok'
<                   type->(type->kind=string)))))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[197]
<           (exprs: 
<             (expr->[value='got here, now should fail at NARROW(r, Date)'] string: 'got here, now should fail at NARROW(r, Date)'
<               type->(type->kind=string)))))
<       (stmt->assignstmt:
<         (expr-> binding: d[198])
<         (expr-> call: isMethodCall=false narrow[198]
<           (exprs: 
<             (expr-> binding: r[198])
<             (expr-> binding: date[198]))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[199]
<           (exprs: 
<             (expr->[value='should not get here'] string: 'should not get here'
<               type->(type->kind=string)))))
<       (stmt->emptystmt:))))


testobject2.err:
1,2c1,5
< line 6: Syntax Error: @;
< line 7: Syntax Error: end
---
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testobject3.err:
0a1,5
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testobject3.parse:
1,336d0
< (program: 
<   (decls: 
<     (decl->program: testobject3[3]))
<   (block: 
<     (decls: 
<       (decl->type: object1[6]
<         (type->kind=pointer:
<           (type->kind=object: name=object1
<             (extends: (type->kind=ident: integer[6]))
<             (abstract: false)
<             (methods: 
<               (decl->((type->kind=method procedure name=add
<                     (formals: 
<                       (decl->formal self[6]
<                         (varmode=false)
<                         (type->kind=ident: object1[6]))
<                       (decl->formal x[6]
<                         (varmode=false)
<                         (type->kind=ident: integer[6]))))
<                   implemented-by: add[6]))))))
<       (decl->type: object2[7]
<         (type->kind=pointer:
<           (type->kind=object: name=object2
<             (extends: (type->kind=ident: object3[7]))
<             (abstract: false)
<             (overrides: 
<               (method[7] object2method[7])))))
<       (decl->type: object3[8]
<         (type->kind=pointer:
<           (type->kind=object: name=object3
<             (extends: (type->kind=ident: root[8]))
<             (abstract: false)
<             (fields: 
<               (decl->field: x[9]
<                 (type->kind=ident: integer[9])))
<             (methods: 
<               (decl->((type->kind=method procedure name=method
<                     (formals: 
<                       (decl->formal self[11]
<                         (varmode=false)
<                         (type->kind=ident: object3[11]))))
<                   implemented-by: method[11]))))))
<       (decl->type: object4[13]
<         (type->kind=pointer:
<           (type->kind=object: name=object4
<             (extends: (type->kind=ident: root[8]))
<             (abstract: false)
<             (fields: 
<               (decl->field: x[14]
<                 (type->kind=ident: integer[14])))
<             (methods: 
<               (decl->((type->kind=method function name=multiply
<                     (formals: 
<                       (decl->formal self[16]
<                         (varmode=false)
<                         (type->kind=ident: object4[16]))
<                       (decl->formal x[16]
<                         (varmode=false)
<                         (type->kind=ident: integer[16])))
<                     (type->kind=ident: object4[16]))
<                   implemented-by: multiply[16]))))))
<       (decl->type: object5[18]
<         (type->kind=pointer:
<           (type->kind=object: name=object5
<             (extends: (type->kind=ident: object4[18]))
<             (abstract: false)
<             (overrides: 
<               (multiply[20] object5multiply[20])))))
<       (decl->type: object6[22]
<         (type->kind=pointer:
<           (type->kind=object: name=object6
<             (extends: (type->kind=ident: object4[22]))
<             (abstract: true)
<             (overrides: 
<               (multiply[24] object6multiply[24])))))
<       (decl->type: object7[26]
<         (type->kind=pointer:
<           (type->kind=object: name=object7
<             (extends: (type->kind=ident: object6[26]))
<             (abstract: false)
<             (methods: 
<               (decl->((type->kind=method function name=add
<                     (formals: 
<                       (decl->formal self[28]
<                         (varmode=false)
<                         (type->kind=ident: object7[28]))
<                       (decl->formal x[28]
<                         (varmode=true)
<                         (type->kind=ident: integer[28])))
<                     (type->kind=ident: object7[28]))
<                   implemented-by: add[28]))))))
<       (decl->variable: o1[31]
<         (type->kind=ident: object1[31]))
<       (decl->variable: o2[32]
<         (type->kind=ident: object2[32]))
<       (decl->variable: o3[33]
<         (type->kind=ident: object3[33]))
<       (decl->variable: o4[34]
<         (type->kind=ident: object4[34]))
<       (decl->variable: o5[35]
<         (type->kind=ident: object5[35]))
<       (decl->variable: o6[36]
<         (type->kind=ident: object6[36]))
<       (decl->variable: o7[37]
<         (type->kind=ident: object7[37]))
<       (decl->procedure: object2method[39]
<         (formals: 
<           (decl->formal self[39]
<             (varmode=false)
<             (type->kind=ident: object2[39])))
<         (block: 
<           (stmts: 
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=false writeln[41]
<                 (exprs: 
<                   (expr-> binexp: .
<                     (expr-> binding: self[41])
<                     (expr-> id: x)))))
<             (stmt->emptystmt:))))
<       (decl->function: object3method[44]
<         (formals: 
<           (decl->formal x[44]
<             (varmode=false)
<             (type->kind=ident: integer[44])))
<         (type->kind=ident: integer[44])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: object3method[46])
<               (expr-> binexp: *
<                 (expr->[value=2] int: 2
<                   type->(type->kind=integer))
<                 (expr-> binding: x[46])))
<             (stmt->emptystmt:))))
<       (decl->function: object5multiply[49]
<         (formals: 
<           (decl->formal self[49]
<             (varmode=false)
<             (type->kind=ident: object5[49]))
<           (decl->formal x[49]
<             (varmode=false)
<             (type->kind=ident: integer[49])))
<         (type->kind=ident: integer[49])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: object5multiply[51])
<               (expr-> binexp: *
<                 (expr-> binexp: .
<                   (expr-> binding: self[51])
<                   (expr-> id: x))
<                 (expr-> binding: x[51])))
<             (stmt->emptystmt:))))
<       (decl->function: object6multiply[54]
<         (formals: 
<           (decl->formal self[54]
<             (varmode=false)
<             (type->kind=ident: object7[54]))
<           (decl->formal x[54]
<             (varmode=false)
<             (type->kind=ident: integer[54])))
<         (type->kind=ident: object6[54])
<         (block: 
<           (decls: 
<             (decl->variable: obj[56]
<               (type->kind=ident: object6[56])))
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: obj[58])
<               (expr-> call: isMethodCall=false new[58]
<                 (exprs: 
<                   (expr-> binding: object7[58]))))
<             (stmt->assignstmt:
<               (expr-> binexp: .
<                 (expr-> binding: obj[59])
<                 (expr-> id: x))
<               (expr-> binexp: *
<                 (expr-> binexp: .
<                   (expr-> binding: self[59])
<                   (expr-> id: x))
<                 (expr-> binding: x[59])))
<             (stmt->assignstmt:
<               (expr-> binding: object6multiply[60])
<               (expr-> binding: obj[60]))
<             (stmt->emptystmt:))))
<       (decl->function: object7add[63]
<         (formals: 
<           (decl->formal self[63]
<             (varmode=false)
<             (type->kind=ident: object7[63]))
<           (decl->formal x[63]
<             (varmode=false)
<             (type->kind=ident: integer[63])))
<         (type->kind=ident: object7[63])
<         (block: 
<           (decls: 
<             (decl->variable: obj[65]
<               (type->kind=ident: object7[65])))
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: obj[67])
<               (expr-> call: isMethodCall=false new[67]
<                 (exprs: 
<                   (expr-> binding: object7[67]))))
<             (stmt->assignstmt:
<               (expr-> binexp: .
<                 (expr-> binding: obj[68])
<                 (expr-> id: x))
<               (expr-> binexp: +
<                 (expr-> binexp: .
<                   (expr-> binding: self[68])
<                   (expr-> id: x))
<                 (expr-> binding: x[68])))
<             (stmt->assignstmt:
<               (expr-> binding: object7add[69])
<               (expr-> binding: obj[69]))))))
<     (stmts: 
<       (stmt->assignstmt:
<         (expr-> binding: o4[72])
<         (expr-> call: isMethodCall=false new[72]
<           (exprs: 
<             (expr-> binding: object4[72]))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[73]
<           (exprs: 
<             (expr-> binexp: .
<               (expr-> unexp: ^
<                 (expr-> binding: o4[73]))
<               (expr-> id: x)))))
<       (stmt->assignstmt:
<         (expr-> binding: o6[74])
<         (expr-> call: isMethodCall=false new[74]
<           (exprs: 
<             (expr-> binding: object6[74]))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false new[75]
<           (exprs: 
<             (expr-> binding: o6[75]))))
<       (stmt->assignstmt:
<         (expr-> binding: o6[76])
<         (expr-> binding: o4[76]))
<       (stmt->assignstmt:
<         (expr-> binding: o4[77])
<         (expr-> binding: o6[77]))
<       (stmt->assignstmt:
<         (expr-> binding: o4[78])
<         (expr-> binding: o4[78]))
<       (stmt->ifstmt: 
<         (expr-> call: isMethodCall=false istype[79]
<           (exprs: 
<             (expr-> binding: o4[79])))
<         (stmt->callstmt:
<           (expr-> binding: writeln[79])))
<       (stmt->ifstmt: 
<         (expr-> call: isMethodCall=false istype[80]
<           (exprs: 
<             (expr-> binding: o4[80])
<             (expr-> binding: object4[80])
<             (expr->[value=3] int: 3
<               type->(type->kind=integer))))
<         (stmt->callstmt:
<           (expr-> binding: writeln[80])))
<       (stmt->ifstmt: 
<         (expr-> call: isMethodCall=false istype[81]
<           (exprs: 
<             (expr-> binding: o4[81])
<             (expr-> binding: integer[81])))
<         (stmt->callstmt:
<           (expr-> binding: writeln[81])))
<       (stmt->ifstmt: 
<         (expr-> call: isMethodCall=false istype[82]
<           (exprs: 
<             (expr-> binding: o4[82])
<             (expr-> binding: object4[82])))
<         (stmt->callstmt:
<           (expr-> binding: writeln[82])))
<       (stmt->ifstmt: 
<         (expr-> call: isMethodCall=false istype[83]
<           (exprs: 
<             (expr->[value=35] int: 35
<               type->(type->kind=integer))
<             (expr-> binding: object4[83])))
<         (stmt->callstmt:
<           (expr-> binding: writeln[83])))
<       (stmt->ifstmt: 
<         (expr-> call: isMethodCall=false istype[84]
<           (exprs: 
<             (expr->[value=0] nil:
<               type->(type->kind=<NIL>))
<             (expr-> binding: object4[84])))
<         (stmt->callstmt:
<           (expr-> binding: writeln[84])))
<       (stmt->assignstmt:
<         (expr-> binding: o4[85])
<         (expr-> call: isMethodCall=false narrow[85]
<           (exprs: 
<             (expr-> binding: o4[85]))))
<       (stmt->assignstmt:
<         (expr-> binding: o4[86])
<         (expr-> call: isMethodCall=false narrow[86]
<           (exprs: 
<             (expr-> binding: o4[86])
<             (expr-> binding: object4[86])
<             (expr->[value=3] int: 3
<               type->(type->kind=integer)))))
<       (stmt->assignstmt:
<         (expr-> binding: o4[87])
<         (expr-> call: isMethodCall=false narrow[87]
<           (exprs: 
<             (expr-> binding: o4[87])
<             (expr-> binding: integer[87]))))
<       (stmt->assignstmt:
<         (expr-> binding: o4[88])
<         (expr-> call: isMethodCall=false narrow[88]
<           (exprs: 
<             (expr-> binding: o4[88])
<             (expr-> binding: object4[88]))))
<       (stmt->assignstmt:
<         (expr-> binding: o4[89])
<         (expr-> call: isMethodCall=false narrow[89]
<           (exprs: 
<             (expr->[value=35] int: 35
<               type->(type->kind=integer))
<             (expr-> binding: object4[89]))))
<       (stmt->assignstmt:
<         (expr-> binding: o4[90])
<         (expr-> call: isMethodCall=false narrow[90]
<           (exprs: 
<             (expr->[value=0] nil:
<               type->(type->kind=<NIL>))
<             (expr-> binding: object4[90]))))
<       (stmt->assignstmt:
<         (expr-> binding: o4[91])
<         (expr->[value=0] nil:
<           type->(type->kind=<NIL>)))
<       (stmt->emptystmt:))))


testobject4.err:
0a1,5
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testobject4.parse:
1,3487d0
< (program: 
<   (decls: 
<     (decl->program: testobject4[3]))
<   (block: 
<     (decls: 
<       (decl->type: hasequals[6]
<         (type->kind=pointer:
<           (type->kind=object: name=hasequals
<             (extends: (type->kind=ident: root[6]))
<             (abstract: true)
<             (methods: 
<               (decl->((type->kind=method function name=equals
<                     (formals: 
<                       (decl->formal self[8]
<                         (varmode=false)
<                         (type->kind=ident: hasequals[8]))
<                       (decl->formal other[8]
<                         (varmode=false)
<                         (type->kind=ident: root[8])))
<                     (type->kind=ident: boolean[8]))
<                   implemented-by: equals[8]))))))
<       (decl->type: iterator[11]
<         (type->kind=pointer:
<           (type->kind=object: name=iterator
<             (extends: (type->kind=ident: root[6]))
<             (abstract: true)
<             (methods: 
<               (decl->((type->kind=method function name=next
<                     (formals: 
<                       (decl->formal self[13]
<                         (varmode=false)
<                         (type->kind=ident: iterator[13])))
<                     (type->kind=ident: root[13]))
<                   implemented-by: next[13]))
<               (decl->((type->kind=method function name=hasnext
<                     (formals: 
<                       (decl->formal self[14]
<                         (varmode=false)
<                         (type->kind=ident: iterator[14])))
<                     (type->kind=ident: boolean[14]))
<                   implemented-by: hasnext[14]))
<               (decl->((type->kind=method procedure name=remove
<                     (formals: 
<                       (decl->formal self[15]
<                         (varmode=false)
<                         (type->kind=ident: iterator[15]))))
<                   implemented-by: remove[15]))))))
<       (decl->type: iterable[18]
<         (type->kind=pointer:
<           (type->kind=object: name=iterable
<             (extends: (type->kind=ident: root[6]))
<             (abstract: true)
<             (methods: 
<               (decl->((type->kind=method function name=getiterator
<                     (formals: 
<                       (decl->formal self[20]
<                         (varmode=false)
<                         (type->kind=ident: iterable[20])))
<                     (type->kind=ident: iterator[20]))
<                   implemented-by: getiterator[20]))))))
<       (decl->type: collection[23]
<         (type->kind=pointer:
<           (type->kind=object: name=collection
<             (extends: (type->kind=ident: iterable[23]))
<             (abstract: true)
<             (methods: 
<               (decl->((type->kind=method function name=size
<                     (formals: 
<                       (decl->formal self[26]
<                         (varmode=false)
<                         (type->kind=ident: collection[26])))
<                     (type->kind=ident: integer[26]))
<                   implemented-by: size[26]))
<               (decl->((type->kind=method function name=isempty
<                     (formals: 
<                       (decl->formal self[27]
<                         (varmode=false)
<                         (type->kind=ident: collection[27])))
<                     (type->kind=ident: boolean[27]))
<                   implemented-by: isempty[27]))
<               (decl->((type->kind=method function name=contains
<                     (formals: 
<                       (decl->formal self[29]
<                         (varmode=false)
<                         (type->kind=ident: collection[29]))
<                       (decl->formal o[29]
<                         (varmode=false)
<                         (type->kind=ident: hasequals[29])))
<                     (type->kind=ident: boolean[29]))
<                   implemented-by: contains[29]))
<               (decl->((type->kind=method function name=add
<                     (formals: 
<                       (decl->formal self[30]
<                         (varmode=false)
<                         (type->kind=ident: collection[30]))
<                       (decl->formal o[30]
<                         (varmode=false)
<                         (type->kind=ident: hasequals[30])))
<                     (type->kind=ident: boolean[30]))
<                   implemented-by: add[30]))
<               (decl->((type->kind=method function name=remove
<                     (formals: 
<                       (decl->formal self[31]
<                         (varmode=false)
<                         (type->kind=ident: collection[31]))
<                       (decl->formal o[31]
<                         (varmode=false)
<                         (type->kind=ident: hasequals[31])))
<                     (type->kind=ident: boolean[31]))
<                   implemented-by: remove[31]))
<               (decl->((type->kind=method procedure name=clear
<                     (formals: 
<                       (decl->formal self[33]
<                         (varmode=false)
<                         (type->kind=ident: collection[33]))))
<                   implemented-by: clear[33]))
<               (decl->((type->kind=method function name=addall
<                     (formals: 
<                       (decl->formal self[34]
<                         (varmode=false)
<                         (type->kind=ident: collection[34]))
<                       (decl->formal other[34]
<                         (varmode=false)
<                         (type->kind=ident: collection[34])))
<                     (type->kind=ident: boolean[34]))
<                   implemented-by: addall[34]))
<               (decl->((type->kind=method function name=containsall
<                     (formals: 
<                       (decl->formal self[35]
<                         (varmode=false)
<                         (type->kind=ident: collection[35]))
<                       (decl->formal other[35]
<                         (varmode=false)
<                         (type->kind=ident: collection[35])))
<                     (type->kind=ident: boolean[35]))
<                   implemented-by: containsall[35]))
<               (decl->((type->kind=method function name=equals
<                     (formals: 
<                       (decl->formal self[36]
<                         (varmode=false)
<                         (type->kind=ident: collection[36]))
<                       (decl->formal other[36]
<                         (varmode=false)
<                         (type->kind=ident: collection[36])))
<                     (type->kind=ident: boolean[36]))
<                   implemented-by: equals[36]))
<               (decl->((type->kind=method function name=removeall
<                     (formals: 
<                       (decl->formal self[37]
<                         (varmode=false)
<                         (type->kind=ident: collection[37]))
<                       (decl->formal other[37]
<                         (varmode=false)
<                         (type->kind=ident: collection[37])))
<                     (type->kind=ident: boolean[37]))
<                   implemented-by: removeall[37]))
<               (decl->((type->kind=method function name=retainall
<                     (formals: 
<                       (decl->formal self[38]
<                         (varmode=false)
<                         (type->kind=ident: collection[38]))
<                       (decl->formal other[38]
<                         (varmode=false)
<                         (type->kind=ident: collection[38])))
<                     (type->kind=ident: boolean[38]))
<                   implemented-by: retainall[38]))))))
<       (decl->type: abscoll[42]
<         (type->kind=pointer:
<           (type->kind=object: name=abscoll
<             (extends: (type->kind=ident: collection[42]))
<             (abstract: true)
<             (overrides: 
<               (isempty[44] acisempty[44])
<               (contains[45] accontains[45])
<               (clear[46] acclear[46])
<               (addall[47] acaddall[47])
<               (containsall[48] accontainsall[48])
<               (removeall[49] acremoveall[49])
<               (retainall[50] acretainall[50])))))
<       (decl->function: acisempty[53]
<         (formals: 
<           (decl->formal self[53]
<             (varmode=false)
<             (type->kind=ident: abscoll[53])))
<         (type->kind=ident: boolean[53])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: acisempty[55])
<               (expr-> binexp: =
<                 (expr-> binexp: .
<                   (expr-> binding: self[55])
<                   (expr-> id: size))
<                 (expr->[value=0] int: 0
<                   type->(type->kind=integer))))
<             (stmt->emptystmt:))))
<       (decl->function: accontains[58]
<         (formals: 
<           (decl->formal self[58]
<             (varmode=false)
<             (type->kind=ident: abscoll[58]))
<           (decl->formal item[58]
<             (varmode=false)
<             (type->kind=ident: hasequals[58])))
<         (type->kind=ident: boolean[58])
<         (block: 
<           (decls: 
<             (decl->variable: it[60]
<               (type->kind=ident: iterator[60]))
<             (decl->variable: searching[61]
<               (type->kind=ident: boolean[61])))
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: accontains[63])
<               (expr-> binding: false[63]))
<             (stmt->assignstmt:
<               (expr-> binding: searching[64])
<               (expr-> binding: true[64]))
<             (stmt->assignstmt:
<               (expr-> binding: it[65])
<               (expr-> binexp: .
<                 (expr-> binding: self[65])
<                 (expr-> id: getiterator)))
<             (stmt->whilestmt:
<               (expr-> binding: searching[66])
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->ifstmt: 
<                     (expr-> binexp: .
<                       (expr-> binding: it[67])
<                       (expr-> id: hasnext))
<                     (stmt->compoundstmt:
<                       (stmts: 
<                         (stmt->ifstmt: 
<                           (expr-> call: isMethodCall=true equals[68]
<                             (exprs: 
<                               (expr-> call: isMethodCall=false narrow[68]
<                                 (exprs: 
<                                   (expr-> binexp: .
<                                     (expr-> binding: it[68])
<                                     (expr-> id: next))
<                                   (expr-> binding: hasequals[68])))
<                               (expr-> binding: item[68])))
<                           (stmt->compoundstmt:
<                             (stmts: 
<                               (stmt->assignstmt:
<                                 (expr-> binding: accontains[69])
<                                 (expr-> binding: true[69]))
<                               (stmt->assignstmt:
<                                 (expr-> binding: searching[70])
<                                 (expr-> binding: false[70]))
<                               (stmt->emptystmt:))))
<                         (stmt->emptystmt:)))
<                     (else: 
<                       (stmt->compoundstmt:
<                         (stmts: 
<                           (stmt->assignstmt:
<                             (expr-> binding: searching[73])
<                             (expr-> binding: false[73]))
<                           (stmt->emptystmt:)))))
<                   (stmt->emptystmt:))))
<             (stmt->emptystmt:))))
<       (decl->procedure: acclear[78]
<         (formals: 
<           (decl->formal self[78]
<             (varmode=false)
<             (type->kind=ident: abscoll[78])))
<         (block: 
<           (decls: 
<             (decl->variable: it[80]
<               (type->kind=ident: iterator[80]))
<             (decl->variable: o[81]
<               (type->kind=ident: root[81])))
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: it[83])
<               (expr-> binexp: .
<                 (expr-> binding: self[83])
<                 (expr-> id: getiterator)))
<             (stmt->whilestmt:
<               (expr-> binexp: .
<                 (expr-> binding: it[84])
<                 (expr-> id: hasnext))
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->assignstmt:
<                     (expr-> binding: o[85])
<                     (expr-> binexp: .
<                       (expr-> binding: it[85])
<                       (expr-> id: next)))
<                   (stmt->callstmt:
<                     (expr-> binexp: .
<                       (expr-> binding: it[86])
<                       (expr-> id: remove)))
<                   (stmt->emptystmt:))))
<             (stmt->emptystmt:))))
<       (decl->function: acaddall[90]
<         (formals: 
<           (decl->formal self[90]
<             (varmode=false)
<             (type->kind=ident: abscoll[90]))
<           (decl->formal other[90]
<             (varmode=false)
<             (type->kind=ident: collection[90])))
<         (type->kind=ident: boolean[90])
<         (block: 
<           (decls: 
<             (decl->variable: it[91]
<               (type->kind=ident: iterator[91])))
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: it[93])
<               (expr-> binexp: .
<                 (expr-> binding: other[93])
<                 (expr-> id: getiterator)))
<             (stmt->assignstmt:
<               (expr-> binding: acaddall[94])
<               (expr-> binding: false[94]))
<             (stmt->whilestmt:
<               (expr-> binexp: .
<                 (expr-> binding: it[95])
<                 (expr-> id: hasnext))
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->ifstmt: 
<                     (expr-> call: isMethodCall=true add[96]
<                       (exprs: 
<                         (expr-> binding: self[96])
<                         (expr-> call: isMethodCall=false narrow[96]
<                           (exprs: 
<                             (expr-> binexp: .
<                               (expr-> binding: it[96])
<                               (expr-> id: next))
<                             (expr-> binding: hasequals[96])))))
<                     (stmt->compoundstmt:
<                       (stmts: 
<                         (stmt->assignstmt:
<                           (expr-> binding: acaddall[97])
<                           (expr-> binding: true[97]))
<                         (stmt->emptystmt:))))
<                   (stmt->emptystmt:))))
<             (stmt->emptystmt:))))
<       (decl->function: accontainsall[102]
<         (formals: 
<           (decl->formal self[102]
<             (varmode=false)
<             (type->kind=ident: abscoll[102]))
<           (decl->formal other[102]
<             (varmode=false)
<             (type->kind=ident: collection[102])))
<         (type->kind=ident: boolean[102])
<         (block: 
<           (decls: 
<             (decl->variable: it[104]
<               (type->kind=ident: iterator[104]))
<             (decl->variable: searching[105]
<               (type->kind=ident: boolean[105])))
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: accontainsall[107])
<               (expr-> binding: true[107]))
<             (stmt->assignstmt:
<               (expr-> binding: searching[108])
<               (expr-> binding: true[108]))
<             (stmt->assignstmt:
<               (expr-> binding: it[109])
<               (expr-> binexp: .
<                 (expr-> binding: other[109])
<                 (expr-> id: getiterator)))
<             (stmt->whilestmt:
<               (expr-> binding: searching[110])
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->ifstmt: 
<                     (expr-> binexp: .
<                       (expr-> binding: it[111])
<                       (expr-> id: hasnext))
<                     (stmt->compoundstmt:
<                       (stmts: 
<                         (stmt->ifstmt: 
<                           (expr-> unexp: not
<                             (expr-> call: isMethodCall=true contains[112]
<                               (exprs: 
<                                 (expr-> binding: self[112])
<                                 (expr-> call: isMethodCall=false narrow[112]
<                                   (exprs: 
<                                     (expr-> binexp: .
<                                       (expr-> binding: it[112])
<                                       (expr-> id: next))
<                                     (expr-> binding: hasequals[112]))))))
<                           (stmt->compoundstmt:
<                             (stmts: 
<                               (stmt->assignstmt:
<                                 (expr-> binding: accontainsall[113])
<                                 (expr-> binding: false[113]))
<                               (stmt->assignstmt:
<                                 (expr-> binding: searching[114])
<                                 (expr-> binding: false[114]))
<                               (stmt->emptystmt:))))
<                         (stmt->emptystmt:))))
<                   (stmt->emptystmt:))))
<             (stmt->emptystmt:))))
<       (decl->function: acremoveall[120]
<         (formals: 
<           (decl->formal self[120]
<             (varmode=false)
<             (type->kind=ident: abscoll[120]))
<           (decl->formal other[120]
<             (varmode=false)
<             (type->kind=ident: collection[120])))
<         (type->kind=ident: boolean[120])
<         (block: 
<           (decls: 
<             (decl->variable: it[121]
<               (type->kind=ident: iterator[121])))
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: it[123])
<               (expr-> binexp: .
<                 (expr-> binding: other[123])
<                 (expr-> id: getiterator)))
<             (stmt->assignstmt:
<               (expr-> binding: acremoveall[124])
<               (expr-> binding: false[124]))
<             (stmt->whilestmt:
<               (expr-> binexp: .
<                 (expr-> binding: it[125])
<                 (expr-> id: hasnext))
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->ifstmt: 
<                     (expr-> call: isMethodCall=true remove[126]
<                       (exprs: 
<                         (expr-> binding: self[126])
<                         (expr-> call: isMethodCall=false narrow[126]
<                           (exprs: 
<                             (expr-> binexp: .
<                               (expr-> binding: it[126])
<                               (expr-> id: next))
<                             (expr-> binding: hasequals[126])))))
<                     (stmt->compoundstmt:
<                       (stmts: 
<                         (stmt->assignstmt:
<                           (expr-> binding: acremoveall[127])
<                           (expr-> binding: true[127]))
<                         (stmt->emptystmt:))))
<                   (stmt->emptystmt:))))
<             (stmt->emptystmt:))))
<       (decl->function: acretainall[132]
<         (formals: 
<           (decl->formal self[132]
<             (varmode=false)
<             (type->kind=ident: abscoll[132]))
<           (decl->formal other[132]
<             (varmode=false)
<             (type->kind=ident: collection[132])))
<         (type->kind=ident: boolean[132])
<         (block: 
<           (decls: 
<             (decl->variable: it[133]
<               (type->kind=ident: iterator[133])))
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: it[135])
<               (expr-> binexp: .
<                 (expr-> binding: self[135])
<                 (expr-> id: getiterator)))
<             (stmt->assignstmt:
<               (expr-> binding: acretainall[136])
<               (expr-> binding: false[136]))
<             (stmt->whilestmt:
<               (expr-> binexp: .
<                 (expr-> binding: it[137])
<                 (expr-> id: hasnext))
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->ifstmt: 
<                     (expr-> unexp: not
<                       (expr-> call: isMethodCall=true contains[138]
<                         (exprs: 
<                           (expr-> binding: other[138])
<                           (expr-> call: isMethodCall=false narrow[138]
<                             (exprs: 
<                               (expr-> binexp: .
<                                 (expr-> binding: it[138])
<                                 (expr-> id: next))
<                               (expr-> binding: hasequals[138]))))))
<                     (stmt->compoundstmt:
<                       (stmts: 
<                         (stmt->callstmt:
<                           (expr-> binexp: .
<                             (expr-> binding: it[139])
<                             (expr-> id: remove)))
<                         (stmt->assignstmt:
<                           (expr-> binding: acretainall[140])
<                           (expr-> binding: true[140]))
<                         (stmt->emptystmt:))))
<                   (stmt->emptystmt:))))
<             (stmt->emptystmt:))))
<       (decl->type: listiterator[146]
<         (type->kind=pointer:
<           (type->kind=object: name=listiterator
<             (extends: (type->kind=ident: iterator[146]))
<             (abstract: true)
<             (methods: 
<               (decl->((type->kind=method procedure name=add
<                     (formals: 
<                       (decl->formal self[149]
<                         (varmode=false)
<                         (type->kind=ident: listiterator[149]))
<                       (decl->formal o[149]
<                         (varmode=false)
<                         (type->kind=ident: root[149]))))
<                   implemented-by: add[149]))
<               (decl->((type->kind=method procedure name=set
<                     (formals: 
<                       (decl->formal self[150]
<                         (varmode=false)
<                         (type->kind=ident: listiterator[150]))
<                       (decl->formal o[150]
<                         (varmode=false)
<                         (type->kind=ident: root[150]))))
<                   implemented-by: set[150]))
<               (decl->((type->kind=method function name=nextindex
<                     (formals: 
<                       (decl->formal self[152]
<                         (varmode=false)
<                         (type->kind=ident: listiterator[152])))
<                     (type->kind=ident: integer[152]))
<                   implemented-by: nextindex[152]))
<               (decl->((type->kind=method function name=hasprevious
<                     (formals: 
<                       (decl->formal self[153]
<                         (varmode=false)
<                         (type->kind=ident: listiterator[153])))
<                     (type->kind=ident: boolean[153]))
<                   implemented-by: hasprevious[153]))
<               (decl->((type->kind=method function name=previous
<                     (formals: 
<                       (decl->formal self[154]
<                         (varmode=false)
<                         (type->kind=ident: listiterator[154])))
<                     (type->kind=ident: root[154]))
<                   implemented-by: previous[154]))
<               (decl->((type->kind=method function name=previousindex
<                     (formals: 
<                       (decl->formal self[155]
<                         (varmode=false)
<                         (type->kind=ident: listiterator[155])))
<                     (type->kind=ident: integer[155]))
<                   implemented-by: previousindex[155]))))))
<       (decl->type: abslist[158]
<         (type->kind=pointer:
<           (type->kind=object: name=abslist
<             (extends: (type->kind=ident: abscoll[158]))
<             (abstract: true)
<             (methods: 
<               (decl->((type->kind=method function name=addith
<                     (formals: 
<                       (decl->formal self[161]
<                         (varmode=false)
<                         (type->kind=ident: abslist[161]))
<                       (decl->formal index[161]
<                         (varmode=false)
<                         (type->kind=ident: integer[161]))
<                       (decl->formal o[161]
<                         (varmode=false)
<                         (type->kind=ident: hasequals[161])))
<                     (type->kind=ident: boolean[161]))
<                   implemented-by: addith[161]))
<               (decl->((type->kind=method function name=getith
<                     (formals: 
<                       (decl->formal self[162]
<                         (varmode=false)
<                         (type->kind=ident: abslist[162]))
<                       (decl->formal index[162]
<                         (varmode=false)
<                         (type->kind=ident: integer[162])))
<                     (type->kind=ident: hasequals[162]))
<                   implemented-by: getith[162]))
<               (decl->((type->kind=method function name=removeith
<                     (formals: 
<                       (decl->formal self[163]
<                         (varmode=false)
<                         (type->kind=ident: abslist[163]))
<                       (decl->formal index[163]
<                         (varmode=false)
<                         (type->kind=ident: integer[163])))
<                     (type->kind=ident: boolean[163]))
<                   implemented-by: removeith[163]))
<               (decl->((type->kind=method function name=setith
<                     (formals: 
<                       (decl->formal self[164]
<                         (varmode=false)
<                         (type->kind=ident: abslist[164]))
<                       (decl->formal index[164]
<                         (varmode=false)
<                         (type->kind=ident: integer[164]))
<                       (decl->formal o[164]
<                         (varmode=false)
<                         (type->kind=ident: hasequals[164])))
<                     (type->kind=ident: hasequals[164]))
<                   implemented-by: setith[164]))
<               (decl->((type->kind=method function name=indexof
<                     (formals: 
<                       (decl->formal self[166]
<                         (varmode=false)
<                         (type->kind=ident: abslist[166]))
<                       (decl->formal o[166]
<                         (varmode=false)
<                         (type->kind=ident: hasequals[166])))
<                     (type->kind=ident: integer[166]))
<                   implemented-by: indexof[166]))
<               (decl->((type->kind=method function name=lastindexof
<                     (formals: 
<                       (decl->formal self[167]
<                         (varmode=false)
<                         (type->kind=ident: abslist[167]))
<                       (decl->formal o[167]
<                         (varmode=false)
<                         (type->kind=ident: hasequals[167])))
<                     (type->kind=ident: integer[167]))
<                   implemented-by: lastindexof[167]))
<               (decl->((type->kind=method function name=getlistiterator
<                     (formals: 
<                       (decl->formal self[169]
<                         (varmode=false)
<                         (type->kind=ident: abslist[169])))
<                     (type->kind=ident: listiterator[169]))
<                   implemented-by: getlistiterator[169]))
<               (decl->((type->kind=method function name=getlistiteratorith
<                     (formals: 
<                       (decl->formal self[170]
<                         (varmode=false)
<                         (type->kind=ident: abslist[170]))
<                       (decl->formal index[170]
<                         (varmode=false)
<                         (type->kind=ident: integer[170])))
<                     (type->kind=ident: listiterator[170]))
<                   implemented-by: getlistiteratorith[170]))
<               (decl->((type->kind=method function name=removerange
<                     (formals: 
<                       (decl->formal self[172]
<                         (varmode=false)
<                         (type->kind=ident: abslist[172]))
<                       (decl->formal fromindex[172]
<                         (varmode=false)
<                         (type->kind=ident: integer[172]))
<                       (decl->formal toindex[172]
<                         (varmode=false)
<                         (type->kind=ident: integer[172])))
<                     (type->kind=ident: boolean[172]))
<                   implemented-by: removerange[172]))
<               (decl->((type->kind=method function name=addallith
<                     (formals: 
<                       (decl->formal self[173]
<                         (varmode=false)
<                         (type->kind=ident: abslist[173]))
<                       (decl->formal index[173]
<                         (varmode=false)
<                         (type->kind=ident: integer[173]))
<                       (decl->formal other[173]
<                         (varmode=false)
<                         (type->kind=ident: collection[173])))
<                     (type->kind=ident: boolean[173]))
<                   implemented-by: addallith[173])))
<             (overrides: 
<               (add[175] aladd[175])
<               (clear[176] alclear[176])
<               (equals[177] alequals[177])
<               (getiterator[178] algetiterator[178])))))
<       (decl->type: alitr[181]
<         (type->kind=pointer:
<           (type->kind=object: name=alitr
<             (extends: (type->kind=ident: iterator[181]))
<             (abstract: false)
<             (fields: 
<               (decl->field: cursor[182]
<                 (type->kind=ident: integer[182]))
<               (decl->field: lastret[183]
<                 (type->kind=ident: integer[183]))
<               (decl->field: thelist[184]
<                 (type->kind=ident: abslist[184])))
<             (methods: 
<               (decl->((type->kind=method function name=init
<                     (formals: 
<                       (decl->formal self[186]
<                         (varmode=false)
<                         (type->kind=ident: alitr[186]))
<                       (decl->formal lst[186]
<                         (varmode=false)
<                         (type->kind=ident: abslist[186])))
<                     (type->kind=ident: alitr[186]))
<                   implemented-by: init[186])))
<             (overrides: 
<               (hasnext[188] alihasnext[188])
<               (next[189] alinext[189])
<               (remove[190] aliremove[190])))))
<       (decl->type: allstitr[193]
<         (type->kind=pointer:
<           (type->kind=object: name=allstitr
<             (extends: (type->kind=ident: listiterator[193]))
<             (abstract: false)
<             (fields: 
<               (decl->field: cursor[194]
<                 (type->kind=ident: integer[194]))
<               (decl->field: lastret[195]
<                 (type->kind=ident: integer[195]))
<               (decl->field: thelist[196]
<                 (type->kind=ident: abslist[196])))
<             (methods: 
<               (decl->((type->kind=method function name=init
<                     (formals: 
<                       (decl->formal self[198]
<                         (varmode=false)
<                         (type->kind=ident: allstitr[198]))
<                       (decl->formal index[198]
<                         (varmode=false)
<                         (type->kind=ident: integer[198]))
<                       (decl->formal lst[198]
<                         (varmode=false)
<                         (type->kind=ident: abslist[198])))
<                     (type->kind=ident: allstitr[198]))
<                   implemented-by: init[198])))
<             (overrides: 
<               (hasnext[200] allihasnext[200])
<               (next[201] allinext[201])
<               (nextindex[202] allinextindex[202])
<               (hasprevious[203] allihasprevious[203])
<               (previous[204] alliprevious[204])
<               (previousindex[205] allipreviousindex[205])
<               (set[206] alliset[206])
<               (add[207] alliadd[207])
<               (remove[208] alliremove[208])))))
<       (decl->function: aladd[211]
<         (formals: 
<           (decl->formal self[211]
<             (varmode=false)
<             (type->kind=ident: abslist[211]))
<           (decl->formal o[211]
<             (varmode=false)
<             (type->kind=ident: hasequals[211])))
<         (type->kind=ident: boolean[211])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: aladd[213])
<               (expr-> call: isMethodCall=true addith[213]
<                 (exprs: 
<                   (expr-> binding: self[213])
<                   (expr-> binexp: .
<                     (expr-> binding: self[213])
<                     (expr-> id: size))
<                   (expr-> binding: o[213]))))
<             (stmt->emptystmt:))))
<       (decl->function: alindexof[216]
<         (formals: 
<           (decl->formal self[216]
<             (varmode=false)
<             (type->kind=ident: abslist[216]))
<           (decl->formal o[216]
<             (varmode=false)
<             (type->kind=ident: hasequals[216])))
<         (type->kind=ident: integer[216])
<         (block: 
<           (decls: 
<             (decl->variable: it[218]
<               (type->kind=ident: listiterator[218]))
<             (decl->variable: searching[219]
<               (type->kind=ident: boolean[219])))
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: it[221])
<               (expr-> binexp: .
<                 (expr-> binding: self[221])
<                 (expr-> id: getlistiterator)))
<             (stmt->assignstmt:
<               (expr-> binding: alindexof[222])
<               (expr-> unexp: -
<                 (expr->[value=1] int: 1
<                   type->(type->kind=integer))))
<             (stmt->assignstmt:
<               (expr-> binding: searching[223])
<               (expr-> binding: true[223]))
<             (stmt->whilestmt:
<               (expr-> binding: searching[224])
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->ifstmt: 
<                     (expr-> binexp: .
<                       (expr-> binding: it[225])
<                       (expr-> id: hasnext))
<                     (stmt->compoundstmt:
<                       (stmts: 
<                         (stmt->ifstmt: 
<                           (expr-> call: isMethodCall=true equals[226]
<                             (exprs: 
<                               (expr-> binding: o[226])
<                               (expr-> binexp: .
<                                 (expr-> binding: it[226])
<                                 (expr-> id: next))))
<                           (stmt->compoundstmt:
<                             (stmts: 
<                               (stmt->assignstmt:
<                                 (expr-> binding: alindexof[227])
<                                 (expr-> binexp: .
<                                   (expr-> binding: it[227])
<                                   (expr-> id: previousindex)))
<                               (stmt->assignstmt:
<                                 (expr-> binding: searching[228])
<                                 (expr-> binding: false[228]))
<                               (stmt->emptystmt:))))
<                         (stmt->emptystmt:)))
<                     (else: 
<                       (stmt->compoundstmt:
<                         (stmts: 
<                           (stmt->assignstmt:
<                             (expr-> binding: searching[231])
<                             (expr-> binding: false[231]))
<                           (stmt->emptystmt:)))))
<                   (stmt->emptystmt:))))
<             (stmt->emptystmt:))))
<       (decl->function: allastindexof[236]
<         (formals: 
<           (decl->formal self[236]
<             (varmode=false)
<             (type->kind=ident: abslist[236]))
<           (decl->formal o[236]
<             (varmode=false)
<             (type->kind=ident: hasequals[236])))
<         (type->kind=ident: integer[236])
<         (block: 
<           (decls: 
<             (decl->variable: it[238]
<               (type->kind=ident: listiterator[238]))
<             (decl->variable: searching[239]
<               (type->kind=ident: boolean[239])))
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: it[241])
<               (expr-> call: isMethodCall=true getlistiteratorith[241]
<                 (exprs: 
<                   (expr-> binding: self[241])
<                   (expr-> binexp: .
<                     (expr-> binding: self[241])
<                     (expr-> id: size)))))
<             (stmt->assignstmt:
<               (expr-> binding: allastindexof[242])
<               (expr-> unexp: -
<                 (expr->[value=1] int: 1
<                   type->(type->kind=integer))))
<             (stmt->assignstmt:
<               (expr-> binding: searching[243])
<               (expr-> binding: true[243]))
<             (stmt->whilestmt:
<               (expr-> binding: searching[244])
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->ifstmt: 
<                     (expr-> binexp: .
<                       (expr-> binding: it[245])
<                       (expr-> id: hasprevious))
<                     (stmt->compoundstmt:
<                       (stmts: 
<                         (stmt->ifstmt: 
<                           (expr-> call: isMethodCall=true equals[246]
<                             (exprs: 
<                               (expr-> binding: o[246])
<                               (expr-> binexp: .
<                                 (expr-> binding: it[246])
<                                 (expr-> id: previous))))
<                           (stmt->compoundstmt:
<                             (stmts: 
<                               (stmt->assignstmt:
<                                 (expr-> binding: allastindexof[247])
<                                 (expr-> binexp: .
<                                   (expr-> binding: it[247])
<                                   (expr-> id: nextindex)))
<                               (stmt->assignstmt:
<                                 (expr-> binding: searching[248])
<                                 (expr-> binding: false[248]))
<                               (stmt->emptystmt:))))
<                         (stmt->emptystmt:)))
<                     (else: 
<                       (stmt->compoundstmt:
<                         (stmts: 
<                           (stmt->assignstmt:
<                             (expr-> binding: searching[251])
<                             (expr-> binding: false[251]))
<                           (stmt->emptystmt:)))))
<                   (stmt->emptystmt:))))
<             (stmt->emptystmt:))))
<       (decl->procedure: alclear[256]
<         (formals: 
<           (decl->formal self[256]
<             (varmode=false)
<             (type->kind=ident: abslist[256])))
<         (block: 
<           (decls: 
<             (decl->variable: b[257]
<               (type->kind=ident: boolean[257])))
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: b[259])
<               (expr-> call: isMethodCall=true removerange[259]
<                 (exprs: 
<                   (expr-> binding: self[259])
<                   (expr->[value=0] int: 0
<                     type->(type->kind=integer))
<                   (expr-> binexp: .
<                     (expr-> binding: self[259])
<                     (expr-> id: size)))))
<             (stmt->emptystmt:))))
<       (decl->function: aladdallith[262]
<         (formals: 
<           (decl->formal self[262]
<             (varmode=false)
<             (type->kind=ident: abslist[262]))
<           (decl->formal index[262]
<             (varmode=false)
<             (type->kind=ident: integer[262]))
<           (decl->formal other[262]
<             (varmode=false)
<             (type->kind=ident: collection[262])))
<         (type->kind=ident: boolean[262])
<         (block: 
<           (decls: 
<             (decl->variable: it[264]
<               (type->kind=ident: iterator[264]))
<             (decl->variable: b[265]
<               (type->kind=ident: boolean[265])))
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: aladdallith[267])
<               (expr-> binding: false[267]))
<             (stmt->ifstmt: 
<               (expr-> binexp: and
<                 (expr-> binexp: >=
<                   (expr-> binding: index[268])
<                   (expr->[value=0] int: 0
<                     type->(type->kind=integer)))
<                 (expr-> binexp: <=
<                   (expr-> binding: index[268])
<                   (expr-> binexp: .
<                     (expr-> binding: self[268])
<                     (expr-> id: size))))
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->assignstmt:
<                     (expr-> binding: it[269])
<                     (expr-> binexp: .
<                       (expr-> binding: other[269])
<                       (expr-> id: getiterator)))
<                   (stmt->whilestmt:
<                     (expr-> binexp: .
<                       (expr-> binding: it[270])
<                       (expr-> id: hasnext))
<                     (stmt->compoundstmt:
<                       (stmts: 
<                         (stmt->assignstmt:
<                           (expr-> binding: b[271])
<                           (expr-> call: isMethodCall=true addith[271]
<                             (exprs: 
<                               (expr-> binding: self[271])
<                               (expr-> binding: index[271])
<                               (expr-> call: isMethodCall=false narrow[271]
<                                 (exprs: 
<                                   (expr-> binexp: .
<                                     (expr-> binding: it[271])
<                                     (expr-> id: next))
<                                   (expr-> binding: hasequals[271]))))))
<                         (stmt->assignstmt:
<                           (expr-> binding: index[272])
<                           (expr-> binexp: +
<                             (expr-> binding: index[272])
<                             (expr->[value=1] int: 1
<                               type->(type->kind=integer))))
<                         (stmt->assignstmt:
<                           (expr-> binding: aladdallith[273])
<                           (expr-> binding: true[273]))
<                         (stmt->emptystmt:))))
<                   (stmt->emptystmt:))))
<             (stmt->emptystmt:))))
<       (decl->function: algetiterator[278]
<         (formals: 
<           (decl->formal self[278]
<             (varmode=false)
<             (type->kind=ident: abslist[278])))
<         (type->kind=ident: iterator[278])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: algetiterator[280])
<               (expr-> call: isMethodCall=true init[280]
<                 (exprs: 
<                   (expr-> call: isMethodCall=false new[280]
<                     (exprs: 
<                       (expr-> binding: alitr[280])))
<                   (expr-> binding: self[280]))))
<             (stmt->emptystmt:))))
<       (decl->function: algetlistiterator[283]
<         (formals: 
<           (decl->formal self[283]
<             (varmode=false)
<             (type->kind=ident: abslist[283])))
<         (type->kind=ident: listiterator[283])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: algetlistiterator[285])
<               (expr-> call: isMethodCall=true getlistiteratorith[285]
<                 (exprs: 
<                   (expr-> binding: self[285])
<                   (expr->[value=0] int: 0
<                     type->(type->kind=integer)))))
<             (stmt->emptystmt:))))
<       (decl->function: algetlistiteratorith[288]
<         (formals: 
<           (decl->formal self[288]
<             (varmode=false)
<             (type->kind=ident: abslist[288]))
<           (decl->formal index[288]
<             (varmode=false)
<             (type->kind=ident: integer[288])))
<         (type->kind=ident: listiterator[288])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: algetlistiteratorith[290])
<               (expr-> call: isMethodCall=true init[290]
<                 (exprs: 
<                   (expr-> call: isMethodCall=false new[290]
<                     (exprs: 
<                       (expr-> binding: allstitr[290])))
<                   (expr-> binding: index[290])
<                   (expr-> binding: self[290]))))
<             (stmt->emptystmt:))))
<       (decl->function: alremoverange[293]
<         (formals: 
<           (decl->formal self[293]
<             (varmode=false)
<             (type->kind=ident: abslist[293]))
<           (decl->formal fromindex[293]
<             (varmode=false)
<             (type->kind=ident: integer[293]))
<           (decl->formal toindex[293]
<             (varmode=false)
<             (type->kind=ident: integer[293])))
<         (type->kind=ident: boolean[293])
<         (block: 
<           (decls: 
<             (decl->variable: it[295]
<               (type->kind=ident: listiterator[295]))
<             (decl->variable: i[296]
<               (type->kind=ident: integer[296]))
<             (decl->variable: o[297]
<               (type->kind=ident: root[297])))
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: it[299])
<               (expr-> call: isMethodCall=true getlistiteratorith[299]
<                 (exprs: 
<                   (expr-> binding: self[299])
<                   (expr-> binding: fromindex[299]))))
<             (stmt->forstmt:i[300]
<               (expr->[value=0] int: 0
<                 type->(type->kind=integer))
<               (expr-> binexp: -
<                 (expr-> binexp: -
<                   (expr-> binding: toindex[300])
<                   (expr-> binding: fromindex[300]))
<                 (expr->[value=1] int: 1
<                   type->(type->kind=integer)))
<               (upward:true)
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->assignstmt:
<                     (expr-> binding: o[301])
<                     (expr-> binexp: .
<                       (expr-> binding: it[301])
<                       (expr-> id: next)))
<                   (stmt->callstmt:
<                     (expr-> binexp: .
<                       (expr-> binding: it[302])
<                       (expr-> id: remove)))
<                   (stmt->emptystmt:))))
<             (stmt->emptystmt:))))
<       (decl->function: alequals[306]
<         (formals: 
<           (decl->formal self[306]
<             (varmode=false)
<             (type->kind=ident: abslist[306]))
<           (decl->formal other[306]
<             (varmode=false)
<             (type->kind=ident: collection[306])))
<         (type->kind=ident: boolean[306])
<         (block: 
<           (decls: 
<             (decl->variable: it1[308]
<               (type->kind=ident: iterator[308]))
<             (decl->variable: it2[308]
<               (type->kind=ident: iterator[308]))
<             (decl->variable: searching[309]
<               (type->kind=ident: boolean[309]))
<             (decl->variable: o1[310]
<               (type->kind=ident: hasequals[310]))
<             (decl->variable: o2[310]
<               (type->kind=ident: hasequals[310])))
<           (stmts: 
<             (stmt->ifstmt: 
<               (expr-> binexp: =
<                 (expr-> binding: self[312])
<                 (expr-> binding: other[312]))
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->assignstmt:
<                     (expr-> binding: alequals[313])
<                     (expr-> binding: true[313]))
<                   (stmt->emptystmt:)))
<               (else: 
<                 (stmt->ifstmt: 
<                   (expr-> unexp: not
<                     (expr-> call: isMethodCall=false istype[314]
<                       (exprs: 
<                         (expr-> binding: other[314])
<                         (expr-> binding: abslist[314]))))
<                   (stmt->compoundstmt:
<                     (stmts: 
<                       (stmt->assignstmt:
<                         (expr-> binding: alequals[315])
<                         (expr-> binding: false[315]))
<                       (stmt->emptystmt:)))
<                   (else: 
<                     (stmt->compoundstmt:
<                       (stmts: 
<                         (stmt->assignstmt:
<                           (expr-> binding: it1[317])
<                           (expr-> binexp: .
<                             (expr-> binding: self[317])
<                             (expr-> id: getiterator)))
<                         (stmt->assignstmt:
<                           (expr-> binding: it2[318])
<                           (expr-> binexp: .
<                             (expr-> binding: other[318])
<                             (expr-> id: getiterator)))
<                         (stmt->assignstmt:
<                           (expr-> binding: searching[319])
<                           (expr-> binding: true[319]))
<                         (stmt->assignstmt:
<                           (expr-> binding: alequals[320])
<                           (expr-> binding: true[320]))
<                         (stmt->whilestmt:
<                           (expr-> binding: searching[321])
<                           (stmt->compoundstmt:
<                             (stmts: 
<                               (stmt->ifstmt: 
<                                 (expr-> binexp: and
<                                   (expr-> binexp: .
<                                     (expr-> binding: it1[322])
<                                     (expr-> id: hasnext))
<                                   (expr-> binexp: .
<                                     (expr-> binding: it2[322])
<                                     (expr-> id: hasnext)))
<                                 (stmt->compoundstmt:
<                                   (stmts: 
<                                     (stmt->assignstmt:
<                                       (expr-> binding: o1[323])
<                                       (expr-> call: isMethodCall=false narrow[323]
<                                         (exprs: 
<                                           (expr-> binexp: .
<                                             (expr-> binding: it1[323])
<                                             (expr-> id: next))
<                                           (expr-> binding: hasequals[323]))))
<                                     (stmt->assignstmt:
<                                       (expr-> binding: o2[324])
<                                       (expr-> call: isMethodCall=false narrow[324]
<                                         (exprs: 
<                                           (expr-> binexp: .
<                                             (expr-> binding: it2[324])
<                                             (expr-> id: next))
<                                           (expr-> binding: hasequals[324]))))
<                                     (stmt->ifstmt: 
<                                       (expr-> unexp: not
<                                         (expr-> call: isMethodCall=true equals[325]
<                                           (exprs: 
<                                             (expr-> binding: o1[325])
<                                             (expr-> binding: o2[325]))))
<                                       (stmt->compoundstmt:
<                                         (stmts: 
<                                           (stmt->assignstmt:
<                                             (expr-> binding: alequals[326])
<                                             (expr-> binding: false[326]))
<                                           (stmt->assignstmt:
<                                             (expr-> binding: searching[327])
<                                             (expr-> binding: false[327]))
<                                           (stmt->emptystmt:))))
<                                     (stmt->emptystmt:)))
<                                 (else: 
<                                   (stmt->compoundstmt:
<                                     (stmts: 
<                                       (stmt->assignstmt:
<                                         (expr-> binding: searching[330])
<                                         (expr-> binding: false[330]))
<                                       (stmt->emptystmt:)))))
<                               (stmt->emptystmt:))))
<                         (stmt->ifstmt: 
<                           (expr-> binexp: or
<                             (expr-> binexp: .
<                               (expr-> binding: it1[333])
<                               (expr-> id: hasnext))
<                             (expr-> binexp: .
<                               (expr-> binding: it2[333])
<                               (expr-> id: hasnext)))
<                           (stmt->compoundstmt:
<                             (stmts: 
<                               (stmt->assignstmt:
<                                 (expr-> binding: alequals[334])
<                                 (expr-> binding: false[334]))
<                               (stmt->emptystmt:))))
<                         (stmt->emptystmt:)))))))
<             (stmt->emptystmt:))))
<       (decl->function: aliinit[340]
<         (formals: 
<           (decl->formal self[340]
<             (varmode=false)
<             (type->kind=ident: alitr[340]))
<           (decl->formal lst[340]
<             (varmode=false)
<             (type->kind=ident: abslist[340])))
<         (type->kind=ident: alitr[340])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binexp: .
<                 (expr-> binding: self[342])
<                 (expr-> id: cursor))
<               (expr->[value=0] int: 0
<                 type->(type->kind=integer)))
<             (stmt->assignstmt:
<               (expr-> binexp: .
<                 (expr-> binding: self[343])
<                 (expr-> id: lastret))
<               (expr-> unexp: -
<                 (expr->[value=1] int: 1
<                   type->(type->kind=integer))))
<             (stmt->assignstmt:
<               (expr-> binexp: .
<                 (expr-> binding: self[344])
<                 (expr-> id: thelist))
<               (expr-> binding: lst[344]))
<             (stmt->assignstmt:
<               (expr-> binding: aliinit[345])
<               (expr-> binding: self[345]))
<             (stmt->emptystmt:))))
<       (decl->function: alihasnext[348]
<         (formals: 
<           (decl->formal self[348]
<             (varmode=false)
<             (type->kind=ident: alitr[348])))
<         (type->kind=ident: boolean[348])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: alihasnext[350])
<               (expr-> binexp: <>
<                 (expr-> binexp: .
<                   (expr-> binding: self[350])
<                   (expr-> id: cursor))
<                 (expr-> binexp: .
<                   (expr-> binexp: .
<                     (expr-> binding: self[350])
<                     (expr-> id: thelist))
<                   (expr-> id: size))))
<             (stmt->emptystmt:))))
<       (decl->function: alinext[353]
<         (formals: 
<           (decl->formal self[353]
<             (varmode=false)
<             (type->kind=ident: alitr[353])))
<         (type->kind=ident: root[353])
<         (block: 
<           (stmts: 
<             (stmt->ifstmt: 
<               (expr-> binexp: >=
<                 (expr-> binexp: .
<                   (expr-> binding: self[355])
<                   (expr-> id: cursor))
<                 (expr-> binexp: .
<                   (expr-> binexp: .
<                     (expr-> binding: self[355])
<                     (expr-> id: thelist))
<                   (expr-> id: size)))
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->assignstmt:
<                     (expr-> binding: alinext[356])
<                     (expr->[value=0] nil:
<                       type->(type->kind=<NIL>)))
<                   (stmt->emptystmt:)))
<               (else: 
<                 (stmt->compoundstmt:
<                   (stmts: 
<                     (stmt->assignstmt:
<                       (expr-> binding: alinext[358])
<                       (expr-> call: isMethodCall=true getith[358]
<                         (exprs: 
<                           (expr-> binexp: .
<                             (expr-> binding: self[358])
<                             (expr-> id: thelist))
<                           (expr-> binexp: .
<                             (expr-> binding: self[358])
<                             (expr-> id: cursor)))))
<                     (stmt->assignstmt:
<                       (expr-> binexp: .
<                         (expr-> binding: self[359])
<                         (expr-> id: lastret))
<                       (expr-> binexp: .
<                         (expr-> binding: self[359])
<                         (expr-> id: cursor)))
<                     (stmt->assignstmt:
<                       (expr-> binexp: .
<                         (expr-> binding: self[360])
<                         (expr-> id: cursor))
<                       (expr-> binexp: +
<                         (expr-> binexp: .
<                           (expr-> binding: self[360])
<                           (expr-> id: cursor))
<                         (expr->[value=1] int: 1
<                           type->(type->kind=integer))))
<                     (stmt->emptystmt:)))))
<             (stmt->emptystmt:))))
<       (decl->procedure: aliremove[364]
<         (formals: 
<           (decl->formal self[364]
<             (varmode=false)
<             (type->kind=ident: alitr[364])))
<         (block: 
<           (decls: 
<             (decl->variable: b[365]
<               (type->kind=ident: boolean[365])))
<           (stmts: 
<             (stmt->ifstmt: 
<               (expr-> binexp: >=
<                 (expr-> binexp: .
<                   (expr-> binding: self[367])
<                   (expr-> id: lastret))
<                 (expr->[value=0] int: 0
<                   type->(type->kind=integer)))
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->assignstmt:
<                     (expr-> binding: b[368])
<                     (expr-> call: isMethodCall=true removeith[368]
<                       (exprs: 
<                         (expr-> binexp: .
<                           (expr-> binding: self[368])
<                           (expr-> id: thelist))
<                         (expr-> binexp: .
<                           (expr-> binding: self[368])
<                           (expr-> id: lastret)))))
<                   (stmt->ifstmt: 
<                     (expr-> binexp: <
<                       (expr-> binexp: .
<                         (expr-> binding: self[369])
<                         (expr-> id: lastret))
<                       (expr-> binexp: .
<                         (expr-> binding: self[369])
<                         (expr-> id: cursor)))
<                     (stmt->compoundstmt:
<                       (stmts: 
<                         (stmt->assignstmt:
<                           (expr-> binexp: .
<                             (expr-> binding: self[370])
<                             (expr-> id: cursor))
<                           (expr-> binexp: -
<                             (expr-> binexp: .
<                               (expr-> binding: self[370])
<                               (expr-> id: cursor))
<                             (expr->[value=1] int: 1
<                               type->(type->kind=integer))))
<                         (stmt->emptystmt:))))
<                   (stmt->assignstmt:
<                     (expr-> binexp: .
<                       (expr-> binding: self[372])
<                       (expr-> id: lastret))
<                     (expr-> unexp: -
<                       (expr->[value=1] int: 1
<                         type->(type->kind=integer))))
<                   (stmt->emptystmt:))))
<             (stmt->emptystmt:))))
<       (decl->function: alliinit[377]
<         (formals: 
<           (decl->formal self[377]
<             (varmode=false)
<             (type->kind=ident: allstitr[377]))
<           (decl->formal index[377]
<             (varmode=false)
<             (type->kind=ident: integer[377]))
<           (decl->formal lst[377]
<             (varmode=false)
<             (type->kind=ident: abslist[377])))
<         (type->kind=ident: allstitr[377])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binexp: .
<                 (expr-> binding: self[379])
<                 (expr-> id: cursor))
<               (expr-> binding: index[379]))
<             (stmt->assignstmt:
<               (expr-> binexp: .
<                 (expr-> binding: self[380])
<                 (expr-> id: lastret))
<               (expr-> unexp: -
<                 (expr->[value=1] int: 1
<                   type->(type->kind=integer))))
<             (stmt->assignstmt:
<               (expr-> binexp: .
<                 (expr-> binding: self[381])
<                 (expr-> id: thelist))
<               (expr-> binding: lst[381]))
<             (stmt->assignstmt:
<               (expr-> binding: alliinit[382])
<               (expr-> binding: self[382]))
<             (stmt->emptystmt:))))
<       (decl->function: allihasnext[385]
<         (formals: 
<           (decl->formal self[385]
<             (varmode=false)
<             (type->kind=ident: allstitr[385])))
<         (type->kind=ident: boolean[385])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: allihasnext[387])
<               (expr-> binexp: <>
<                 (expr-> binexp: .
<                   (expr-> binding: self[387])
<                   (expr-> id: cursor))
<                 (expr-> binexp: .
<                   (expr-> binexp: .
<                     (expr-> binding: self[387])
<                     (expr-> id: thelist))
<                   (expr-> id: size))))
<             (stmt->emptystmt:))))
<       (decl->function: allinext[390]
<         (formals: 
<           (decl->formal self[390]
<             (varmode=false)
<             (type->kind=ident: allstitr[390])))
<         (type->kind=ident: root[390])
<         (block: 
<           (stmts: 
<             (stmt->ifstmt: 
<               (expr-> binexp: >=
<                 (expr-> binexp: .
<                   (expr-> binding: self[392])
<                   (expr-> id: cursor))
<                 (expr-> binexp: .
<                   (expr-> binexp: .
<                     (expr-> binding: self[392])
<                     (expr-> id: thelist))
<                   (expr-> id: size)))
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->assignstmt:
<                     (expr-> binding: allinext[393])
<                     (expr->[value=0] nil:
<                       type->(type->kind=<NIL>)))
<                   (stmt->emptystmt:)))
<               (else: 
<                 (stmt->compoundstmt:
<                   (stmts: 
<                     (stmt->assignstmt:
<                       (expr-> binding: allinext[395])
<                       (expr-> call: isMethodCall=true getith[395]
<                         (exprs: 
<                           (expr-> binexp: .
<                             (expr-> binding: self[395])
<                             (expr-> id: thelist))
<                           (expr-> binexp: .
<                             (expr-> binding: self[395])
<                             (expr-> id: cursor)))))
<                     (stmt->assignstmt:
<                       (expr-> binexp: .
<                         (expr-> binding: self[396])
<                         (expr-> id: lastret))
<                       (expr-> binexp: .
<                         (expr-> binding: self[396])
<                         (expr-> id: cursor)))
<                     (stmt->assignstmt:
<                       (expr-> binexp: .
<                         (expr-> binding: self[397])
<                         (expr-> id: cursor))
<                       (expr-> binexp: +
<                         (expr-> binexp: .
<                           (expr-> binding: self[397])
<                           (expr-> id: cursor))
<                         (expr->[value=1] int: 1
<                           type->(type->kind=integer))))
<                     (stmt->emptystmt:)))))
<             (stmt->emptystmt:))))
<       (decl->function: allinextindex[401]
<         (formals: 
<           (decl->formal self[401]
<             (varmode=false)
<             (type->kind=ident: allstitr[401])))
<         (type->kind=ident: integer[401])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: allinextindex[403])
<               (expr-> binexp: .
<                 (expr-> binding: self[403])
<                 (expr-> id: cursor)))
<             (stmt->emptystmt:))))
<       (decl->function: allihasprevious[406]
<         (formals: 
<           (decl->formal self[406]
<             (varmode=false)
<             (type->kind=ident: allstitr[406])))
<         (type->kind=ident: boolean[406])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: allihasprevious[408])
<               (expr-> binexp: <>
<                 (expr-> binexp: .
<                   (expr-> binding: self[408])
<                   (expr-> id: cursor))
<                 (expr->[value=0] int: 0
<                   type->(type->kind=integer))))
<             (stmt->emptystmt:))))
<       (decl->function: alliprevious[411]
<         (formals: 
<           (decl->formal self[411]
<             (varmode=false)
<             (type->kind=ident: allstitr[411])))
<         (type->kind=ident: root[411])
<         (block: 
<           (stmts: 
<             (stmt->ifstmt: 
<               (expr-> binexp: <=
<                 (expr-> binexp: .
<                   (expr-> binding: self[413])
<                   (expr-> id: cursor))
<                 (expr->[value=0] int: 0
<                   type->(type->kind=integer)))
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->assignstmt:
<                     (expr-> binding: alliprevious[414])
<                     (expr->[value=0] nil:
<                       type->(type->kind=<NIL>)))
<                   (stmt->emptystmt:)))
<               (else: 
<                 (stmt->compoundstmt:
<                   (stmts: 
<                     (stmt->assignstmt:
<                       (expr-> binexp: .
<                         (expr-> binding: self[416])
<                         (expr-> id: cursor))
<                       (expr-> binexp: -
<                         (expr-> binexp: .
<                           (expr-> binding: self[416])
<                           (expr-> id: cursor))
<                         (expr->[value=1] int: 1
<                           type->(type->kind=integer))))
<                     (stmt->assignstmt:
<                       (expr-> binexp: .
<                         (expr-> binding: self[417])
<                         (expr-> id: lastret))
<                       (expr-> binexp: .
<                         (expr-> binding: self[417])
<                         (expr-> id: cursor)))
<                     (stmt->assignstmt:
<                       (expr-> binding: alliprevious[418])
<                       (expr-> call: isMethodCall=true getith[418]
<                         (exprs: 
<                           (expr-> binexp: .
<                             (expr-> binding: self[418])
<                             (expr-> id: thelist))
<                           (expr-> binexp: .
<                             (expr-> binding: self[418])
<                             (expr-> id: cursor)))))
<                     (stmt->emptystmt:)))))
<             (stmt->emptystmt:))))
<       (decl->function: allipreviousindex[422]
<         (formals: 
<           (decl->formal self[422]
<             (varmode=false)
<             (type->kind=ident: allstitr[422])))
<         (type->kind=ident: integer[422])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: allipreviousindex[424])
<               (expr-> binexp: -
<                 (expr-> binexp: .
<                   (expr-> binding: self[424])
<                   (expr-> id: cursor))
<                 (expr->[value=1] int: 1
<                   type->(type->kind=integer))))
<             (stmt->emptystmt:))))
<       (decl->procedure: alliset[427]
<         (formals: 
<           (decl->formal self[427]
<             (varmode=false)
<             (type->kind=ident: allstitr[427]))
<           (decl->formal o[427]
<             (varmode=false)
<             (type->kind=ident: hasequals[427])))
<         (block: 
<           (decls: 
<             (decl->variable: oo[428]
<               (type->kind=ident: hasequals[428])))
<           (stmts: 
<             (stmt->ifstmt: 
<               (expr-> binexp: >=
<                 (expr-> binexp: .
<                   (expr-> binding: self[430])
<                   (expr-> id: lastret))
<                 (expr->[value=0] int: 0
<                   type->(type->kind=integer)))
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->assignstmt:
<                     (expr-> binding: oo[431])
<                     (expr-> call: isMethodCall=true setith[431]
<                       (exprs: 
<                         (expr-> binexp: .
<                           (expr-> binding: self[431])
<                           (expr-> id: thelist))
<                         (expr-> binexp: .
<                           (expr-> binding: self[431])
<                           (expr-> id: lastret))
<                         (expr-> binding: o[431]))))
<                   (stmt->emptystmt:))))
<             (stmt->emptystmt:))))
<       (decl->procedure: alliadd[435]
<         (formals: 
<           (decl->formal self[435]
<             (varmode=false)
<             (type->kind=ident: allstitr[435]))
<           (decl->formal o[435]
<             (varmode=false)
<             (type->kind=ident: hasequals[435])))
<         (block: 
<           (decls: 
<             (decl->variable: b[436]
<               (type->kind=ident: boolean[436])))
<           (stmts: 
<             (stmt->ifstmt: 
<               (expr-> binexp: and
<                 (expr-> binexp: >=
<                   (expr-> binexp: .
<                     (expr-> binding: self[438])
<                     (expr-> id: cursor))
<                   (expr->[value=0] int: 0
<                     type->(type->kind=integer)))
<                 (expr-> binexp: <=
<                   (expr-> binexp: .
<                     (expr-> binding: self[438])
<                     (expr-> id: cursor))
<                   (expr-> binexp: .
<                     (expr-> binexp: .
<                       (expr-> binding: self[438])
<                       (expr-> id: thelist))
<                     (expr-> id: size))))
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->assignstmt:
<                     (expr-> binding: b[439])
<                     (expr-> call: isMethodCall=true addith[439]
<                       (exprs: 
<                         (expr-> binexp: .
<                           (expr-> binding: self[439])
<                           (expr-> id: thelist))
<                         (expr-> binexp: .
<                           (expr-> binding: self[439])
<                           (expr-> id: cursor))
<                         (expr-> binding: o[439]))))
<                   (stmt->assignstmt:
<                     (expr-> binexp: .
<                       (expr-> binding: self[440])
<                       (expr-> id: lastret))
<                     (expr-> unexp: -
<                       (expr->[value=1] int: 1
<                         type->(type->kind=integer))))
<                   (stmt->assignstmt:
<                     (expr-> binexp: .
<                       (expr-> binding: self[441])
<                       (expr-> id: cursor))
<                     (expr-> binexp: +
<                       (expr-> binexp: .
<                         (expr-> binding: self[441])
<                         (expr-> id: cursor))
<                       (expr->[value=1] int: 1
<                         type->(type->kind=integer))))
<                   (stmt->emptystmt:))))
<             (stmt->emptystmt:))))
<       (decl->procedure: alliremove[445]
<         (formals: 
<           (decl->formal self[445]
<             (varmode=false)
<             (type->kind=ident: allstitr[445])))
<         (block: 
<           (decls: 
<             (decl->variable: oo[447]
<               (type->kind=ident: hasequals[447]))
<             (decl->variable: b[448]
<               (type->kind=ident: boolean[448])))
<           (stmts: 
<             (stmt->ifstmt: 
<               (expr-> binexp: >=
<                 (expr-> binexp: .
<                   (expr-> binding: self[450])
<                   (expr-> id: lastret))
<                 (expr->[value=0] int: 0
<                   type->(type->kind=integer)))
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->assignstmt:
<                     (expr-> binding: b[451])
<                     (expr-> call: isMethodCall=true removeith[451]
<                       (exprs: 
<                         (expr-> binexp: .
<                           (expr-> binding: self[451])
<                           (expr-> id: thelist))
<                         (expr-> binexp: .
<                           (expr-> binding: self[451])
<                           (expr-> id: lastret)))))
<                   (stmt->ifstmt: 
<                     (expr-> binexp: <
<                       (expr-> binexp: .
<                         (expr-> binding: self[452])
<                         (expr-> id: lastret))
<                       (expr-> binexp: .
<                         (expr-> binding: self[452])
<                         (expr-> id: cursor)))
<                     (stmt->compoundstmt:
<                       (stmts: 
<                         (stmt->assignstmt:
<                           (expr-> binexp: .
<                             (expr-> binding: self[453])
<                             (expr-> id: cursor))
<                           (expr-> binexp: -
<                             (expr-> binexp: .
<                               (expr-> binding: self[453])
<                               (expr-> id: cursor))
<                             (expr->[value=1] int: 1
<                               type->(type->kind=integer))))
<                         (stmt->emptystmt:))))
<                   (stmt->assignstmt:
<                     (expr-> binexp: .
<                       (expr-> binding: self[455])
<                       (expr-> id: lastret))
<                     (expr-> unexp: -
<                       (expr->[value=1] int: 1
<                         type->(type->kind=integer))))
<                   (stmt->emptystmt:))))
<             (stmt->emptystmt:))))
<       (decl->type: llentry[461]
<         (type->kind=pointer:
<           (type->kind=object: name=llentry
<             (extends: (type->kind=ident: root[6]))
<             (abstract: false)
<             (fields: 
<               (decl->field: element[462]
<                 (type->kind=ident: hasequals[462]))
<               (decl->field: next[463]
<                 (type->kind=ident: llentry[463]))
<               (decl->field: previous[464]
<                 (type->kind=ident: llentry[464])))
<             (methods: 
<               (decl->((type->kind=method function name=init
<                     (formals: 
<                       (decl->formal self[466]
<                         (varmode=false)
<                         (type->kind=ident: llentry[466]))
<                       (decl->formal element[466]
<                         (varmode=false)
<                         (type->kind=ident: hasequals[466]))
<                       (decl->formal next[466]
<                         (varmode=false)
<                         (type->kind=ident: llentry[466]))
<                       (decl->formal previous[466]
<                         (varmode=false)
<                         (type->kind=ident: llentry[466])))
<                     (type->kind=ident: llentry[466]))
<                   implemented-by: init[466]))))))
<       (decl->type: linkedlist[469]
<         (type->kind=pointer:
<           (type->kind=object: name=linkedlist
<             (extends: (type->kind=ident: abslist[469]))
<             (abstract: false)
<             (fields: 
<               (decl->field: header[470]
<                 (type->kind=ident: llentry[470]))
<               (decl->field: mysize[471]
<                 (type->kind=ident: integer[471])))
<             (methods: 
<               (decl->((type->kind=method function name=init
<                     (formals: 
<                       (decl->formal self[473]
<                         (varmode=false)
<                         (type->kind=ident: linkedlist[473])))
<                     (type->kind=ident: linkedlist[473]))
<                   implemented-by: init[473]))
<               (decl->((type->kind=method function name=getfirst
<                     (formals: 
<                       (decl->formal self[474]
<                         (varmode=false)
<                         (type->kind=ident: linkedlist[474])))
<                     (type->kind=ident: hasequals[474]))
<                   implemented-by: getfirst[474]))
<               (decl->((type->kind=method function name=getlast
<                     (formals: 
<                       (decl->formal self[475]
<                         (varmode=false)
<                         (type->kind=ident: linkedlist[475])))
<                     (type->kind=ident: hasequals[475]))
<                   implemented-by: getlast[475]))
<               (decl->((type->kind=method function name=removefirst
<                     (formals: 
<                       (decl->formal self[476]
<                         (varmode=false)
<                         (type->kind=ident: linkedlist[476])))
<                     (type->kind=ident: hasequals[476]))
<                   implemented-by: removefirst[476]))
<               (decl->((type->kind=method function name=removelast
<                     (formals: 
<                       (decl->formal self[477]
<                         (varmode=false)
<                         (type->kind=ident: linkedlist[477])))
<                     (type->kind=ident: hasequals[477]))
<                   implemented-by: removelast[477]))
<               (decl->((type->kind=method function name=removeentry
<                     (formals: 
<                       (decl->formal self[478]
<                         (varmode=false)
<                         (type->kind=ident: linkedlist[478]))
<                       (decl->formal entry[478]
<                         (varmode=false)
<                         (type->kind=ident: llentry[478])))
<                     (type->kind=ident: hasequals[478]))
<                   implemented-by: removeentry[478]))
<               (decl->((type->kind=method procedure name=addfirst
<                     (formals: 
<                       (decl->formal self[479]
<                         (varmode=false)
<                         (type->kind=ident: linkedlist[479]))))
<                   implemented-by: addfirst[479]))
<               (decl->((type->kind=method procedure name=addlast
<                     (formals: 
<                       (decl->formal self[480]
<                         (varmode=false)
<                         (type->kind=ident: linkedlist[480]))))
<                   implemented-by: addlast[480]))
<               (decl->((type->kind=method procedure name=addbeforeentry
<                     (formals: 
<                       (decl->formal self[481]
<                         (varmode=false)
<                         (type->kind=ident: linkedlist[481]))
<                       (decl->formal e[481]
<                         (varmode=false)
<                         (type->kind=ident: hasequals[481]))
<                       (decl->formal entry[481]
<                         (varmode=false)
<                         (type->kind=ident: llentry[481]))))
<                   implemented-by: addbeforeentry[481]))
<               (decl->((type->kind=method function name=entryith
<                     (formals: 
<                       (decl->formal self[482]
<                         (varmode=false)
<                         (type->kind=ident: linkedlist[482]))
<                       (decl->formal index[482]
<                         (varmode=false)
<                         (type->kind=ident: integer[482])))
<                     (type->kind=ident: llentry[482]))
<                   implemented-by: entryith[482])))
<             (overrides: 
<               (contains[484] llcontains[484])
<               (size[485] llsize[485])
<               (add[486] lladd[486])
<               (remove[487] llremove[487])
<               (addall[488] lladdall[488])
<               (addallith[489] lladdallith[489])
<               (clear[490] llclear[490])
<               (getith[491] llgetith[491])
<               (setith[492] llsetith[492])
<               (addith[493] lladdith[493])
<               (removeith[494] llremoveith[494])
<               (indexof[495] llindexof[495])
<               (lastindexof[496] lllastindexof[496])
<               (getlistiteratorith[497] llgetlistiteratorith[497])))))
<       (decl->type: lllstitr[500]
<         (type->kind=pointer:
<           (type->kind=object: name=lllstitr
<             (extends: (type->kind=ident: listiterator[500]))
<             (abstract: false)
<             (fields: 
<               (decl->field: lastreturned[501]
<                 (type->kind=ident: llentry[501]))
<               (decl->field: nextent[502]
<                 (type->kind=ident: llentry[502]))
<               (decl->field: nextidx[503]
<                 (type->kind=ident: integer[503]))
<               (decl->field: thelist[504]
<                 (type->kind=ident: linkedlist[504])))
<             (methods: 
<               (decl->((type->kind=method function name=init
<                     (formals: 
<                       (decl->formal self[506]
<                         (varmode=false)
<                         (type->kind=ident: lllstitr[506]))
<                       (decl->formal lst[506]
<                         (varmode=false)
<                         (type->kind=ident: linkedlist[506]))
<                       (decl->formal index[506]
<                         (varmode=false)
<                         (type->kind=ident: integer[506])))
<                     (type->kind=ident: lllstitr[506]))
<                   implemented-by: init[506])))
<             (overrides: 
<               (hasnext[508] lllihasnext[508])
<               (next[509] lllinext[509])
<               (nextindex[510] lllinextindex[510])
<               (hasprevious[511] lllihasprevious[511])
<               (previous[512] llliprevious[512])
<               (previousindex[513] lllipreviousindex[513])
<               (remove[514] llliremove[514])
<               (set[515] llliset[515])
<               (add[516] llliadd[516])))))
<       (decl->function: lleinit[519]
<         (formals: 
<           (decl->formal self[519]
<             (varmode=false)
<             (type->kind=ident: llentry[519]))
<           (decl->formal element[519]
<             (varmode=false)
<             (type->kind=ident: hasequals[519]))
<           (decl->formal next[519]
<             (varmode=false)
<             (type->kind=ident: llentry[519]))
<           (decl->formal previous[519]
<             (varmode=false)
<             (type->kind=ident: llentry[519])))
<         (type->kind=ident: llentry[519])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binexp: .
<                 (expr-> binding: self[521])
<                 (expr-> id: element))
<               (expr-> binding: element[521]))
<             (stmt->assignstmt:
<               (expr-> binexp: .
<                 (expr-> binding: self[522])
<                 (expr-> id: next))
<               (expr-> binding: next[522]))
<             (stmt->assignstmt:
<               (expr-> binexp: .
<                 (expr-> binding: self[523])
<                 (expr-> id: previous))
<               (expr-> binding: previous[523]))
<             (stmt->assignstmt:
<               (expr-> binding: lleinit[524])
<               (expr-> binding: self[524]))
<             (stmt->emptystmt:))))
<       (decl->function: llinit[527]
<         (formals: 
<           (decl->formal self[527]
<             (varmode=false)
<             (type->kind=ident: linkedlist[527])))
<         (type->kind=ident: linkedlist[527])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binexp: .
<                 (expr-> binding: self[529])
<                 (expr-> id: header))
<               (expr-> call: isMethodCall=true init[529]
<                 (exprs: 
<                   (expr-> call: isMethodCall=false new[529]
<                     (exprs: 
<                       (expr-> binding: llentry[529])))
<                   (expr->[value=0] nil:
<                     type->(type->kind=<NIL>))
<                   (expr->[value=0] nil:
<                     type->(type->kind=<NIL>))
<                   (expr->[value=0] nil:
<                     type->(type->kind=<NIL>)))))
<             (stmt->assignstmt:
<               (expr-> binexp: .
<                 (expr-> binexp: .
<                   (expr-> binding: self[530])
<                   (expr-> id: header))
<                 (expr-> id: next))
<               (expr-> binexp: .
<                 (expr-> binding: self[530])
<                 (expr-> id: header)))
<             (stmt->assignstmt:
<               (expr-> binexp: .
<                 (expr-> binexp: .
<                   (expr-> binding: self[531])
<                   (expr-> id: header))
<                 (expr-> id: previous))
<               (expr-> binexp: .
<                 (expr-> binding: self[531])
<                 (expr-> id: header)))
<             (stmt->assignstmt:
<               (expr-> binexp: .
<                 (expr-> binding: self[532])
<                 (expr-> id: size))
<               (expr->[value=0] int: 0
<                 type->(type->kind=integer)))
<             (stmt->assignstmt:
<               (expr-> binding: llinit[533])
<               (expr-> binding: self[533]))
<             (stmt->emptystmt:))))
<       (decl->function: llgetfirst[536]
<         (formals: 
<           (decl->formal self[536]
<             (varmode=false)
<             (type->kind=ident: linkedlist[536])))
<         (type->kind=ident: hasequals[536])
<         (block: 
<           (stmts: 
<             (stmt->ifstmt: 
<               (expr-> binexp: =
<                 (expr-> binexp: .
<                   (expr-> binding: self[538])
<                   (expr-> id: size))
<                 (expr->[value=0] int: 0
<                   type->(type->kind=integer)))
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->assignstmt:
<                     (expr-> binding: llgetfirst[539])
<                     (expr->[value=0] nil:
<                       type->(type->kind=<NIL>)))
<                   (stmt->emptystmt:)))
<               (else: 
<                 (stmt->compoundstmt:
<                   (stmts: 
<                     (stmt->assignstmt:
<                       (expr-> binding: llgetfirst[541])
<                       (expr-> binexp: .
<                         (expr-> binexp: .
<                           (expr-> binexp: .
<                             (expr-> binding: self[541])
<                             (expr-> id: header))
<                           (expr-> id: next))
<                         (expr-> id: element)))
<                     (stmt->emptystmt:)))))
<             (stmt->emptystmt:))))
<       (decl->function: llgetlast[545]
<         (formals: 
<           (decl->formal self[545]
<             (varmode=false)
<             (type->kind=ident: linkedlist[545])))
<         (type->kind=ident: hasequals[545])
<         (block: 
<           (stmts: 
<             (stmt->ifstmt: 
<               (expr-> binexp: =
<                 (expr-> binexp: .
<                   (expr-> binding: self[547])
<                   (expr-> id: size))
<                 (expr->[value=0] int: 0
<                   type->(type->kind=integer)))
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->assignstmt:
<                     (expr-> binding: llgetlast[548])
<                     (expr->[value=0] nil:
<                       type->(type->kind=<NIL>)))
<                   (stmt->emptystmt:)))
<               (else: 
<                 (stmt->compoundstmt:
<                   (stmts: 
<                     (stmt->assignstmt:
<                       (expr-> binding: llgetlast[550])
<                       (expr-> binexp: .
<                         (expr-> binexp: .
<                           (expr-> binexp: .
<                             (expr-> binding: self[550])
<                             (expr-> id: header))
<                           (expr-> id: previous))
<                         (expr-> id: element)))
<                     (stmt->emptystmt:)))))
<             (stmt->emptystmt:))))
<       (decl->function: llremovefirst[554]
<         (formals: 
<           (decl->formal self[554]
<             (varmode=false)
<             (type->kind=ident: linkedlist[554])))
<         (type->kind=ident: hasequals[554])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: llremovefirst[556])
<               (expr-> call: isMethodCall=true removeentry[556]
<                 (exprs: 
<                   (expr-> binding: self[556])
<                   (expr-> binexp: .
<                     (expr-> binexp: .
<                       (expr-> binding: self[556])
<                       (expr-> id: header))
<                     (expr-> id: next)))))
<             (stmt->emptystmt:))))
<       (decl->function: llremovelast[559]
<         (formals: 
<           (decl->formal self[559]
<             (varmode=false)
<             (type->kind=ident: linkedlist[559])))
<         (type->kind=ident: hasequals[559])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: llremovelast[561])
<               (expr-> call: isMethodCall=true removeentry[561]
<                 (exprs: 
<                   (expr-> binding: self[561])
<                   (expr-> binexp: .
<                     (expr-> binexp: .
<                       (expr-> binding: self[561])
<                       (expr-> id: header))
<                     (expr-> id: previous)))))
<             (stmt->emptystmt:))))
<       (decl->procedure: lladdfirst[564]
<         (formals: 
<           (decl->formal self[564]
<             (varmode=false)
<             (type->kind=ident: linkedlist[564]))
<           (decl->formal e[564]
<             (varmode=false)
<             (type->kind=ident: hasequals[564])))
<         (block: 
<           (stmts: 
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=true addbeforeentry[566]
<                 (exprs: 
<                   (expr-> binding: self[566])
<                   (expr-> binding: e[566])
<                   (expr-> binexp: .
<                     (expr-> binexp: .
<                       (expr-> binding: self[566])
<                       (expr-> id: header))
<                     (expr-> id: next)))))
<             (stmt->emptystmt:))))
<       (decl->procedure: lladdlast[569]
<         (formals: 
<           (decl->formal self[569]
<             (varmode=false)
<             (type->kind=ident: linkedlist[569]))
<           (decl->formal e[569]
<             (varmode=false)
<             (type->kind=ident: hasequals[569])))
<         (block: 
<           (stmts: 
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=true addbeforeentry[571]
<                 (exprs: 
<                   (expr-> binding: self[571])
<                   (expr-> binding: e[571])
<                   (expr-> binexp: .
<                     (expr-> binding: self[571])
<                     (expr-> id: header)))))
<             (stmt->emptystmt:))))
<       (decl->function: llcontains[574]
<         (formals: 
<           (decl->formal self[574]
<             (varmode=false)
<             (type->kind=ident: linkedlist[574]))
<           (decl->formal e[574]
<             (varmode=false)
<             (type->kind=ident: hasequals[574])))
<         (type->kind=ident: boolean[574])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: llcontains[576])
<               (expr-> binexp: <>
<                 (expr-> call: isMethodCall=true indexof[576]
<                   (exprs: 
<                     (expr-> binding: self[576])
<                     (expr-> binding: e[576])))
<                 (expr-> unexp: -
<                   (expr->[value=1] int: 1
<                     type->(type->kind=integer)))))
<             (stmt->emptystmt:))))
<       (decl->function: llsize[579]
<         (formals: 
<           (decl->formal self[579]
<             (varmode=false)
<             (type->kind=ident: linkedlist[579])))
<         (type->kind=ident: integer[579])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: llsize[581])
<               (expr-> binexp: .
<                 (expr-> binding: self[581])
<                 (expr-> id: mysize)))
<             (stmt->emptystmt:))))
<       (decl->function: lladd[584]
<         (formals: 
<           (decl->formal self[584]
<             (varmode=false)
<             (type->kind=ident: linkedlist[584]))
<           (decl->formal e[584]
<             (varmode=false)
<             (type->kind=ident: hasequals[584])))
<         (type->kind=ident: boolean[584])
<         (block: 
<           (stmts: 
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=true addbeforeentry[586]
<                 (exprs: 
<                   (expr-> binding: self[586])
<                   (expr-> binding: e[586])
<                   (expr-> binexp: .
<                     (expr-> binding: self[586])
<                     (expr-> id: header)))))
<             (stmt->assignstmt:
<               (expr-> binding: lladd[587])
<               (expr-> binding: true[587]))
<             (stmt->emptystmt:))))
<       (decl->function: llremove[590]
<         (formals: 
<           (decl->formal self[590]
<             (varmode=false)
<             (type->kind=ident: linkedlist[590]))
<           (decl->formal o[590]
<             (varmode=false)
<             (type->kind=ident: hasequals[590])))
<         (type->kind=ident: boolean[590])
<         (block: 
<           (decls: 
<             (decl->variable: e[592]
<               (type->kind=ident: llentry[592]))
<             (decl->variable: searching[593]
<               (type->kind=ident: boolean[593]))
<             (decl->variable: oo[594]
<               (type->kind=ident: hasequals[594])))
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: llremove[596])
<               (expr-> binding: false[596]))
<             (stmt->assignstmt:
<               (expr-> binding: searching[597])
<               (expr-> binding: true[597]))
<             (stmt->assignstmt:
<               (expr-> binding: e[598])
<               (expr-> binexp: .
<                 (expr-> binexp: .
<                   (expr-> binding: self[598])
<                   (expr-> id: header))
<                 (expr-> id: next)))
<             (stmt->whilestmt:
<               (expr-> binding: searching[599])
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->ifstmt: 
<                     (expr-> binexp: <>
<                       (expr-> binding: e[600])
<                       (expr-> binexp: .
<                         (expr-> binding: self[600])
<                         (expr-> id: header)))
<                     (stmt->compoundstmt:
<                       (stmts: 
<                         (stmt->ifstmt: 
<                           (expr-> call: isMethodCall=true equals[601]
<                             (exprs: 
<                               (expr-> binding: o[601])
<                               (expr-> binexp: .
<                                 (expr-> binding: e[601])
<                                 (expr-> id: element))))
<                           (stmt->compoundstmt:
<                             (stmts: 
<                               (stmt->assignstmt:
<                                 (expr-> binding: oo[602])
<                                 (expr-> call: isMethodCall=true removeentry[602]
<                                   (exprs: 
<                                     (expr-> binding: self[602])
<                                     (expr-> binding: e[602]))))
<                               (stmt->assignstmt:
<                                 (expr-> binding: llremove[603])
<                                 (expr-> binding: true[603]))
<                               (stmt->assignstmt:
<                                 (expr-> binding: searching[604])
<                                 (expr-> binding: false[604]))
<                               (stmt->emptystmt:))))
<                         (stmt->emptystmt:)))
<                     (else: 
<                       (stmt->compoundstmt:
<                         (stmts: 
<                           (stmt->assignstmt:
<                             (expr-> binding: searching[607])
<                             (expr-> binding: false[607]))
<                           (stmt->emptystmt:)))))
<                   (stmt->emptystmt:))))
<             (stmt->emptystmt:))))
<       (decl->function: lladdall[612]
<         (formals: 
<           (decl->formal self[612]
<             (varmode=false)
<             (type->kind=ident: linkedlist[612]))
<           (decl->formal other[612]
<             (varmode=false)
<             (type->kind=ident: collection[612])))
<         (type->kind=ident: boolean[612])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: lladdall[614])
<               (expr-> call: isMethodCall=true addallith[614]
<                 (exprs: 
<                   (expr-> binding: self[614])
<                   (expr-> binexp: .
<                     (expr-> binding: self[614])
<                     (expr-> id: size))
<                   (expr-> binding: other[614]))))
<             (stmt->emptystmt:))))
<       (decl->function: lladdallith[617]
<         (formals: 
<           (decl->formal self[617]
<             (varmode=false)
<             (type->kind=ident: linkedlist[617]))
<           (decl->formal index[617]
<             (varmode=false)
<             (type->kind=ident: integer[617]))
<           (decl->formal other[617]
<             (varmode=false)
<             (type->kind=ident: collection[617])))
<         (type->kind=ident: boolean[617])
<         (block: 
<           (decls: 
<             (decl->variable: it[619]
<               (type->kind=ident: iterator[619]))
<             (decl->variable: succ[620]
<               (type->kind=ident: llentry[620]))
<             (decl->variable: pred[621]
<               (type->kind=ident: llentry[621]))
<             (decl->variable: o[622]
<               (type->kind=ident: hasequals[622]))
<             (decl->variable: newent[623]
<               (type->kind=ident: llentry[623])))
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: lladdallith[625])
<               (expr-> binding: false[625]))
<             (stmt->ifstmt: 
<               (expr-> binexp: and
<                 (expr-> binexp: >=
<                   (expr-> binding: index[626])
<                   (expr->[value=0] int: 0
<                     type->(type->kind=integer)))
<                 (expr-> binexp: <=
<                   (expr-> binding: index[626])
<                   (expr-> binexp: .
<                     (expr-> binding: self[626])
<                     (expr-> id: size))))
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->assignstmt:
<                     (expr-> binding: it[627])
<                     (expr-> binexp: .
<                       (expr-> binding: other[627])
<                       (expr-> id: getiterator)))
<                   (stmt->ifstmt: 
<                     (expr-> binexp: =
<                       (expr-> binding: index[628])
<                       (expr-> binexp: .
<                         (expr-> binding: self[628])
<                         (expr-> id: size)))
<                     (stmt->compoundstmt:
<                       (stmts: 
<                         (stmt->assignstmt:
<                           (expr-> binding: succ[629])
<                           (expr-> binexp: .
<                             (expr-> binding: self[629])
<                             (expr-> id: header)))
<                         (stmt->emptystmt:)))
<                     (else: 
<                       (stmt->compoundstmt:
<                         (stmts: 
<                           (stmt->assignstmt:
<                             (expr-> binding: succ[631])
<                             (expr-> call: isMethodCall=true entryith[631]
<                               (exprs: 
<                                 (expr-> binding: self[631])
<                                 (expr-> binding: index[631]))))
<                           (stmt->emptystmt:)))))
<                   (stmt->assignstmt:
<                     (expr-> binding: pred[633])
<                     (expr-> binexp: .
<                       (expr-> binding: succ[633])
<                       (expr-> id: previous)))
<                   (stmt->whilestmt:
<                     (expr-> binexp: .
<                       (expr-> binding: it[634])
<                       (expr-> id: hasnext))
<                     (stmt->compoundstmt:
<                       (stmts: 
<                         (stmt->assignstmt:
<                           (expr-> binding: o[635])
<                           (expr-> call: isMethodCall=false narrow[635]
<                             (exprs: 
<                               (expr-> binexp: .
<                                 (expr-> binding: it[635])
<                                 (expr-> id: next))
<                               (expr-> binding: hasequals[635]))))
<                         (stmt->assignstmt:
<                           (expr-> binding: newent[636])
<                           (expr-> call: isMethodCall=true init[636]
<                             (exprs: 
<                               (expr-> call: isMethodCall=false new[636]
<                                 (exprs: 
<                                   (expr-> binding: llentry[636])))
<                               (expr-> binding: o[636])
<                               (expr-> binding: succ[636])
<                               (expr-> binding: pred[636]))))
<                         (stmt->assignstmt:
<                           (expr-> binexp: .
<                             (expr-> binding: pred[637])
<                             (expr-> id: next))
<                           (expr-> binding: newent[637]))
<                         (stmt->assignstmt:
<                           (expr-> binding: pred[638])
<                           (expr-> binding: newent[638]))
<                         (stmt->assignstmt:
<                           (expr-> binexp: .
<                             (expr-> binding: self[639])
<                             (expr-> id: mysize))
<                           (expr-> binexp: +
<                             (expr-> binexp: .
<                               (expr-> binding: self[639])
<                               (expr-> id: mysize))
<                             (expr->[value=1] int: 1
<                               type->(type->kind=integer))))
<                         (stmt->emptystmt:))))
<                   (stmt->assignstmt:
<                     (expr-> binexp: .
<                       (expr-> binding: succ[641])
<                       (expr-> id: previous))
<                     (expr-> binding: pred[641]))
<                   (stmt->assignstmt:
<                     (expr-> binding: lladdallith[642])
<                     (expr-> binding: true[642]))
<                   (stmt->emptystmt:))))
<             (stmt->emptystmt:))))
<       (decl->procedure: llclear[646]
<         (formals: 
<           (decl->formal self[646]
<             (varmode=false)
<             (type->kind=ident: linkedlist[646])))
<         (block: 
<           (decls: 
<             (decl->variable: e[647]
<               (type->kind=ident: llentry[647]))
<             (decl->variable: next[647]
<               (type->kind=ident: llentry[647])))
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: e[649])
<               (expr-> binexp: .
<                 (expr-> binexp: .
<                   (expr-> binding: self[649])
<                   (expr-> id: header))
<                 (expr-> id: next)))
<             (stmt->whilestmt:
<               (expr-> binexp: <>
<                 (expr-> binding: e[650])
<                 (expr-> binexp: .
<                   (expr-> binding: self[650])
<                   (expr-> id: header)))
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->assignstmt:
<                     (expr-> binding: next[651])
<                     (expr-> binexp: .
<                       (expr-> binding: e[651])
<                       (expr-> id: next)))
<                   (stmt->assignstmt:
<                     (expr-> binexp: .
<                       (expr-> binding: e[652])
<                       (expr-> id: next))
<                     (expr->[value=0] nil:
<                       type->(type->kind=<NIL>)))
<                   (stmt->assignstmt:
<                     (expr-> binexp: .
<                       (expr-> binding: e[653])
<                       (expr-> id: previous))
<                     (expr->[value=0] nil:
<                       type->(type->kind=<NIL>)))
<                   (stmt->assignstmt:
<                     (expr-> binding: e[654])
<                     (expr-> binding: next[654]))
<                   (stmt->emptystmt:))))
<             (stmt->assignstmt:
<               (expr-> binexp: .
<                 (expr-> binexp: .
<                   (expr-> binding: self[656])
<                   (expr-> id: header))
<                 (expr-> id: next))
<               (expr-> binexp: .
<                 (expr-> binding: self[656])
<                 (expr-> id: header)))
<             (stmt->assignstmt:
<               (expr-> binexp: .
<                 (expr-> binexp: .
<                   (expr-> binding: self[657])
<                   (expr-> id: header))
<                 (expr-> id: previous))
<               (expr-> binexp: .
<                 (expr-> binding: self[657])
<                 (expr-> id: header)))
<             (stmt->assignstmt:
<               (expr-> binexp: .
<                 (expr-> binding: self[658])
<                 (expr-> id: mysize))
<               (expr->[value=0] int: 0
<                 type->(type->kind=integer)))
<             (stmt->emptystmt:))))
<       (decl->function: llgetith[661]
<         (formals: 
<           (decl->formal self[661]
<             (varmode=false)
<             (type->kind=ident: linkedlist[661]))
<           (decl->formal index[661]
<             (varmode=false)
<             (type->kind=ident: integer[661])))
<         (type->kind=ident: hasequals[661])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: llgetith[663])
<               (expr-> binexp: .
<                 (expr-> call: isMethodCall=true entryith[663]
<                   (exprs: 
<                     (expr-> binding: self[663])
<                     (expr-> binding: index[663])))
<                 (expr-> id: element)))
<             (stmt->emptystmt:))))
<       (decl->function: llsetith[666]
<         (formals: 
<           (decl->formal self[666]
<             (varmode=false)
<             (type->kind=ident: linkedlist[666]))
<           (decl->formal index[666]
<             (varmode=false)
<             (type->kind=ident: integer[666]))
<           (decl->formal element[666]
<             (varmode=false)
<             (type->kind=ident: hasequals[666])))
<         (type->kind=ident: hasequals[666])
<         (block: 
<           (decls: 
<             (decl->variable: e[667]
<               (type->kind=ident: llentry[667])))
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: llsetith[669])
<               (expr->[value=0] nil:
<                 type->(type->kind=<NIL>)))
<             (stmt->assignstmt:
<               (expr-> binding: e[670])
<               (expr-> call: isMethodCall=true entryith[670]
<                 (exprs: 
<                   (expr-> binding: self[670])
<                   (expr-> binding: index[670]))))
<             (stmt->ifstmt: 
<               (expr-> binexp: <>
<                 (expr-> binding: e[671])
<                 (expr->[value=0] nil:
<                   type->(type->kind=<NIL>)))
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->assignstmt:
<                     (expr-> binding: llsetith[672])
<                     (expr-> binexp: .
<                       (expr-> binding: e[672])
<                       (expr-> id: element)))
<                   (stmt->assignstmt:
<                     (expr-> binexp: .
<                       (expr-> binding: e[673])
<                       (expr-> id: element))
<                     (expr-> binding: element[673]))
<                   (stmt->emptystmt:))))
<             (stmt->emptystmt:))))
<       (decl->function: lladdith[677]
<         (formals: 
<           (decl->formal self[677]
<             (varmode=false)
<             (type->kind=ident: linkedlist[677]))
<           (decl->formal index[677]
<             (varmode=false)
<             (type->kind=ident: integer[677]))
<           (decl->formal element[677]
<             (varmode=false)
<             (type->kind=ident: hasequals[677])))
<         (type->kind=ident: boolean[677])
<         (block: 
<           (decls: 
<             (decl->variable: e[678]
<               (type->kind=ident: llentry[678])))
<           (stmts: 
<             (stmt->ifstmt: 
<               (expr-> binexp: =
<                 (expr-> binding: index[680])
<                 (expr-> binexp: .
<                   (expr-> binding: self[680])
<                   (expr-> id: size)))
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->assignstmt:
<                     (expr-> binding: e[681])
<                     (expr-> binexp: .
<                       (expr-> binding: self[681])
<                       (expr-> id: header)))
<                   (stmt->emptystmt:)))
<               (else: 
<                 (stmt->compoundstmt:
<                   (stmts: 
<                     (stmt->assignstmt:
<                       (expr-> binding: e[683])
<                       (expr-> call: isMethodCall=true entryith[683]
<                         (exprs: 
<                           (expr-> binding: self[683])
<                           (expr-> binding: index[683]))))
<                     (stmt->emptystmt:)))))
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=true addbeforeentry[685]
<                 (exprs: 
<                   (expr-> binding: self[685])
<                   (expr-> binding: element[685])
<                   (expr-> binding: e[685]))))
<             (stmt->assignstmt:
<               (expr-> binding: lladdith[686])
<               (expr-> binding: true[686]))
<             (stmt->emptystmt:))))
<       (decl->function: llremoveith[689]
<         (formals: 
<           (decl->formal self[689]
<             (varmode=false)
<             (type->kind=ident: linkedlist[689]))
<           (decl->formal index[689]
<             (varmode=false)
<             (type->kind=ident: integer[689])))
<         (type->kind=ident: boolean[689])
<         (block: 
<           (decls: 
<             (decl->variable: oo[690]
<               (type->kind=ident: hasequals[690])))
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: oo[692])
<               (expr-> call: isMethodCall=true removeentry[692]
<                 (exprs: 
<                   (expr-> binding: self[692])
<                   (expr-> call: isMethodCall=true entryith[692]
<                     (exprs: 
<                       (expr-> binding: self[692])
<                       (expr-> binding: index[692]))))))
<             (stmt->assignstmt:
<               (expr-> binding: llremoveith[693])
<               (expr-> binding: true[693]))
<             (stmt->emptystmt:))))
<       (decl->function: llentryith[696]
<         (formals: 
<           (decl->formal self[696]
<             (varmode=false)
<             (type->kind=ident: linkedlist[696]))
<           (decl->formal index[696]
<             (varmode=false)
<             (type->kind=ident: integer[696])))
<         (type->kind=ident: llentry[696])
<         (block: 
<           (decls: 
<             (decl->variable: e[697]
<               (type->kind=ident: llentry[697])))
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: llentryith[699])
<               (expr->[value=0] nil:
<                 type->(type->kind=<NIL>)))
<             (stmt->ifstmt: 
<               (expr-> binexp: and
<                 (expr-> binexp: >=
<                   (expr-> binding: index[700])
<                   (expr->[value=0] int: 0
<                     type->(type->kind=integer)))
<                 (expr-> binexp: <
<                   (expr-> binding: index[700])
<                   (expr-> binexp: .
<                     (expr-> binding: self[700])
<                     (expr-> id: size))))
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->assignstmt:
<                     (expr-> binding: e[701])
<                     (expr-> binexp: .
<                       (expr-> binexp: .
<                         (expr-> binding: self[701])
<                         (expr-> id: header))
<                       (expr-> id: next)))
<                   (stmt->whilestmt:
<                     (expr-> binexp: >
<                       (expr-> binding: index[702])
<                       (expr->[value=0] int: 0
<                         type->(type->kind=integer)))
<                     (stmt->compoundstmt:
<                       (stmts: 
<                         (stmt->assignstmt:
<                           (expr-> binding: e[703])
<                           (expr-> binexp: .
<                             (expr-> binding: e[703])
<                             (expr-> id: next)))
<                         (stmt->assignstmt:
<                           (expr-> binding: index[704])
<                           (expr-> binexp: -
<                             (expr-> binding: index[704])
<                             (expr->[value=1] int: 1
<                               type->(type->kind=integer))))
<                         (stmt->emptystmt:))))
<                   (stmt->assignstmt:
<                     (expr-> binding: llentryith[706])
<                     (expr-> binding: e[706]))
<                   (stmt->emptystmt:))))
<             (stmt->emptystmt:))))
<       (decl->function: llindexof[710]
<         (formals: 
<           (decl->formal self[710]
<             (varmode=false)
<             (type->kind=ident: linkedlist[710]))
<           (decl->formal o[710]
<             (varmode=false)
<             (type->kind=ident: hasequals[710])))
<         (type->kind=ident: integer[710])
<         (block: 
<           (decls: 
<             (decl->variable: index[712]
<               (type->kind=ident: integer[712]))
<             (decl->variable: e[713]
<               (type->kind=ident: llentry[713]))
<             (decl->variable: searching[714]
<               (type->kind=ident: boolean[714])))
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: llindexof[716])
<               (expr-> unexp: -
<                 (expr->[value=1] int: 1
<                   type->(type->kind=integer))))
<             (stmt->assignstmt:
<               (expr-> binding: index[717])
<               (expr->[value=0] int: 0
<                 type->(type->kind=integer)))
<             (stmt->assignstmt:
<               (expr-> binding: e[718])
<               (expr-> binexp: .
<                 (expr-> binexp: .
<                   (expr-> binding: self[718])
<                   (expr-> id: header))
<                 (expr-> id: next)))
<             (stmt->assignstmt:
<               (expr-> binding: searching[719])
<               (expr-> binding: true[719]))
<             (stmt->whilestmt:
<               (expr-> binding: searching[720])
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->ifstmt: 
<                     (expr-> binexp: <>
<                       (expr-> binding: e[721])
<                       (expr-> binexp: .
<                         (expr-> binding: self[721])
<                         (expr-> id: header)))
<                     (stmt->compoundstmt:
<                       (stmts: 
<                         (stmt->ifstmt: 
<                           (expr-> call: isMethodCall=true equals[722]
<                             (exprs: 
<                               (expr-> binding: o[722])
<                               (expr-> binexp: .
<                                 (expr-> binding: e[722])
<                                 (expr-> id: element))))
<                           (stmt->compoundstmt:
<                             (stmts: 
<                               (stmt->assignstmt:
<                                 (expr-> binding: llindexof[723])
<                                 (expr-> binding: index[723]))
<                               (stmt->assignstmt:
<                                 (expr-> binding: searching[724])
<                                 (expr-> binding: false[724]))
<                               (stmt->emptystmt:)))
<                           (else: 
<                             (stmt->compoundstmt:
<                               (stmts: 
<                                 (stmt->assignstmt:
<                                   (expr-> binding: index[726])
<                                   (expr-> binexp: +
<                                     (expr-> binding: index[726])
<                                     (expr->[value=1] int: 1
<                                       type->(type->kind=integer))))
<                                 (stmt->assignstmt:
<                                   (expr-> binding: e[727])
<                                   (expr-> binexp: .
<                                     (expr-> binding: e[727])
<                                     (expr-> id: next)))
<                                 (stmt->emptystmt:)))))
<                         (stmt->emptystmt:)))
<                     (else: 
<                       (stmt->compoundstmt:
<                         (stmts: 
<                           (stmt->assignstmt:
<                             (expr-> binding: searching[730])
<                             (expr-> binding: false[730]))
<                           (stmt->emptystmt:)))))
<                   (stmt->emptystmt:))))
<             (stmt->emptystmt:))))
<       (decl->function: lllastindexof[735]
<         (formals: 
<           (decl->formal self[735]
<             (varmode=false)
<             (type->kind=ident: linkedlist[735]))
<           (decl->formal o[735]
<             (varmode=false)
<             (type->kind=ident: hasequals[735])))
<         (type->kind=ident: integer[735])
<         (block: 
<           (decls: 
<             (decl->variable: index[737]
<               (type->kind=ident: integer[737]))
<             (decl->variable: e[738]
<               (type->kind=ident: llentry[738]))
<             (decl->variable: searching[739]
<               (type->kind=ident: boolean[739])))
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: lllastindexof[741])
<               (expr-> unexp: -
<                 (expr->[value=1] int: 1
<                   type->(type->kind=integer))))
<             (stmt->assignstmt:
<               (expr-> binding: index[742])
<               (expr-> binexp: .
<                 (expr-> binding: self[742])
<                 (expr-> id: size)))
<             (stmt->assignstmt:
<               (expr-> binding: e[743])
<               (expr-> binexp: .
<                 (expr-> binexp: .
<                   (expr-> binding: self[743])
<                   (expr-> id: header))
<                 (expr-> id: previous)))
<             (stmt->assignstmt:
<               (expr-> binding: searching[744])
<               (expr-> binding: true[744]))
<             (stmt->whilestmt:
<               (expr-> binding: searching[745])
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->ifstmt: 
<                     (expr-> binexp: <>
<                       (expr-> binding: e[746])
<                       (expr-> binexp: .
<                         (expr-> binding: self[746])
<                         (expr-> id: header)))
<                     (stmt->compoundstmt:
<                       (stmts: 
<                         (stmt->assignstmt:
<                           (expr-> binding: index[747])
<                           (expr-> binexp: -
<                             (expr-> binding: index[747])
<                             (expr->[value=1] int: 1
<                               type->(type->kind=integer))))
<                         (stmt->ifstmt: 
<                           (expr-> call: isMethodCall=true equals[748]
<                             (exprs: 
<                               (expr-> binding: o[748])
<                               (expr-> binexp: .
<                                 (expr-> binding: e[748])
<                                 (expr-> id: element))))
<                           (stmt->compoundstmt:
<                             (stmts: 
<                               (stmt->assignstmt:
<                                 (expr-> binding: lllastindexof[749])
<                                 (expr-> binding: index[749]))
<                               (stmt->assignstmt:
<                                 (expr-> binding: searching[750])
<                                 (expr-> binding: false[750]))
<                               (stmt->emptystmt:)))
<                           (else: 
<                             (stmt->compoundstmt:
<                               (stmts: 
<                                 (stmt->assignstmt:
<                                   (expr-> binding: e[752])
<                                   (expr-> binexp: .
<                                     (expr-> binding: e[752])
<                                     (expr-> id: previous)))
<                                 (stmt->emptystmt:)))))
<                         (stmt->emptystmt:)))
<                     (else: 
<                       (stmt->compoundstmt:
<                         (stmts: 
<                           (stmt->assignstmt:
<                             (expr-> binding: searching[755])
<                             (expr-> binding: false[755]))
<                           (stmt->emptystmt:)))))
<                   (stmt->emptystmt:))))
<             (stmt->emptystmt:))))
<       (decl->procedure: lladdbeforeentry[760]
<         (formals: 
<           (decl->formal self[760]
<             (varmode=false)
<             (type->kind=ident: linkedlist[760]))
<           (decl->formal e[760]
<             (varmode=false)
<             (type->kind=ident: hasequals[760]))
<           (decl->formal entry[760]
<             (varmode=false)
<             (type->kind=ident: llentry[760])))
<         (block: 
<           (decls: 
<             (decl->variable: newent[761]
<               (type->kind=ident: llentry[761])))
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: newent[763])
<               (expr-> call: isMethodCall=true init[763]
<                 (exprs: 
<                   (expr-> call: isMethodCall=false new[763]
<                     (exprs: 
<                       (expr-> binding: llentry[763])))
<                   (expr-> binding: e[763])
<                   (expr-> binding: entry[763])
<                   (expr-> binexp: .
<                     (expr-> binding: entry[763])
<                     (expr-> id: previous)))))
<             (stmt->assignstmt:
<               (expr-> binexp: .
<                 (expr-> binexp: .
<                   (expr-> binding: newent[764])
<                   (expr-> id: previous))
<                 (expr-> id: next))
<               (expr-> binding: newent[764]))
<             (stmt->assignstmt:
<               (expr-> binexp: .
<                 (expr-> binexp: .
<                   (expr-> binding: newent[765])
<                   (expr-> id: next))
<                 (expr-> id: previous))
<               (expr-> binding: newent[765]))
<             (stmt->assignstmt:
<               (expr-> binexp: .
<                 (expr-> binding: self[766])
<                 (expr-> id: mysize))
<               (expr-> binexp: +
<                 (expr-> binexp: .
<                   (expr-> binding: self[766])
<                   (expr-> id: mysize))
<                 (expr->[value=1] int: 1
<                   type->(type->kind=integer))))
<             (stmt->emptystmt:))))
<       (decl->function: llremoveentry[769]
<         (formals: 
<           (decl->formal self[769]
<             (varmode=false)
<             (type->kind=ident: linkedlist[769]))
<           (decl->formal e[769]
<             (varmode=false)
<             (type->kind=ident: llentry[769])))
<         (type->kind=ident: hasequals[769])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: llremoveentry[771])
<               (expr->[value=0] nil:
<                 type->(type->kind=<NIL>)))
<             (stmt->ifstmt: 
<               (expr-> binexp: and
<                 (expr-> binexp: <>
<                   (expr-> binding: e[772])
<                   (expr-> binexp: .
<                     (expr-> binding: self[772])
<                     (expr-> id: header)))
<                 (expr-> binexp: <>
<                   (expr-> binding: e[772])
<                   (expr->[value=0] nil:
<                     type->(type->kind=<NIL>))))
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->assignstmt:
<                     (expr-> binding: llremoveentry[773])
<                     (expr-> binexp: .
<                       (expr-> binding: e[773])
<                       (expr-> id: element)))
<                   (stmt->assignstmt:
<                     (expr-> binexp: .
<                       (expr-> binexp: .
<                         (expr-> binding: e[774])
<                         (expr-> id: previous))
<                       (expr-> id: next))
<                     (expr-> binexp: .
<                       (expr-> binding: e[774])
<                       (expr-> id: next)))
<                   (stmt->assignstmt:
<                     (expr-> binexp: .
<                       (expr-> binexp: .
<                         (expr-> binding: e[775])
<                         (expr-> id: next))
<                       (expr-> id: previous))
<                     (expr-> binexp: .
<                       (expr-> binding: e[775])
<                       (expr-> id: previous)))
<                   (stmt->assignstmt:
<                     (expr-> binexp: .
<                       (expr-> binding: e[776])
<                       (expr-> id: previous))
<                     (expr->[value=0] nil:
<                       type->(type->kind=<NIL>)))
<                   (stmt->assignstmt:
<                     (expr-> binexp: .
<                       (expr-> binding: e[777])
<                       (expr-> id: next))
<                     (expr->[value=0] nil:
<                       type->(type->kind=<NIL>)))
<                   (stmt->assignstmt:
<                     (expr-> binexp: .
<                       (expr-> binding: e[778])
<                       (expr-> id: element))
<                     (expr->[value=0] nil:
<                       type->(type->kind=<NIL>)))
<                   (stmt->assignstmt:
<                     (expr-> binexp: .
<                       (expr-> binding: self[779])
<                       (expr-> id: mysize))
<                     (expr-> binexp: -
<                       (expr-> binexp: .
<                         (expr-> binding: self[779])
<                         (expr-> id: mysize))
<                       (expr->[value=1] int: 1
<                         type->(type->kind=integer))))
<                   (stmt->emptystmt:))))
<             (stmt->emptystmt:))))
<       (decl->function: llgetlistiteratorith[783]
<         (formals: 
<           (decl->formal self[783]
<             (varmode=false)
<             (type->kind=ident: linkedlist[783]))
<           (decl->formal index[783]
<             (varmode=false)
<             (type->kind=ident: integer[783])))
<         (type->kind=ident: listiterator[783])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: llgetlistiteratorith[785])
<               (expr-> call: isMethodCall=true init[785]
<                 (exprs: 
<                   (expr-> call: isMethodCall=false new[785]
<                     (exprs: 
<                       (expr-> binding: lllstitr[785])))
<                   (expr-> binding: self[785])
<                   (expr-> binding: index[785]))))
<             (stmt->emptystmt:))))
<       (decl->function: llliinit[789]
<         (formals: 
<           (decl->formal self[789]
<             (varmode=false)
<             (type->kind=ident: lllstitr[789]))
<           (decl->formal lst[789]
<             (varmode=false)
<             (type->kind=ident: linkedlist[789]))
<           (decl->formal index[789]
<             (varmode=false)
<             (type->kind=ident: integer[789])))
<         (type->kind=ident: lllstitr[789])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binexp: .
<                 (expr-> binding: self[791])
<                 (expr-> id: lastreturned))
<               (expr-> binexp: .
<                 (expr-> binding: lst[791])
<                 (expr-> id: header)))
<             (stmt->assignstmt:
<               (expr-> binexp: .
<                 (expr-> binding: self[792])
<                 (expr-> id: thelist))
<               (expr-> binding: lst[792]))
<             (stmt->ifstmt: 
<               (expr-> binexp: and
<                 (expr-> binexp: >=
<                   (expr-> binding: index[793])
<                   (expr->[value=0] int: 0
<                     type->(type->kind=integer)))
<                 (expr-> binexp: <=
<                   (expr-> binding: index[793])
<                   (expr-> binexp: .
<                     (expr-> binding: lst[793])
<                     (expr-> id: size))))
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->assignstmt:
<                     (expr-> binexp: .
<                       (expr-> binding: self[794])
<                       (expr-> id: nextent))
<                     (expr-> binexp: .
<                       (expr-> binexp: .
<                         (expr-> binexp: .
<                           (expr-> binding: self[794])
<                           (expr-> id: thelist))
<                         (expr-> id: header))
<                       (expr-> id: next)))
<                   (stmt->assignstmt:
<                     (expr-> binexp: .
<                       (expr-> binding: self[795])
<                       (expr-> id: nextidx))
<                     (expr->[value=0] int: 0
<                       type->(type->kind=integer)))
<                   (stmt->whilestmt:
<                     (expr-> binexp: >
<                       (expr-> binding: index[796])
<                       (expr->[value=0] int: 0
<                         type->(type->kind=integer)))
<                     (stmt->compoundstmt:
<                       (stmts: 
<                         (stmt->assignstmt:
<                           (expr-> binexp: .
<                             (expr-> binding: self[797])
<                             (expr-> id: nextent))
<                           (expr-> binexp: .
<                             (expr-> binexp: .
<                               (expr-> binding: self[797])
<                               (expr-> id: nextent))
<                             (expr-> id: next)))
<                         (stmt->assignstmt:
<                           (expr-> binexp: .
<                             (expr-> binding: self[798])
<                             (expr-> id: nextidx))
<                           (expr-> binexp: +
<                             (expr-> binexp: .
<                               (expr-> binding: self[798])
<                               (expr-> id: nextidx))
<                             (expr->[value=1] int: 1
<                               type->(type->kind=integer))))
<                         (stmt->assignstmt:
<                           (expr-> binding: index[799])
<                           (expr-> binexp: -
<                             (expr-> binding: index[799])
<                             (expr->[value=1] int: 1
<                               type->(type->kind=integer))))
<                         (stmt->emptystmt:))))
<                   (stmt->emptystmt:))))
<             (stmt->emptystmt:))))
<       (decl->function: lllihasnext[804]
<         (formals: 
<           (decl->formal self[804]
<             (varmode=false)
<             (type->kind=ident: lllstitr[804])))
<         (type->kind=ident: boolean[804])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: lllihasnext[806])
<               (expr-> binexp: <>
<                 (expr-> binexp: .
<                   (expr-> binding: self[806])
<                   (expr-> id: nextidx))
<                 (expr-> binexp: .
<                   (expr-> binexp: .
<                     (expr-> binding: self[806])
<                     (expr-> id: thelist))
<                   (expr-> id: size))))
<             (stmt->emptystmt:))))
<       (decl->function: lllinext[809]
<         (formals: 
<           (decl->formal self[809]
<             (varmode=false)
<             (type->kind=ident: lllstitr[809])))
<         (type->kind=ident: hasequals[809])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: lllinext[811])
<               (expr->[value=0] nil:
<                 type->(type->kind=<NIL>)))
<             (stmt->ifstmt: 
<               (expr-> binexp: <>
<                 (expr-> binexp: .
<                   (expr-> binding: self[812])
<                   (expr-> id: nextidx))
<                 (expr-> binexp: .
<                   (expr-> binexp: .
<                     (expr-> binding: self[812])
<                     (expr-> id: thelist))
<                   (expr-> id: size)))
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->assignstmt:
<                     (expr-> binexp: .
<                       (expr-> binding: self[813])
<                       (expr-> id: lastreturned))
<                     (expr-> binexp: .
<                       (expr-> binding: self[813])
<                       (expr-> id: nextent)))
<                   (stmt->assignstmt:
<                     (expr-> binexp: .
<                       (expr-> binding: self[814])
<                       (expr-> id: nextent))
<                     (expr-> binexp: .
<                       (expr-> binexp: .
<                         (expr-> binding: self[814])
<                         (expr-> id: nextent))
<                       (expr-> id: next)))
<                   (stmt->assignstmt:
<                     (expr-> binexp: .
<                       (expr-> binding: self[815])
<                       (expr-> id: nextidx))
<                     (expr-> binexp: +
<                       (expr-> binexp: .
<                         (expr-> binding: self[815])
<                         (expr-> id: nextidx))
<                       (expr->[value=1] int: 1
<                         type->(type->kind=integer))))
<                   (stmt->assignstmt:
<                     (expr-> binding: lllinext[816])
<                     (expr-> binexp: .
<                       (expr-> binexp: .
<                         (expr-> binding: self[816])
<                         (expr-> id: lastreturned))
<                       (expr-> id: element)))
<                   (stmt->emptystmt:))))
<             (stmt->emptystmt:))))
<       (decl->function: lllinextindex[820]
<         (formals: 
<           (decl->formal self[820]
<             (varmode=false)
<             (type->kind=ident: lllstitr[820])))
<         (type->kind=ident: integer[820])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: lllinextindex[822])
<               (expr-> binexp: .
<                 (expr-> binding: self[822])
<                 (expr-> id: nextidx)))
<             (stmt->emptystmt:))))
<       (decl->function: lllihasprevious[825]
<         (formals: 
<           (decl->formal self[825]
<             (varmode=false)
<             (type->kind=ident: lllstitr[825])))
<         (type->kind=ident: boolean[825])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: lllihasprevious[827])
<               (expr-> binexp: <>
<                 (expr-> binexp: .
<                   (expr-> binding: self[827])
<                   (expr-> id: nextidx))
<                 (expr->[value=0] int: 0
<                   type->(type->kind=integer))))
<             (stmt->emptystmt:))))
<       (decl->function: llliprevious[830]
<         (formals: 
<           (decl->formal self[830]
<             (varmode=false)
<             (type->kind=ident: lllstitr[830])))
<         (type->kind=ident: hasequals[830])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: llliprevious[832])
<               (expr->[value=0] nil:
<                 type->(type->kind=<NIL>)))
<             (stmt->ifstmt: 
<               (expr-> binexp: <>
<                 (expr-> binexp: .
<                   (expr-> binding: self[833])
<                   (expr-> id: nextidx))
<                 (expr->[value=0] int: 0
<                   type->(type->kind=integer)))
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->assignstmt:
<                     (expr-> binexp: .
<                       (expr-> binding: self[834])
<                       (expr-> id: lastreturned))
<                     (expr-> binexp: .
<                       (expr-> binexp: .
<                         (expr-> binding: self[834])
<                         (expr-> id: nextent))
<                       (expr-> id: previous)))
<                   (stmt->assignstmt:
<                     (expr-> binexp: .
<                       (expr-> binding: self[835])
<                       (expr-> id: nextent))
<                     (expr-> binexp: .
<                       (expr-> binexp: .
<                         (expr-> binding: self[835])
<                         (expr-> id: nextent))
<                       (expr-> id: previous)))
<                   (stmt->assignstmt:
<                     (expr-> binexp: .
<                       (expr-> binding: self[836])
<                       (expr-> id: nextidx))
<                     (expr-> binexp: -
<                       (expr-> binexp: .
<                         (expr-> binding: self[836])
<                         (expr-> id: nextidx))
<                       (expr->[value=1] int: 1
<                         type->(type->kind=integer))))
<                   (stmt->assignstmt:
<                     (expr-> binding: llliprevious[837])
<                     (expr-> binexp: .
<                       (expr-> binexp: .
<                         (expr-> binding: self[837])
<                         (expr-> id: lastreturned))
<                       (expr-> id: element)))
<                   (stmt->emptystmt:))))
<             (stmt->emptystmt:))))
<       (decl->function: lllipreviousindex[841]
<         (formals: 
<           (decl->formal self[841]
<             (varmode=false)
<             (type->kind=ident: lllstitr[841])))
<         (type->kind=ident: integer[841])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: lllipreviousindex[843])
<               (expr-> binexp: -
<                 (expr-> binexp: .
<                   (expr-> binding: self[843])
<                   (expr-> id: nextidx))
<                 (expr->[value=1] int: 1
<                   type->(type->kind=integer))))
<             (stmt->emptystmt:))))
<       (decl->procedure: llliremove[846]
<         (formals: 
<           (decl->formal self[846]
<             (varmode=false)
<             (type->kind=ident: lllstitr[846])))
<         (block: 
<           (decls: 
<             (decl->variable: lastnext[848]
<               (type->kind=ident: llentry[848]))
<             (decl->variable: oo[849]
<               (type->kind=ident: hasequals[849])))
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: lastnext[851])
<               (expr-> binexp: .
<                 (expr-> binexp: .
<                   (expr-> binding: self[851])
<                   (expr-> id: lastreturned))
<                 (expr-> id: next)))
<             (stmt->assignstmt:
<               (expr-> binding: oo[852])
<               (expr-> call: isMethodCall=true removeentry[852]
<                 (exprs: 
<                   (expr-> binexp: .
<                     (expr-> binding: self[852])
<                     (expr-> id: thelist))
<                   (expr-> binexp: .
<                     (expr-> binding: self[852])
<                     (expr-> id: lastreturned)))))
<             (stmt->ifstmt: 
<               (expr-> binexp: =
<                 (expr-> binexp: .
<                   (expr-> binding: self[853])
<                   (expr-> id: nextent))
<                 (expr-> binexp: .
<                   (expr-> binding: self[853])
<                   (expr-> id: lastreturned)))
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->assignstmt:
<                     (expr-> binexp: .
<                       (expr-> binding: self[854])
<                       (expr-> id: nextent))
<                     (expr-> binding: lastnext[854]))
<                   (stmt->emptystmt:)))
<               (else: 
<                 (stmt->compoundstmt:
<                   (stmts: 
<                     (stmt->assignstmt:
<                       (expr-> binexp: .
<                         (expr-> binding: self[856])
<                         (expr-> id: nextidx))
<                       (expr-> binexp: -
<                         (expr-> binexp: .
<                           (expr-> binding: self[856])
<                           (expr-> id: nextidx))
<                         (expr->[value=1] int: 1
<                           type->(type->kind=integer))))
<                     (stmt->emptystmt:)))))
<             (stmt->assignstmt:
<               (expr-> binexp: .
<                 (expr-> binding: self[858])
<                 (expr-> id: lastreturned))
<               (expr-> binexp: .
<                 (expr-> binexp: .
<                   (expr-> binding: self[858])
<                   (expr-> id: thelist))
<                 (expr-> id: header)))
<             (stmt->emptystmt:))))
<       (decl->procedure: llliset[861]
<         (formals: 
<           (decl->formal self[861]
<             (varmode=false)
<             (type->kind=ident: lllstitr[861]))
<           (decl->formal e[861]
<             (varmode=false)
<             (type->kind=ident: hasequals[861])))
<         (block: 
<           (stmts: 
<             (stmt->ifstmt: 
<               (expr-> binexp: <>
<                 (expr-> binexp: .
<                   (expr-> binding: self[863])
<                   (expr-> id: lastreturned))
<                 (expr-> binexp: .
<                   (expr-> binexp: .
<                     (expr-> binding: self[863])
<                     (expr-> id: thelist))
<                   (expr-> id: header)))
<               (stmt->compoundstmt:
<                 (stmts: 
<                   (stmt->assignstmt:
<                     (expr-> binexp: .
<                       (expr-> binexp: .
<                         (expr-> binding: self[864])
<                         (expr-> id: lastreturned))
<                       (expr-> id: element))
<                     (expr-> binding: e[864]))
<                   (stmt->emptystmt:))))
<             (stmt->emptystmt:))))
<       (decl->procedure: llliadd[868]
<         (formals: 
<           (decl->formal self[868]
<             (varmode=false)
<             (type->kind=ident: lllstitr[868]))
<           (decl->formal e[868]
<             (varmode=false)
<             (type->kind=ident: hasequals[868])))
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binexp: .
<                 (expr-> binding: self[870])
<                 (expr-> id: lastreturned))
<               (expr-> binexp: .
<                 (expr-> binexp: .
<                   (expr-> binding: self[870])
<                   (expr-> id: thelist))
<                 (expr-> id: header)))
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=true addbeforeentry[871]
<                 (exprs: 
<                   (expr-> binexp: .
<                     (expr-> binding: self[871])
<                     (expr-> id: thelist))
<                   (expr-> binding: e[871])
<                   (expr-> binexp: .
<                     (expr-> binding: self[871])
<                     (expr-> id: nextent)))))
<             (stmt->assignstmt:
<               (expr-> binexp: .
<                 (expr-> binding: self[872])
<                 (expr-> id: nextidx))
<               (expr-> binexp: +
<                 (expr-> binexp: .
<                   (expr-> binding: self[872])
<                   (expr-> id: nextidx))
<                 (expr->[value=1] int: 1
<                   type->(type->kind=integer))))
<             (stmt->emptystmt:)))))
<     (stmts: 
<       (stmt->emptystmt:))))


testparse.err:
0a1,5
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testparse.parse:
1,467d0
< (program: 
<   (decls: 
<     (decl->program: tester[1]))
<   (block: 
<     (decls: 
<       (decl->const: arraysize[4]
<         (expr->[value=10] int: 10
<           type->(type->kind=integer)))
<       (decl->type: recordtype[6]
<         (type->kind=record:
<           (fields: 
<             (decl->field: val[7]
<               (type->kind=ident: integer[7]))
<             (decl->field: use[8]
<               (type->kind=ident: boolean[8])))))
<       (decl->type: ptr[10]
<         (type->kind=pointer:
<           ))
<       (decl->type: node[11]
<         (type->kind=record:
<           (fields: 
<             (decl->field: val[12]
<               (type->kind=ident: integer[12]))
<             (decl->field: prev[13]
<               (type->kind=ident: ptr[14]))
<             (decl->field: next[14]
<               (type->kind=ident: ptr[14])))))
<       (decl->type: week[16]
<         (type->kind=subrange:
<           (expr->[value=0] int: 0
<             type->(type->kind=integer))
<           (expr->[value=6] int: 6
<             type->(type->kind=integer))))
<       (decl->const: sunday[18]
<         (expr->[value=0] int: 0
<           type->(type->kind=integer)))
<       (decl->const: monday[19]
<         (expr->[value=1] int: 1
<           type->(type->kind=integer)))
<       (decl->const: tuesday[20]
<         (expr->[value=2] int: 2
<           type->(type->kind=integer)))
<       (decl->const: wednesday[21]
<         (expr->[value=3] int: 3
<           type->(type->kind=integer)))
<       (decl->const: thursday[22]
<         (expr->[value=4] int: 4
<           type->(type->kind=integer)))
<       (decl->const: friday[23]
<         (expr->[value=5] int: 5
<           type->(type->kind=integer)))
<       (decl->const: saturday[24]
<         (expr->[value=6] int: 6
<           type->(type->kind=integer)))
<       (decl->variable: day[26]
<         (type->kind=ident: integer[26]))
<       (decl->variable: size[26]
<         (type->kind=ident: integer[26]))
<       (decl->variable: i[27]
<         (type->kind=subrange:
<           (expr->[value=1] int: 1
<             type->(type->kind=integer))
<           (expr-> binding: arraysize[27])))
<       (decl->variable: j[27]
<         (type->kind=subrange:
<           (expr->[value=1] int: 1
<             type->(type->kind=integer))
<           (expr-> binding: arraysize[27])))
<       (decl->variable: list[28]
<         (type->kind=array:(type->kind=subrange:
<             (expr->[value=1] int: 1
<               type->(type->kind=integer))
<             (expr-> binding: arraysize[28]))
<           (type->kind=ident: recordtype[28])))
<       (decl->variable: tarr[29]
<         (type->kind=array:(type->kind=subrange:
<             (expr->[value=1] int: 1
<               type->(type->kind=integer))
<             (expr-> binding: arraysize[29]))
<           (type->kind=array:(type->kind=subrange:
<               (expr->[value=1] int: 1
<                 type->(type->kind=integer))
<               (expr->[value=5] int: 5
<                 type->(type->kind=integer)))
<             (type->kind=ident: integer[29]))))
<       (decl->variable: weekday[30]
<         (type->kind=ident: week[30]))
<       (decl->function: double[31]
<         (formals: 
<           (decl->formal x[31]
<             (varmode=true)
<             (type->kind=ident: integer[31])))
<         (type->kind=ident: integer[31])
<         (block: 
<           (decls: 
<             (decl->variable: i[32]
<               (type->kind=ident: integer[32]))
<             (decl->variable: j[32]
<               (type->kind=ident: integer[32]))
<             (decl->variable: k[32]
<               (type->kind=ident: integer[32]))
<             (decl->variable: b[33]
<               (type->kind=ident: boolean[33])))
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: i[35])
<               (expr-> binexp: *
<                 (expr->[value=2] int: 2
<                   type->(type->kind=integer))
<                 (expr-> binding: arraysize[35])))
<             (stmt->assignstmt:
<               (expr-> binding: j[36])
<               (expr-> unexp: -
<                 (expr-> binding: arraysize[36])))
<             (stmt->assignstmt:
<               (expr-> binding: k[37])
<               (expr-> binexp: div
<                 (expr-> binexp: +
<                   (expr-> binding: i[37])
<                   (expr-> binding: j[37]))
<                 (expr-> binding: arraysize[37])))
<             (stmt->assignstmt:
<               (expr-> binding: b[38])
<               (expr-> binexp: >
<                 (expr-> binding: i[38])
<                 (expr-> binding: j[38])))
<             (stmt->assignstmt:
<               (expr-> binding: double[39])
<               (expr-> binexp: *
<                 (expr-> binding: x[39])
<                 (expr-> binding: i[39])))
<             (stmt->emptystmt:)))))
<     (stmts: 
<       (stmt->forstmt:i[42]
<         (expr->[value=1] int: 1
<           type->(type->kind=integer))
<         (expr-> binding: arraysize[42])
<         (upward:true)
<         (stmt->forstmt:j[43]
<           (expr->[value=1] int: 1
<             type->(type->kind=integer))
<           (expr->[value=5] int: 5
<             type->(type->kind=integer))
<           (upward:true)
<           (stmt->assignstmt:
<             (expr-> binexp: [
<               (expr-> binexp: [
<                 (expr-> binding: tarr[44])
<                 (expr-> binding: i[44]))
<               (expr-> binding: j[44]))
<             (expr->[value=0] int: 0
<               type->(type->kind=integer)))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false write[46]
<           (exprs: 
<             (expr->[value='Enter integer between 1 and 10: '] string: 'Enter integer between 1 and 10: '
<               type->(type->kind=string)))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false readln[47]
<           (exprs: 
<             (expr-> binding: size[47]))))
<       (stmt->ifstmt: 
<         (expr-> binexp: or
<           (expr-> binexp: <
<             (expr-> binding: size[48])
<             (expr->[value=1] int: 1
<               type->(type->kind=integer)))
<           (expr-> binexp: >
<             (expr-> binding: size[48])
<             (expr->[value=10] int: 10
<               type->(type->kind=integer))))
<         (stmt->compoundstmt:
<           (stmts: 
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=false writeln[49]
<                 (exprs: 
<                   (expr->[value='Invalid'] string: 'Invalid'
<                     type->(type->kind=string)))))
<             (stmt->assignstmt:
<               (expr-> binding: size[50])
<               (expr->[value=5] int: 5
<                 type->(type->kind=integer)))
<             (stmt->emptystmt:)))
<         (else: 
<           (stmt->callstmt:
<             (expr-> call: isMethodCall=false writeln[53]
<               (exprs: 
<                 (expr->[value='Valid'] string: 'Valid'
<                   type->(type->kind=string)))))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false write[54]
<           (exprs: 
<             (expr->[value='Enter date between Sunday and Saturday[0..6]: '] string: 'Enter date between Sunday and Saturday[0..6]: '
<               type->(type->kind=string)))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false readln[55]
<           (exprs: 
<             (expr-> binding: day[55]))))
<       (stmt->casestmt:
<         (expr-> binding: day[56])
<         (caselist: 
<           (labellist: 
<             (expr->[value=0] int: 0
<               type->(type->kind=integer)))
<           (stmt->compoundstmt:
<             (stmts: 
<               (stmt->assignstmt:
<                 (expr-> binding: weekday[57])
<                 (expr-> binding: sunday[57]))
<               (stmt->callstmt:
<                 (expr-> call: isMethodCall=false writeln[57]
<                   (exprs: 
<                     (expr->[value='Sunday'] string: 'Sunday'
<                       type->(type->kind=string)))))
<               (stmt->emptystmt:)))
<           (labellist: 
<             (expr->[value=1] int: 1
<               type->(type->kind=integer)))
<           (stmt->compoundstmt:
<             (stmts: 
<               (stmt->assignstmt:
<                 (expr-> binding: weekday[58])
<                 (expr-> binding: monday[58]))
<               (stmt->callstmt:
<                 (expr-> call: isMethodCall=false writeln[58]
<                   (exprs: 
<                     (expr->[value='Monday'] string: 'Monday'
<                       type->(type->kind=string)))))
<               (stmt->emptystmt:)))
<           (labellist: 
<             (expr->[value=2] int: 2
<               type->(type->kind=integer)))
<           (stmt->compoundstmt:
<             (stmts: 
<               (stmt->assignstmt:
<                 (expr-> binding: weekday[59])
<                 (expr-> binding: tuesday[59]))
<               (stmt->callstmt:
<                 (expr-> call: isMethodCall=false writeln[59]
<                   (exprs: 
<                     (expr->[value='Tuesday'] string: 'Tuesday'
<                       type->(type->kind=string)))))
<               (stmt->emptystmt:)))
<           (labellist: 
<             (expr->[value=3] int: 3
<               type->(type->kind=integer)))
<           (stmt->compoundstmt:
<             (stmts: 
<               (stmt->assignstmt:
<                 (expr-> binding: weekday[60])
<                 (expr-> binding: wednesday[60]))
<               (stmt->callstmt:
<                 (expr-> call: isMethodCall=false writeln[60]
<                   (exprs: 
<                     (expr->[value='Wednesday'] string: 'Wednesday'
<                       type->(type->kind=string)))))
<               (stmt->emptystmt:)))
<           (labellist: 
<             (expr->[value=4] int: 4
<               type->(type->kind=integer)))
<           (stmt->compoundstmt:
<             (stmts: 
<               (stmt->assignstmt:
<                 (expr-> binding: weekday[61])
<                 (expr-> binding: thursday[61]))
<               (stmt->callstmt:
<                 (expr-> call: isMethodCall=false writeln[61]
<                   (exprs: 
<                     (expr->[value='Thursday'] string: 'Thursday'
<                       type->(type->kind=string)))))
<               (stmt->emptystmt:)))
<           (labellist: 
<             (expr->[value=5] int: 5
<               type->(type->kind=integer)))
<           (stmt->compoundstmt:
<             (stmts: 
<               (stmt->assignstmt:
<                 (expr-> binding: weekday[62])
<                 (expr-> binding: friday[62]))
<               (stmt->callstmt:
<                 (expr-> call: isMethodCall=false writeln[62]
<                   (exprs: 
<                     (expr->[value='Friday'] string: 'Friday'
<                       type->(type->kind=string)))))
<               (stmt->emptystmt:)))
<           (labellist: 
<             (expr->[value=6] int: 6
<               type->(type->kind=integer)))
<           (stmt->compoundstmt:
<             (stmts: 
<               (stmt->assignstmt:
<                 (expr-> binding: weekday[63])
<                 (expr-> binding: saturday[63]))
<               (stmt->callstmt:
<                 (expr-> call: isMethodCall=false writeln[63]
<                   (exprs: 
<                     (expr->[value='Saturday'] string: 'Saturday'
<                       type->(type->kind=string)))))
<               (stmt->emptystmt:)))))
<       (stmt->casestmt:
<         (expr-> binding: weekday[65])
<         (caselist: 
<           (labellist: 
<             (expr-> binding: monday[66])
<             (expr-> binding: wednesday[67])
<             (expr-> binding: friday[68]))
<           (stmt->callstmt:
<             (expr-> call: isMethodCall=false writeln[68]
<               (exprs: 
<                 (expr->[value='Work hours : 8:00am - 5:00pm'] string: 'Work hours : 8:00am - 5:00pm'
<                   type->(type->kind=string)))))
<           (labellist: 
<             (expr-> binding: tuesday[69])
<             (expr-> binding: thursday[70]))
<           (stmt->callstmt:
<             (expr-> call: isMethodCall=false writeln[70]
<               (exprs: 
<                 (expr->[value='Work hours : 8:00am - 1:00pm'] string: 'Work hours : 8:00am - 1:00pm'
<                   type->(type->kind=string)))))
<           (labellist: 
<             (expr-> binding: saturday[71])
<             (expr-> binding: sunday[72]))
<           (stmt->callstmt:
<             (expr-> call: isMethodCall=false writeln[72]
<               (exprs: 
<                 (expr->[value='No work hours'] string: 'No work hours'
<                   type->(type->kind=string)))))))
<       (stmt->forstmt:i[74]
<         (expr->[value=1] int: 1
<           type->(type->kind=integer))
<         (expr-> binding: size[74])
<         (upward:true)
<         (stmt->compoundstmt:
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binexp: .
<                 (expr-> binexp: [
<                   (expr-> binding: list[76])
<                   (expr-> binding: i[76]))
<                 (expr-> id: val))
<               (expr-> binding: i[76]))
<             (stmt->assignstmt:
<               (expr-> binexp: .
<                 (expr-> binexp: [
<                   (expr-> binding: list[77])
<                   (expr-> binding: i[77]))
<                 (expr-> id: use))
<               (expr-> binding: true[77]))
<             (stmt->emptystmt:))))
<       (stmt->assignstmt:
<         (expr-> binding: i[79])
<         (expr->[value=1] int: 1
<           type->(type->kind=integer)))
<       (stmt->repeatstmt:
<         (expr-> binexp: >=
<           (expr-> binding: i[84])
<           (expr->[value=10] int: 10
<             type->(type->kind=integer)))
<         (stmts: 
<           (stmt->assignstmt:
<             (expr-> binexp: .
<               (expr-> binexp: [
<                 (expr-> binding: list[81])
<                 (expr-> binding: i[81]))
<               (expr-> id: val))
<             (expr->[value=0] int: 0
<               type->(type->kind=integer)))
<           (stmt->assignstmt:
<             (expr-> binexp: .
<               (expr-> binexp: [
<                 (expr-> binding: list[82])
<                 (expr-> binding: i[82]))
<               (expr-> id: use))
<             (expr-> binding: false[82]))
<           (stmt->assignstmt:
<             (expr-> binding: i[83])
<             (expr-> binexp: +
<               (expr-> binding: i[83])
<               (expr->[value=1] int: 1
<                 type->(type->kind=integer))))
<           (stmt->emptystmt:)))
<       (stmt->assignstmt:
<         (expr-> binding: i[85])
<         (expr->[value=1] int: 1
<           type->(type->kind=integer)))
<       (stmt->whilestmt:
<         (expr-> binexp: <>
<           (expr-> binexp: .
<             (expr-> binexp: [
<               (expr-> binding: list[86])
<               (expr-> binding: i[86]))
<             (expr-> id: val))
<           (expr->[value=0] int: 0
<             type->(type->kind=integer)))
<         (stmt->compoundstmt:
<           (stmts: 
<             (stmt->ifstmt: 
<               (expr-> binexp: =
<                 (expr-> binding: i[88])
<                 (expr->[value=1] int: 1
<                   type->(type->kind=integer)))
<               (stmt->callstmt:
<                 (expr-> call: isMethodCall=false writeln[89]
<                   (exprs: 
<                     (expr->[value=1] int: 1
<                       type->(type->kind=integer)))))
<               (else: 
<                 (stmt->ifstmt: 
<                   (expr-> binexp: <
<                     (expr-> binding: i[90])
<                     (expr->[value=5] int: 5
<                       type->(type->kind=integer)))
<                   (stmt->compoundstmt:
<                     (stmts: 
<                       (stmt->assignstmt:
<                         (expr-> binexp: .
<                           (expr-> binexp: [
<                             (expr-> binding: list[92])
<                             (expr-> binding: i[92]))
<                           (expr-> id: val))
<                         (expr-> binexp: +
<                           (expr-> binexp: .
<                             (expr-> binexp: [
<                               (expr-> binding: list[92])
<                               (expr-> binding: i[92]))
<                             (expr-> id: val))
<                           (expr-> call: isMethodCall=false double[92]
<                             (exprs: 
<                               (expr-> binexp: .
<                                 (expr-> binexp: [
<                                   (expr-> binding: list[92])
<                                   (expr-> binding: i[92]))
<                                 (expr-> id: val))))))
<                       (stmt->assignstmt:
<                         (expr-> binexp: .
<                           (expr-> binexp: [
<                             (expr-> binding: list[93])
<                             (expr-> binding: i[93]))
<                           (expr-> id: use))
<                         (expr-> unexp: not
<                           (expr-> binexp: .
<                             (expr-> binexp: [
<                               (expr-> binding: list[93])
<                               (expr-> binding: i[93]))
<                             (expr-> id: use))))
<                       (stmt->callstmt:
<                         (expr-> call: isMethodCall=false writeln[94]
<                           (exprs: 
<                             (expr-> binding: i[94])
<                             (expr->[value='<5'] string: '<5'
<                               type->(type->kind=string)))))
<                       (stmt->emptystmt:)))
<                   (else: 
<                     (stmt->callstmt:
<                       (expr-> call: isMethodCall=false writeln[97]
<                         (exprs: 
<                           (expr-> binding: i[97])
<                           (expr->[value='>=5'] string: '>=5'
<                             type->(type->kind=string)))))))))
<             (stmt->assignstmt:
<               (expr-> binding: i[98])
<               (expr-> binexp: +
<                 (expr-> binding: i[98])
<                 (expr->[value=1] int: 1
<                   type->(type->kind=integer))))
<             (stmt->emptystmt:))))
<       (stmt->emptystmt:))))


testprocdecl.err:
0a1,5
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testprocdecl.parse:
1,124d0
< (program: 
<   (decls: 
<     (decl->program: testprocdecl[1]))
<   (block: 
<     (decls: 
<       (decl->type: t1[3]
<         (type->kind=ident: integer[3]))
<       (decl->procedure: p1[4]
<         (formals: 
<           (decl->formal a[4]
<             (varmode=false)
<             (type->kind=ident: a[4])))
<         (block: 
<           (stmts: 
<             (stmt->emptystmt:))))
<       (decl->procedure: p2[5]
<         (formals: 
<           (decl->formal t1[5]
<             (varmode=false)
<             (type->kind=ident: t1[5])))
<         (block: 
<           (stmts: 
<             (stmt->emptystmt:))))
<       (decl->procedure: p3[6]
<         (formals: 
<           (decl->formal x[6]
<             (varmode=false)
<             (type->kind=ident: y[6])))
<         (block: 
<           (stmts: 
<             (stmt->emptystmt:))))
<       (decl->procedure: p4[7]
<         (formals: 
<           (decl->formal x[7]
<             (varmode=false)
<             (type->kind=ident: t2[7])))
<         (block: 
<           (stmts: 
<             (stmt->emptystmt:))))
<       (decl->function: f1[8]
<         (formals: 
<           (decl->formal a[8]
<             (varmode=false)
<             (type->kind=ident: a[8])))
<         (type->kind=ident: integer[8])
<         (block: 
<           (stmts: 
<             (stmt->emptystmt:))))
<       (decl->function: f2[9]
<         (formals: 
<           (decl->formal t1[9]
<             (varmode=false)
<             (type->kind=ident: t1[9])))
<         (type->kind=ident: integer[9])
<         (block: 
<           (stmts: 
<             (stmt->emptystmt:))))
<       (decl->function: f3[10]
<         (formals: 
<           (decl->formal x[10]
<             (varmode=false)
<             (type->kind=ident: y[10])))
<         (type->kind=ident: integer[10])
<         (block: 
<           (stmts: 
<             (stmt->emptystmt:))))
<       (decl->function: f4[11]
<         (formals: 
<           (decl->formal x[11]
<             (varmode=false)
<             (type->kind=ident: t2[11])))
<         (type->kind=ident: integer[11])
<         (block: 
<           (stmts: 
<             (stmt->emptystmt:))))
<       (decl->function: f5[12]
<         (formals: 
<           (decl->formal x[12]
<             (varmode=false)
<             (type->kind=ident: integer[12])))
<         (type->kind=ident: x[12])
<         (block: 
<           (stmts: 
<             (stmt->emptystmt:))))
<       (decl->function: f6[13]
<         (formals: 
<           (decl->formal x[13]
<             (varmode=false)
<             (type->kind=ident: integer[13])))
<         (type->kind=ident: y[13])
<         (block: 
<           (stmts: 
<             (stmt->emptystmt:))))
<       (decl->function: f7[14]
<         (formals: 
<           (decl->formal x[14]
<             (varmode=false)
<             (type->kind=ident: integer[14])))
<         (type->kind=ident: t1[14])
<         (block: 
<           (stmts: 
<             (stmt->emptystmt:))))
<       (decl->function: f8[15]
<         (formals: 
<           (decl->formal t1[15]
<             (varmode=false)
<             (type->kind=ident: integer[15])))
<         (type->kind=ident: t1[15])
<         (block: 
<           (stmts: 
<             (stmt->emptystmt:))))
<       (decl->function: f9[16]
<         (formals: 
<           (decl->formal x[16]
<             (varmode=false)
<             (type->kind=ident: integer[16])))
<         (type->kind=ident: t2[16])
<         (block: 
<           (stmts: 
<             (stmt->emptystmt:))))
<       (decl->type: t2[18]
<         (type->kind=ident: boolean[18])))
<     (stmts: 
<       (stmt->emptystmt:))))


testptr.err:
0a1,5
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testptr.parse:
1,120d0
< (program: 
<   (decls: 
<     (decl->program: testptr[1]))
<   (block: 
<     (decls: 
<       (decl->type: r1[3]
<         (type->kind=record:
<           (fields: 
<             (decl->field: x[3]
<               (type->kind=ident: integer[3]))
<             (decl->field: y[3]
<               (type->kind=ident: integer[3])))))
<       (decl->type: p1[4]
<         (type->kind=pointer:
<           ))
<       (decl->type: p2[5]
<         (type->kind=pointer:
<           ))
<       (decl->type: r2[6]
<         (type->kind=record:
<           (fields: 
<             (decl->field: this[6]
<               (type->kind=ident: integer[6]))
<             (decl->field: rest[6]
<               (type->kind=ident: p2[6])))))
<       (decl->variable: p[8]
<         (type->kind=ident: p1[8]))
<       (decl->variable: q[9]
<         (type->kind=ident: p2[9]))
<       (decl->variable: qq[9]
<         (type->kind=ident: p2[9]))
<       (decl->variable: i[10]
<         (type->kind=ident: integer[10])))
<     (stmts: 
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false new[12]
<           (exprs: 
<             (expr-> binding: p[12]))))
<       (stmt->assignstmt:
<         (expr-> binexp: .
<           (expr-> unexp: ^
<             (expr-> binding: p[13]))
<           (expr-> id: x))
<         (expr->[value=1] int: 1
<           type->(type->kind=integer)))
<       (stmt->assignstmt:
<         (expr-> binexp: .
<           (expr-> unexp: ^
<             (expr-> binding: p[14]))
<           (expr-> id: y))
<         (expr->[value=2] int: 2
<           type->(type->kind=integer)))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[15]
<           (exprs: 
<             (expr-> binexp: .
<               (expr-> unexp: ^
<                 (expr-> binding: p[15]))
<               (expr-> id: x))
<             (expr-> binexp: .
<               (expr-> unexp: ^
<                 (expr-> binding: p[15]))
<               (expr-> id: y)))))
<       (stmt->assignstmt:
<         (expr-> binding: q[16])
<         (expr->[value=0] nil:
<           type->(type->kind=<NIL>)))
<       (stmt->forstmt:i[17]
<         (expr->[value=10] int: 10
<           type->(type->kind=integer))
<         (expr->[value=1] int: 1
<           type->(type->kind=integer))
<         (upward:false)
<         (stmt->compoundstmt:
<           (stmts: 
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=false new[18]
<                 (exprs: 
<                   (expr-> binding: qq[18]))))
<             (stmt->assignstmt:
<               (expr-> binexp: .
<                 (expr-> unexp: ^
<                   (expr-> binding: qq[19]))
<                 (expr-> id: this))
<               (expr-> binding: i[19]))
<             (stmt->assignstmt:
<               (expr-> binexp: .
<                 (expr-> unexp: ^
<                   (expr-> binding: qq[20]))
<                 (expr-> id: rest))
<               (expr-> binding: q[20]))
<             (stmt->assignstmt:
<               (expr-> binding: q[21])
<               (expr-> binding: qq[21]))
<             (stmt->emptystmt:))))
<       (stmt->assignstmt:
<         (expr-> binding: qq[23])
<         (expr-> binding: q[23]))
<       (stmt->whilestmt:
<         (expr-> binexp: <>
<           (expr-> binding: qq[24])
<           (expr->[value=0] nil:
<             type->(type->kind=<NIL>)))
<         (stmt->compoundstmt:
<           (stmts: 
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=false writeln[25]
<                 (exprs: 
<                   (expr-> binexp: .
<                     (expr-> unexp: ^
<                       (expr-> binding: qq[25]))
<                     (expr-> id: this)))))
<             (stmt->assignstmt:
<               (expr-> binding: qq[26])
<               (expr-> binexp: .
<                 (expr-> unexp: ^
<                   (expr-> binding: qq[26]))
<                 (expr-> id: rest)))
<             (stmt->emptystmt:))))
<       (stmt->emptystmt:))))


testptrptr.err:
0a1,5
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testptrptr.parse:
1,43d0
< (program: 
<   (decls: 
<     (decl->program: testptrptr[1]))
<   (block: 
<     (decls: 
<       (decl->type: pi[3]
<         (type->kind=pointer:
<           ))
<       (decl->type: ppi[4]
<         (type->kind=pointer:
<           ))
<       (decl->variable: p[5]
<         (type->kind=ident: pi[5]))
<       (decl->variable: pp[5]
<         (type->kind=ident: ppi[5])))
<     (stmts: 
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false new[7]
<           (exprs: 
<             (expr-> binding: p[7]))))
<       (stmt->assignstmt:
<         (expr-> unexp: ^
<           (expr-> binding: p[8]))
<         (expr->[value=3] int: 3
<           type->(type->kind=integer)))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false new[9]
<           (exprs: 
<             (expr-> binding: pp[9]))))
<       (stmt->assignstmt:
<         (expr-> unexp: ^
<           (expr-> binding: pp[10]))
<         (expr-> binding: p[10]))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[11]
<           (exprs: 
<             (expr-> binexp: +
<               (expr-> unexp: ^
<                 (expr-> unexp: ^
<                   (expr-> binding: pp[11])))
<               (expr->[value=5] int: 5
<                 type->(type->kind=integer))))))
<       (stmt->emptystmt:))))


testptrptr2.err:
0a1,5
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testptrptr2.parse:
1,363d0
< (program: 
<   (decls: 
<     (decl->program: testptrptr2[1]))
<   (block: 
<     (decls: 
<       (decl->type: pi[3]
<         (type->kind=pointer:
<           ))
<       (decl->type: ppi[4]
<         (type->kind=pointer:
<           ))
<       (decl->variable: i[5]
<         (type->kind=ident: integer[5]))
<       (decl->variable: p[5]
<         (type->kind=ident: pi[5]))
<       (decl->variable: q[5]
<         (type->kind=ident: pi[5]))
<       (decl->variable: pp[5]
<         (type->kind=ident: ppi[5]))
<       (decl->variable: qq[5]
<         (type->kind=ident: ppi[5]))
<       (decl->procedure: show[7]
<         (block: 
<           (stmts: 
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=false write[9]
<                 (exprs: 
<                   (expr->[value='  '] string: '  '
<                     type->(type->kind=string)))))
<             (stmt->ifstmt: 
<               (expr-> binexp: =
<                 (expr-> binding: pp[10])
<                 (expr->[value=0] nil:
<                   type->(type->kind=<NIL>)))
<               (stmt->callstmt:
<                 (expr-> call: isMethodCall=false write[11]
<                   (exprs: 
<                     (expr->[value='pp = NIL'] string: 'pp = NIL'
<                       type->(type->kind=string)))))
<               (else: 
<                 (stmt->ifstmt: 
<                   (expr-> binexp: =
<                     (expr-> unexp: ^
<                       (expr-> binding: pp[12]))
<                     (expr->[value=0] nil:
<                       type->(type->kind=<NIL>)))
<                   (stmt->callstmt:
<                     (expr-> call: isMethodCall=false write[13]
<                       (exprs: 
<                         (expr->[value='pp^ = NIL'] string: 'pp^ = NIL'
<                           type->(type->kind=string)))))
<                   (else: 
<                     (stmt->callstmt:
<                       (expr-> call: isMethodCall=false write[15]
<                         (exprs: 
<                           (expr->[value='pp^^ = '] string: 'pp^^ = '
<                             type->(type->kind=string))
<                           (expr-> unexp: ^
<                             (expr-> unexp: ^
<                               (expr-> binding: pp[15]))))))))))
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=false write[16]
<                 (exprs: 
<                   (expr->[value='; '] string: '; '
<                     type->(type->kind=string)))))
<             (stmt->ifstmt: 
<               (expr-> binexp: =
<                 (expr-> binding: qq[17])
<                 (expr->[value=0] nil:
<                   type->(type->kind=<NIL>)))
<               (stmt->callstmt:
<                 (expr-> call: isMethodCall=false write[18]
<                   (exprs: 
<                     (expr->[value='qq = NIL'] string: 'qq = NIL'
<                       type->(type->kind=string)))))
<               (else: 
<                 (stmt->ifstmt: 
<                   (expr-> binexp: =
<                     (expr-> unexp: ^
<                       (expr-> binding: qq[19]))
<                     (expr->[value=0] nil:
<                       type->(type->kind=<NIL>)))
<                   (stmt->callstmt:
<                     (expr-> call: isMethodCall=false write[20]
<                       (exprs: 
<                         (expr->[value='qq^ = NIL'] string: 'qq^ = NIL'
<                           type->(type->kind=string)))))
<                   (else: 
<                     (stmt->callstmt:
<                       (expr-> call: isMethodCall=false write[22]
<                         (exprs: 
<                           (expr->[value='qq^^ = '] string: 'qq^^ = '
<                             type->(type->kind=string))
<                           (expr-> unexp: ^
<                             (expr-> unexp: ^
<                               (expr-> binding: qq[22]))))))))))
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=false write[23]
<                 (exprs: 
<                   (expr->[value='; '] string: '; '
<                     type->(type->kind=string)))))
<             (stmt->ifstmt: 
<               (expr-> binexp: =
<                 (expr-> binding: p[24])
<                 (expr->[value=0] nil:
<                   type->(type->kind=<NIL>)))
<               (stmt->callstmt:
<                 (expr-> call: isMethodCall=false write[25]
<                   (exprs: 
<                     (expr->[value='p = NIL'] string: 'p = NIL'
<                       type->(type->kind=string)))))
<               (else: 
<                 (stmt->callstmt:
<                   (expr-> call: isMethodCall=false write[27]
<                     (exprs: 
<                       (expr->[value='p^ = '] string: 'p^ = '
<                         type->(type->kind=string))
<                       (expr-> unexp: ^
<                         (expr-> binding: p[27])))))))
<             (stmt->callstmt:
<               (expr-> call: isMethodCall=false write[28]
<                 (exprs: 
<                   (expr->[value='; '] string: '; '
<                     type->(type->kind=string)))))
<             (stmt->ifstmt: 
<               (expr-> binexp: =
<                 (expr-> binding: q[29])
<                 (expr->[value=0] nil:
<                   type->(type->kind=<NIL>)))
<               (stmt->callstmt:
<                 (expr-> call: isMethodCall=false write[30]
<                   (exprs: 
<                     (expr->[value='q = NIL'] string: 'q = NIL'
<                       type->(type->kind=string)))))
<               (else: 
<                 (stmt->callstmt:
<                   (expr-> call: isMethodCall=false write[32]
<                     (exprs: 
<                       (expr->[value='q^ = '] string: 'q^ = '
<                         type->(type->kind=string))
<                       (expr-> unexp: ^
<                         (expr-> binding: q[32])))))))
<             (stmt->callstmt:
<               (expr-> binding: writeln[33]))
<             (stmt->emptystmt:)))))
<     (stmts: 
<       (stmt->assignstmt:
<         (expr-> binding: pp[37])
<         (expr->[value=0] nil:
<           type->(type->kind=<NIL>)))
<       (stmt->assignstmt:
<         (expr-> binding: qq[38])
<         (expr->[value=0] nil:
<           type->(type->kind=<NIL>)))
<       (stmt->assignstmt:
<         (expr-> binding: p[39])
<         (expr->[value=0] nil:
<           type->(type->kind=<NIL>)))
<       (stmt->assignstmt:
<         (expr-> binding: q[40])
<         (expr->[value=0] nil:
<           type->(type->kind=<NIL>)))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[41]
<           (exprs: 
<             (expr->[value='p, q, pp, qq are NIL:'] string: 'p, q, pp, qq are NIL:'
<               type->(type->kind=string)))))
<       (stmt->callstmt:
<         (expr-> binding: show[42]))
<       (stmt->assignstmt:
<         (expr-> binding: p[44])
<         (expr-> binding: q[44]))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[45]
<           (exprs: 
<             (expr->[value='after p := q:'] string: 'after p := q:'
<               type->(type->kind=string)))))
<       (stmt->callstmt:
<         (expr-> binding: show[46]))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false new[48]
<           (exprs: 
<             (expr-> binding: q[48]))))
<       (stmt->assignstmt:
<         (expr-> unexp: ^
<           (expr-> binding: q[49]))
<         (expr->[value=0] int: 0
<           type->(type->kind=integer)))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[50]
<           (exprs: 
<             (expr->[value='after new (q) and q^ := 0:'] string: 'after new (q) and q^ := 0:'
<               type->(type->kind=string)))))
<       (stmt->callstmt:
<         (expr-> binding: show[51]))
<       (stmt->assignstmt:
<         (expr-> binding: p[53])
<         (expr-> binding: q[53]))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[54]
<           (exprs: 
<             (expr->[value='after p := q:'] string: 'after p := q:'
<               type->(type->kind=string)))))
<       (stmt->callstmt:
<         (expr-> binding: show[55]))
<       (stmt->assignstmt:
<         (expr-> unexp: ^
<           (expr-> binding: p[57]))
<         (expr->[value=1] int: 1
<           type->(type->kind=integer)))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[58]
<           (exprs: 
<             (expr->[value='after p^ := 1:'] string: 'after p^ := 1:'
<               type->(type->kind=string)))))
<       (stmt->callstmt:
<         (expr-> binding: show[59]))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false new[61]
<           (exprs: 
<             (expr-> binding: q[61]))))
<       (stmt->assignstmt:
<         (expr-> unexp: ^
<           (expr-> binding: q[62]))
<         (expr->[value=0] int: 0
<           type->(type->kind=integer)))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[63]
<           (exprs: 
<             (expr->[value='after new (q) and q^ := 0:'] string: 'after new (q) and q^ := 0:'
<               type->(type->kind=string)))))
<       (stmt->callstmt:
<         (expr-> binding: show[64]))
<       (stmt->assignstmt:
<         (expr-> binding: i[66])
<         (expr->[value=2] int: 2
<           type->(type->kind=integer)))
<       (stmt->assignstmt:
<         (expr-> unexp: ^
<           (expr-> binding: p[67]))
<         (expr-> binding: i[67]))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[68]
<           (exprs: 
<             (expr->[value='after i := 2, p^ := i:'] string: 'after i := 2, p^ := i:'
<               type->(type->kind=string)))))
<       (stmt->callstmt:
<         (expr-> binding: show[69]))
<       (stmt->assignstmt:
<         (expr-> unexp: ^
<           (expr-> binding: q[71]))
<         (expr->[value=3] int: 3
<           type->(type->kind=integer)))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[72]
<           (exprs: 
<             (expr->[value='after q^ := 3:'] string: 'after q^ := 3:'
<               type->(type->kind=string)))))
<       (stmt->callstmt:
<         (expr-> binding: show[73]))
<       (stmt->assignstmt:
<         (expr-> unexp: ^
<           (expr-> binding: p[75]))
<         (expr-> unexp: ^
<           (expr-> binding: q[75])))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[76]
<           (exprs: 
<             (expr->[value='after p^ := q^:'] string: 'after p^ := q^:'
<               type->(type->kind=string)))))
<       (stmt->callstmt:
<         (expr-> binding: show[77]))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false new[79]
<           (exprs: 
<             (expr-> binding: pp[79]))))
<       (stmt->assignstmt:
<         (expr-> unexp: ^
<           (expr-> binding: pp[80]))
<         (expr->[value=0] nil:
<           type->(type->kind=<NIL>)))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[81]
<           (exprs: 
<             (expr->[value='after new (pp), pp^ := NIL:'] string: 'after new (pp), pp^ := NIL:'
<               type->(type->kind=string)))))
<       (stmt->callstmt:
<         (expr-> binding: show[82]))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false new[84]
<           (exprs: 
<             (expr-> binding: qq[84]))))
<       (stmt->assignstmt:
<         (expr-> unexp: ^
<           (expr-> binding: qq[85]))
<         (expr->[value=0] nil:
<           type->(type->kind=<NIL>)))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[86]
<           (exprs: 
<             (expr->[value='after new (qq), qq^ := NIL:'] string: 'after new (qq), qq^ := NIL:'
<               type->(type->kind=string)))))
<       (stmt->callstmt:
<         (expr-> binding: show[87]))
<       (stmt->assignstmt:
<         (expr-> unexp: ^
<           (expr-> binding: pp[89]))
<         (expr-> binding: p[89]))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[90]
<           (exprs: 
<             (expr->[value='after pp^ := p:'] string: 'after pp^ := p:'
<               type->(type->kind=string)))))
<       (stmt->callstmt:
<         (expr-> binding: show[91]))
<       (stmt->assignstmt:
<         (expr-> unexp: ^
<           (expr-> binding: qq[93]))
<         (expr-> binding: q[93]))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[94]
<           (exprs: 
<             (expr->[value='after qq^ := q:'] string: 'after qq^ := q:'
<               type->(type->kind=string)))))
<       (stmt->callstmt:
<         (expr-> binding: show[95]))
<       (stmt->assignstmt:
<         (expr-> unexp: ^
<           (expr-> unexp: ^
<             (expr-> binding: pp[97])))
<         (expr->[value=4] int: 4
<           type->(type->kind=integer)))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[98]
<           (exprs: 
<             (expr->[value='after pp^^ := 4:'] string: 'after pp^^ := 4:'
<               type->(type->kind=string)))))
<       (stmt->callstmt:
<         (expr-> binding: show[99]))
<       (stmt->assignstmt:
<         (expr-> binding: qq[101])
<         (expr-> binding: pp[101]))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[102]
<           (exprs: 
<             (expr->[value='after qq := pp:'] string: 'after qq := pp:'
<               type->(type->kind=string)))))
<       (stmt->callstmt:
<         (expr-> binding: show[103]))
<       (stmt->assignstmt:
<         (expr-> unexp: ^
<           (expr-> unexp: ^
<             (expr-> binding: qq[105])))
<         (expr->[value=5] int: 5
<           type->(type->kind=integer)))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[106]
<           (exprs: 
<             (expr->[value='after qq^^ := 5:'] string: 'after qq^^ := 5:'
<               type->(type->kind=string)))))
<       (stmt->callstmt:
<         (expr-> binding: show[107]))
<       (stmt->emptystmt:))))


testread.err:
0a1,5
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testread.parse:
1,20d0
< (program: 
<   (decls: 
<     (decl->program: testread[1]))
<   (block: 
<     (decls: 
<       (decl->variable: x[3]
<         (type->kind=ident: integer[3])))
<     (stmts: 
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false readln[5]
<           (exprs: 
<             (expr-> binding: x[5])
<             (expr-> binding: x[5]))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false writeln[6]
<           (exprs: 
<             (expr->[value='x = '] string: 'x = '
<               type->(type->kind=string))
<             (expr-> binding: x[6]))))
<       (stmt->emptystmt:))))


testrec.err:
0a1,5
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testrec.parse:
1,40d0
< (program: 
<   (decls: 
<     (decl->program: test[1]))
<   (block: 
<     (decls: 
<       (decl->type: p[3]
<         (type->kind=pointer:
<           ))
<       (decl->type: q[4]
<         (type->kind=pointer:
<           ))
<       (decl->type: r[5]
<         (type->kind=pointer:
<           ))
<       (decl->type: x[7]
<         (type->kind=pointer:
<           ))
<       (decl->type: y[8]
<         (type->kind=pointer:
<           ))
<       (decl->type: z[9]
<         (type->kind=pointer:
<           ))
<       (decl->type: t[11]
<         (type->kind=pointer:
<           ))
<       (decl->type: a[13]
<         (type->kind=pointer:
<           ))
<       (decl->type: b[14]
<         (type->kind=pointer:
<           ))
<       (decl->type: c[15]
<         (type->kind=pointer:
<           ))
<       (decl->type: d[16]
<         (type->kind=pointer:
<           )))
<     (stmts: 
<       (stmt->emptystmt:))))


testrecord.err:
0a1,5
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testrecord.parse:
1,150d0
< (program: 
<   (decls: 
<     (decl->program: testrecord[1]))
<   (block: 
<     (decls: 
<       (decl->type: rec[3]
<         (type->kind=record:
<           (fields: 
<             (decl->field: a[3]
<               (type->kind=ident: integer[3]))
<             (decl->field: b[3]
<               (type->kind=ident: integer[3])))))
<       (decl->type: prec[4]
<         (type->kind=pointer:
<           ))
<       (decl->type: rec2[5]
<         (type->kind=record:
<           (fields: 
<             (decl->field: x[5]
<               (type->kind=ident: integer[5]))
<             (decl->field: r[5]
<               (type->kind=ident: rec[5])))))
<       (decl->variable: i[7]
<         (type->kind=ident: integer[7]))
<       (decl->variable: r[8]
<         (type->kind=ident: rec[8]))
<       (decl->variable: p[9]
<         (type->kind=ident: prec[9]))
<       (decl->variable: r2[10]
<         (type->kind=ident: rec2[10]))
<       (decl->procedure: foo[12]
<         (formals: 
<           (decl->formal x[12]
<             (varmode=true)
<             (type->kind=ident: integer[12])))
<         (block: 
<           (stmts: 
<             (stmt->emptystmt:))))
<       (decl->procedure: bar[16]
<         (formals: 
<           (decl->formal r[16]
<             (varmode=false)
<             (type->kind=ident: rec[16]))
<           (decl->formal rr[16]
<             (varmode=true)
<             (type->kind=ident: rec[16])))
<         (block: 
<           (stmts: 
<             (stmt->emptystmt:)))))
<     (stmts: 
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false new[21]
<           (exprs: 
<             (expr-> binding: p[21]))))
<       (stmt->assignstmt:
<         (expr-> binexp: .
<           (expr-> binding: r[22])
<           (expr-> id: a))
<         (expr-> binding: i[22]))
<       (stmt->assignstmt:
<         (expr-> binexp: .
<           (expr-> binding: r[23])
<           (expr-> id: b))
<         (expr-> binding: i[23]))
<       (stmt->assignstmt:
<         (expr-> binding: i[24])
<         (expr-> binexp: .
<           (expr-> binding: r[24])
<           (expr-> id: a)))
<       (stmt->assignstmt:
<         (expr-> binding: i[25])
<         (expr-> binexp: .
<           (expr-> binding: r[25])
<           (expr-> id: b)))
<       (stmt->assignstmt:
<         (expr-> binexp: .
<           (expr-> unexp: ^
<             (expr-> binding: p[26]))
<           (expr-> id: a))
<         (expr-> binding: i[26]))
<       (stmt->assignstmt:
<         (expr-> binexp: .
<           (expr-> unexp: ^
<             (expr-> binding: p[27]))
<           (expr-> id: b))
<         (expr-> binding: i[27]))
<       (stmt->assignstmt:
<         (expr-> binding: i[28])
<         (expr-> binexp: .
<           (expr-> unexp: ^
<             (expr-> binding: p[28]))
<           (expr-> id: a)))
<       (stmt->assignstmt:
<         (expr-> binding: i[29])
<         (expr-> binexp: .
<           (expr-> unexp: ^
<             (expr-> binding: p[29]))
<           (expr-> id: b)))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false foo[30]
<           (exprs: 
<             (expr-> binding: i[30]))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false foo[31]
<           (exprs: 
<             (expr-> binexp: .
<               (expr-> binding: r[31])
<               (expr-> id: a)))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false foo[32]
<           (exprs: 
<             (expr-> binexp: .
<               (expr-> binding: r[32])
<               (expr-> id: b)))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false foo[33]
<           (exprs: 
<             (expr-> binexp: .
<               (expr-> unexp: ^
<                 (expr-> binding: p[33]))
<               (expr-> id: a)))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false foo[34]
<           (exprs: 
<             (expr-> binexp: .
<               (expr-> unexp: ^
<                 (expr-> binding: p[34]))
<               (expr-> id: b)))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false bar[35]
<           (exprs: 
<             (expr-> binding: r[35])
<             (expr-> binding: r[35]))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false bar[36]
<           (exprs: 
<             (expr-> binexp: .
<               (expr-> binding: r2[36])
<               (expr-> id: r))
<             (expr-> binexp: .
<               (expr-> binding: r2[36])
<               (expr-> id: r)))))
<       (stmt->callstmt:
<         (expr-> call: isMethodCall=false bar[37]
<           (exprs: 
<             (expr-> unexp: ^
<               (expr-> binding: p[37]))
<             (expr-> unexp: ^
<               (expr-> binding: p[37])))))
<       (stmt->emptystmt:))))


testregs.err:
0a1,5
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testregs.parse:
1,462d0
< (program: 
<   (decls: 
<     (decl->program: testregs[1]))
<   (block: 
<     (decls: 
<       (decl->type: rr[4]
<         (type->kind=record:
<           (fields: 
<             (decl->field: x[4]
<               (type->kind=ident: integer[4]))
<             (decl->field: y[4]
<               (type->kind=ident: integer[4])))))
<       (decl->variable: a[6]
<         (type->kind=array:(type->kind=subrange:
<             (expr->[value=1] int: 1
<               type->(type->kind=integer))
<             (expr->[value=10] int: 10
<               type->(type->kind=integer)))
<           (type->kind=ident: rr[6])))
<       (decl->variable: b[7]
<         (type->kind=array:(type->kind=subrange:
<             (expr->[value=1] int: 1
<               type->(type->kind=integer))
<             (expr->[value=2] int: 2
<               type->(type->kind=integer)))
<           (type->kind=array:(type->kind=subrange:
<               (expr->[value=1] int: 1
<                 type->(type->kind=integer))
<               (expr->[value=2] int: 2
<                 type->(type->kind=integer)))
<             (type->kind=ident: rr[7]))))
<       (decl->variable: r[8]
<         (type->kind=ident: rr[8]))
<       (decl->variable: i[9]
<         (type->kind=ident: integer[9]))
<       (decl->variable: j[9]
<         (type->kind=ident: integer[9]))
<       (decl->function: f1[11]
<         (type->kind=ident: integer[11])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: f1[13])
<               (expr->[value=1] int: 1
<                 type->(type->kind=integer)))
<             (stmt->emptystmt:)))))
<     (stmts: 
<       (stmt->assignstmt:
<         (expr-> binding: i[17])
<         (expr-> binding: f1[17]))
<       (stmt->assignstmt:
<         (expr-> binding: j[18])
<         (expr-> binding: f1[18]))
<       (stmt->assignstmt:
<         (expr-> binexp: .
<           (expr-> binexp: [
<             (expr-> binding: a[19])
<             (expr->[value=3] int: 3
<               type->(type->kind=integer)))
<           (expr-> id: y))
<         (expr->[value=1] int: 1
<           type->(type->kind=integer)))
<       (stmt->assignstmt:
<         (expr-> binexp: .
<           (expr-> binexp: [
<             (expr-> binding: a[20])
<             (expr-> binding: i[20]))
<           (expr-> id: y))
<         (expr->[value=2] int: 2
<           type->(type->kind=integer)))
<       (stmt->assignstmt:
<         (expr-> binexp: .
<           (expr-> binding: r[21])
<           (expr-> id: y))
<         (expr->[value=3] int: 3
<           type->(type->kind=integer)))
<       (stmt->assignstmt:
<         (expr-> binexp: .
<           (expr-> binexp: [
<             (expr-> binexp: [
<               (expr-> binding: b[22])
<               (expr->[value=2] int: 2
<                 type->(type->kind=integer)))
<             (expr->[value=2] int: 2
<               type->(type->kind=integer)))
<           (expr-> id: y))
<         (expr->[value=5] int: 5
<           type->(type->kind=integer)))
<       (stmt->assignstmt:
<         (expr-> binexp: .
<           (expr-> binexp: [
<             (expr-> binexp: [
<               (expr-> binding: b[23])
<               (expr-> binding: i[23]))
<             (expr->[value=2] int: 2
<               type->(type->kind=integer)))
<           (expr-> id: y))
<         (expr->[value=6] int: 6
<           type->(type->kind=integer)))
<       (stmt->assignstmt:
<         (expr-> binexp: .
<           (expr-> binexp: [
<             (expr-> binexp: [
<               (expr-> binding: b[24])
<               (expr->[value=2] int: 2
<                 type->(type->kind=integer)))
<             (expr-> binding: i[24]))
<           (expr-> id: y))
<         (expr->[value=7] int: 7
<           type->(type->kind=integer)))
<       (stmt->assignstmt:
<         (expr-> binexp: .
<           (expr-> binexp: [
<             (expr-> binexp: [
<               (expr-> binding: b[25])
<               (expr-> binding: i[25]))
<             (expr-> binding: j[25]))
<           (expr-> id: y))
<         (expr->[value=8] int: 8
<           type->(type->kind=integer)))
<       (stmt->assignstmt:
<         (expr-> binexp: .
<           (expr-> binexp: [
<             (expr-> binexp: [
<               (expr-> binding: b[26])
<               (expr->[value=2] int: 2
<                 type->(type->kind=integer)))
<             (expr->[value=2] int: 2
<               type->(type->kind=integer)))
<           (expr-> id: x))
<         (expr->[value=5] int: 5
<           type->(type->kind=integer)))
<       (stmt->assignstmt:
<         (expr-> binexp: .
<           (expr-> binexp: [
<             (expr-> binexp: [
<               (expr-> binding: b[27])
<               (expr-> binding: i[27]))
<             (expr->[value=2] int: 2
<               type->(type->kind=integer)))
<           (expr-> id: x))
<         (expr->[value=6] int: 6
<           type->(type->kind=integer)))
<       (stmt->assignstmt:
<         (expr-> binexp: .
<           (expr-> binexp: [
<             (expr-> binexp: [
<               (expr-> binding: b[28])
<               (expr->[value=2] int: 2
<                 type->(type->kind=integer)))
<             (expr-> binding: i[28]))
<           (expr-> id: x))
<         (expr->[value=7] int: 7
<           type->(type->kind=integer)))
<       (stmt->assignstmt:
<         (expr-> binexp: .
<           (expr-> binexp: [
<             (expr-> binexp: [
<               (expr-> binding: b[29])
<               (expr-> binding: i[29]))
<             (expr-> binding: j[29]))
<           (expr-> id: x))
<         (expr->[value=8] int: 8
<           type->(type->kind=integer)))
<       (stmt->assignstmt:
<         (expr-> binding: i[30])
<         (expr-> binexp: +
<           (expr-> binding: i[30])
<           (expr-> binding: j[30])))
<       (stmt->assignstmt:
<         (expr-> binding: i[31])
<         (expr->[value=9] int: 9
<           type->(type->kind=integer)))
<       (stmt->assignstmt:
<         (expr-> binding: j[32])
<         (expr-> binexp: +
<           (expr-> binexp: +
<             (expr-> binexp: +
<               (expr-> binding: i[32])
<               (expr-> binding: j[32]))
<             (expr-> binexp: +
<               (expr-> binding: i[32])
<               (expr-> binding: j[32])))
<           (expr-> binexp: +
<             (expr-> binexp: +
<               (expr-> binding: i[32])
<               (expr-> binding: j[32]))
<             (expr-> binexp: +
<               (expr-> binding: i[32])
<               (expr-> binding: j[32])))))
<       (stmt->assignstmt:
<         (expr-> binding: i[33])
<         (expr->[value=8] int: 8
<           type->(type->kind=integer)))
<       (stmt->assignstmt:
<         (expr-> binding: i[34])
<         (expr-> binexp: +
<           (expr-> binexp: +
<             (expr-> binexp: +
<               (expr-> binexp: +
<                 (expr-> binding: i[34])
<                 (expr-> binding: j[34]))
<               (expr-> binexp: +
<                 (expr-> binding: i[34])
<                 (expr-> binding: j[34])))
<             (expr-> binexp: +
<               (expr-> binexp: +
<                 (expr-> binding: i[34])
<                 (expr-> binding: j[34]))
<               (expr-> binexp: +
<                 (expr-> binding: i[34])
<                 (expr-> binding: j[34]))))
<           (expr-> binexp: +
<             (expr-> binexp: +
<               (expr-> binexp: +
<                 (expr-> binding: i[35])
<                 (expr-> binding: j[35]))
<               (expr-> binexp: +
<                 (expr-> binding: i[35])
<                 (expr-> binding: j[35])))
<             (expr-> binexp: +
<               (expr-> binexp: +
<                 (expr-> binding: i[35])
<                 (expr-> binding: j[35]))
<               (expr-> binexp: +
<                 (expr-> binding: i[35])
<                 (expr-> binding: j[35]))))))
<       (stmt->assignstmt:
<         (expr-> binding: i[36])
<         (expr->[value=7] int: 7
<           type->(type->kind=integer)))
<       (stmt->assignstmt:
<         (expr-> binding: j[37])
<         (expr-> binexp: +
<           (expr-> binexp: .
<             (expr-> binexp: [
<               (expr-> binding: a[37])
<               (expr-> binexp: +
<                 (expr-> binexp: mod
<                   (expr-> binexp: +
<                     (expr-> binexp: +
<                       (expr-> binexp: +
<                         (expr-> binexp: +
<                           (expr-> binding: i[37])
<                           (expr-> binding: j[37]))
<                         (expr-> binexp: +
<                           (expr-> binding: i[37])
<                           (expr-> binding: j[37])))
<                       (expr-> binexp: +
<                         (expr-> binexp: +
<                           (expr-> binding: i[37])
<                           (expr-> binding: j[37]))
<                         (expr-> binexp: +
<                           (expr-> binding: i[37])
<                           (expr-> binding: j[37]))))
<                     (expr-> binexp: +
<                       (expr-> binexp: +
<                         (expr-> binexp: +
<                           (expr-> binding: i[38])
<                           (expr-> binding: j[38]))
<                         (expr-> binexp: +
<                           (expr-> binding: i[38])
<                           (expr-> binding: j[38])))
<                       (expr-> binexp: +
<                         (expr-> binexp: +
<                           (expr-> binding: i[38])
<                           (expr-> binding: j[38]))
<                         (expr-> binexp: +
<                           (expr-> binding: i[38])
<                           (expr-> binding: j[38])))))
<                   (expr->[value=10] int: 10
<                     type->(type->kind=integer)))
<                 (expr->[value=1] int: 1
<                   type->(type->kind=integer))))
<             (expr-> id: x))
<           (expr-> binexp: .
<             (expr-> binexp: [
<               (expr-> binding: a[39])
<               (expr-> binexp: +
<                 (expr-> binexp: mod
<                   (expr-> binexp: +
<                     (expr-> binexp: +
<                       (expr-> binexp: +
<                         (expr-> binexp: +
<                           (expr-> binding: i[39])
<                           (expr-> binding: j[39]))
<                         (expr-> binexp: +
<                           (expr-> binding: i[39])
<                           (expr-> binding: j[39])))
<                       (expr-> binexp: +
<                         (expr-> binexp: +
<                           (expr-> binding: i[39])
<                           (expr-> binding: j[39]))
<                         (expr-> binexp: +
<                           (expr-> binding: i[39])
<                           (expr-> binding: j[39]))))
<                     (expr-> binexp: +
<                       (expr-> binexp: +
<                         (expr-> binexp: +
<                           (expr-> binding: i[40])
<                           (expr-> binding: j[40]))
<                         (expr-> binexp: +
<                           (expr-> binding: i[40])
<                           (expr-> binding: j[40])))
<                       (expr-> binexp: +
<                         (expr-> binexp: +
<                           (expr-> binding: i[40])
<                           (expr-> binding: j[40]))
<                         (expr-> binexp: +
<                           (expr-> binding: i[40])
<                           (expr-> binding: j[40])))))
<                   (expr->[value=10] int: 10
<                     type->(type->kind=integer)))
<                 (expr->[value=1] int: 1
<                   type->(type->kind=integer))))
<             (expr-> id: y))))
<       (stmt->assignstmt:
<         (expr-> binding: i[41])
<         (expr->[value=6] int: 6
<           type->(type->kind=integer)))
<       (stmt->assignstmt:
<         (expr-> binexp: .
<           (expr-> binexp: [
<             (expr-> binding: a[42])
<             (expr-> binexp: +
<               (expr-> binexp: mod
<                 (expr-> binexp: +
<                   (expr-> binexp: +
<                     (expr-> binexp: +
<                       (expr-> binexp: +
<                         (expr-> binding: i[42])
<                         (expr-> binding: j[42]))
<                       (expr-> binexp: +
<                         (expr-> binding: i[42])
<                         (expr-> binding: j[42])))
<                     (expr-> binexp: +
<                       (expr-> binexp: +
<                         (expr-> binding: i[42])
<                         (expr-> binding: j[42]))
<                       (expr-> binexp: +
<                         (expr-> binding: i[42])
<                         (expr-> binding: j[42]))))
<                   (expr-> binexp: +
<                     (expr-> binexp: +
<                       (expr-> binexp: +
<                         (expr-> binding: i[43])
<                         (expr-> binding: j[43]))
<                       (expr-> binexp: +
<                         (expr-> binding: i[43])
<                         (expr-> binding: j[43])))
<                     (expr-> binexp: +
<                       (expr-> binexp: +
<                         (expr-> binding: i[43])
<                         (expr-> binding: j[43]))
<                       (expr-> binexp: +
<                         (expr-> binding: i[43])
<                         (expr-> binding: j[43])))))
<                 (expr->[value=10] int: 10
<                   type->(type->kind=integer)))
<               (expr->[value=1] int: 1
<                 type->(type->kind=integer))))
<           (expr-> id: x))
<         (expr-> binexp: .
<           (expr-> binexp: [
<             (expr-> binding: a[44])
<             (expr-> binexp: +
<               (expr-> binexp: mod
<                 (expr-> binexp: +
<                   (expr-> binexp: +
<                     (expr-> binexp: +
<                       (expr-> binexp: +
<                         (expr-> binding: i[44])
<                         (expr-> binding: j[44]))
<                       (expr-> binexp: +
<                         (expr-> binding: i[44])
<                         (expr-> binding: j[44])))
<                     (expr-> binexp: +
<                       (expr-> binexp: +
<                         (expr-> binding: i[44])
<                         (expr-> binding: j[44]))
<                       (expr-> binexp: +
<                         (expr-> binding: i[44])
<                         (expr-> binding: j[44]))))
<                   (expr-> binexp: +
<                     (expr-> binexp: +
<                       (expr-> binexp: +
<                         (expr-> binding: i[45])
<                         (expr-> binding: j[45]))
<                       (expr-> binexp: +
<                         (expr-> binding: i[45])
<                         (expr-> binding: j[45])))
<                     (expr-> binexp: +
<                       (expr-> binexp: +
<                         (expr-> binding: i[45])
<                         (expr-> binding: j[45]))
<                       (expr-> binexp: +
<                         (expr-> binding: i[45])
<                         (expr-> binding: j[45])))))
<                 (expr->[value=10] int: 10
<                   type->(type->kind=integer)))
<               (expr->[value=1] int: 1
<                 type->(type->kind=integer))))
<           (expr-> id: y)))
<       (stmt->assignstmt:
<         (expr-> binding: i[46])
<         (expr->[value=5] int: 5
<           type->(type->kind=integer)))
<       (stmt->assignstmt:
<         (expr-> binexp: .
<           (expr-> binexp: [
<             (expr-> binding: a[47])
<             (expr-> binexp: +
<               (expr-> binexp: mod
<                 (expr-> binexp: +
<                   (expr-> binexp: +
<                     (expr-> binexp: +
<                       (expr-> binding: i[47])
<                       (expr-> binding: j[47]))
<                     (expr-> binexp: +
<                       (expr-> binding: i[47])
<                       (expr-> binding: j[47])))
<                   (expr-> binexp: +
<                     (expr-> binexp: +
<                       (expr-> binding: i[47])
<                       (expr-> binding: j[47]))
<                     (expr-> binexp: +
<                       (expr-> binding: i[47])
<                       (expr-> binding: j[47]))))
<                 (expr->[value=10] int: 10
<                   type->(type->kind=integer)))
<               (expr->[value=1] int: 1
<                 type->(type->kind=integer))))
<           (expr-> id: y))
<         (expr-> binexp: +
<           (expr-> binexp: .
<             (expr-> binexp: [
<               (expr-> binding: a[48])
<               (expr-> binexp: +
<                 (expr-> binexp: mod
<                   (expr-> binexp: +
<                     (expr-> binexp: +
<                       (expr-> binexp: +
<                         (expr-> binding: i[48])
<                         (expr-> binding: j[48]))
<                       (expr-> binexp: +
<                         (expr-> binding: i[48])
<                         (expr-> binding: j[48])))
<                     (expr-> binexp: +
<                       (expr-> binexp: +
<                         (expr-> binding: i[48])
<                         (expr-> binding: j[48]))
<                       (expr-> binexp: +
<                         (expr-> binding: i[48])
<                         (expr-> binding: j[48]))))
<                   (expr->[value=10] int: 10
<                     type->(type->kind=integer)))
<                 (expr->[value=1] int: 1
<                   type->(type->kind=integer))))
<             (expr-> id: y))
<           (expr->[value=1] int: 1
<             type->(type->kind=integer))))
<       (stmt->emptystmt:))))


testregs2.err:
0a1,5
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testregs2.parse:
1,168d0
< (program: 
<   (decls: 
<     (decl->program: testregs2[1]))
<   (block: 
<     (decls: 
<       (decl->type: rr[4]
<         (type->kind=record:
<           (fields: 
<             (decl->field: x[4]
<               (type->kind=ident: integer[4]))
<             (decl->field: y[4]
<               (type->kind=ident: integer[4])))))
<       (decl->type: range1[5]
<         (type->kind=subrange:
<           (expr->[value=1] int: 1
<             type->(type->kind=integer))
<           (expr->[value=10] int: 10
<             type->(type->kind=integer))))
<       (decl->type: range2[6]
<         (type->kind=subrange:
<           (expr->[value=1] int: 1
<             type->(type->kind=integer))
<           (expr->[value=2] int: 2
<             type->(type->kind=integer))))
<       (decl->variable: a[8]
<         (type->kind=array:(type->kind=ident: range1[8])
<           (type->kind=ident: rr[8])))
<       (decl->variable: b[9]
<         (type->kind=array:(type->kind=ident: range2[9])
<           (type->kind=array:(type->kind=ident: range2[9])
<             (type->kind=ident: rr[9]))))
<       (decl->variable: r[10]
<         (type->kind=ident: rr[10]))
<       (decl->variable: i[11]
<         (type->kind=ident: range1[11]))
<       (decl->variable: j[11]
<         (type->kind=ident: range1[11]))
<       (decl->variable: m[12]
<         (type->kind=ident: range2[12]))
<       (decl->variable: n[12]
<         (type->kind=ident: range2[12]))
<       (decl->function: f1[13]
<         (type->kind=ident: integer[13])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: f1[15])
<               (expr->[value=1] int: 1
<                 type->(type->kind=integer)))
<             (stmt->emptystmt:)))))
<     (stmts: 
<       (stmt->assignstmt:
<         (expr-> binding: i[19])
<         (expr-> binding: f1[19]))
<       (stmt->assignstmt:
<         (expr-> binding: j[20])
<         (expr-> binding: f1[20]))
<       (stmt->assignstmt:
<         (expr-> binding: m[21])
<         (expr-> binding: f1[21]))
<       (stmt->assignstmt:
<         (expr-> binding: n[22])
<         (expr-> binding: f1[22]))
<       (stmt->assignstmt:
<         (expr-> binexp: .
<           (expr-> binexp: [
<             (expr-> binding: a[23])
<             (expr-> binding: i[23]))
<           (expr-> id: x))
<         (expr-> binexp: .
<           (expr-> binexp: [
<             (expr-> binding: a[23])
<             (expr-> binding: j[23]))
<           (expr-> id: x)))
<       (stmt->assignstmt:
<         (expr-> binexp: .
<           (expr-> binexp: [
<             (expr-> binding: a[24])
<             (expr-> binding: i[24]))
<           (expr-> id: x))
<         (expr-> binexp: .
<           (expr-> binexp: [
<             (expr-> binding: a[24])
<             (expr-> binding: j[24]))
<           (expr-> id: y)))
<       (stmt->assignstmt:
<         (expr-> binexp: .
<           (expr-> binexp: [
<             (expr-> binding: a[25])
<             (expr-> binding: i[25]))
<           (expr-> id: y))
<         (expr-> binexp: .
<           (expr-> binexp: [
<             (expr-> binding: a[25])
<             (expr-> binding: j[25]))
<           (expr-> id: x)))
<       (stmt->assignstmt:
<         (expr-> binexp: .
<           (expr-> binexp: [
<             (expr-> binding: a[26])
<             (expr-> binding: i[26]))
<           (expr-> id: y))
<         (expr-> binexp: .
<           (expr-> binexp: [
<             (expr-> binding: a[26])
<             (expr-> binding: j[26]))
<           (expr-> id: y)))
<       (stmt->assignstmt:
<         (expr-> binexp: .
<           (expr-> binexp: [
<             (expr-> binexp: [
<               (expr-> binding: b[27])
<               (expr-> binding: m[27]))
<             (expr-> binding: n[27]))
<           (expr-> id: x))
<         (expr-> binexp: .
<           (expr-> binexp: [
<             (expr-> binexp: [
<               (expr-> binding: b[27])
<               (expr-> binding: n[27]))
<             (expr-> binding: m[27]))
<           (expr-> id: x)))
<       (stmt->assignstmt:
<         (expr-> binexp: .
<           (expr-> binexp: [
<             (expr-> binexp: [
<               (expr-> binding: b[28])
<               (expr-> binding: m[28]))
<             (expr-> binding: n[28]))
<           (expr-> id: x))
<         (expr-> binexp: .
<           (expr-> binexp: [
<             (expr-> binexp: [
<               (expr-> binding: b[28])
<               (expr-> binding: n[28]))
<             (expr-> binding: m[28]))
<           (expr-> id: y)))
<       (stmt->assignstmt:
<         (expr-> binexp: .
<           (expr-> binexp: [
<             (expr-> binexp: [
<               (expr-> binding: b[29])
<               (expr-> binding: m[29]))
<             (expr-> binding: n[29]))
<           (expr-> id: y))
<         (expr-> binexp: .
<           (expr-> binexp: [
<             (expr-> binexp: [
<               (expr-> binding: b[29])
<               (expr-> binding: n[29]))
<             (expr-> binding: m[29]))
<           (expr-> id: x)))
<       (stmt->assignstmt:
<         (expr-> binexp: .
<           (expr-> binexp: [
<             (expr-> binexp: [
<               (expr-> binding: b[30])
<               (expr-> binding: m[30]))
<             (expr-> binding: n[30]))
<           (expr-> id: y))
<         (expr-> binexp: .
<           (expr-> binexp: [
<             (expr-> binexp: [
<               (expr-> binding: b[30])
<               (expr-> binding: n[30]))
<             (expr-> binding: m[30]))
<           (expr-> id: y)))
<       (stmt->emptystmt:))))


testsub.err:
0a1,5
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testsub.parse:
1,281d0
< (program: 
<   (decls: 
<     (decl->program: testsub[1]))
<   (block: 
<     (decls: 
<       (decl->type: at[4]
<         (type->kind=array:(type->kind=subrange:
<             (expr->[value=1] int: 1
<               type->(type->kind=integer))
<             (expr->[value=10] int: 10
<               type->(type->kind=integer)))
<           (type->kind=ident: integer[4])))
<       (decl->type: aat[5]
<         (type->kind=array:(type->kind=subrange:
<             (expr->[value=1] int: 1
<               type->(type->kind=integer))
<             (expr->[value=10] int: 10
<               type->(type->kind=integer)))
<           (type->kind=array:(type->kind=subrange:
<               (expr->[value=1] int: 1
<                 type->(type->kind=integer))
<               (expr->[value=10] int: 10
<                 type->(type->kind=integer)))
<             (type->kind=ident: integer[5]))))
<       (decl->type: bt[6]
<         (type->kind=array:(type->kind=subrange:
<             (expr->[value=0] int: 0
<               type->(type->kind=integer))
<             (expr->[value=9] int: 9
<               type->(type->kind=integer)))
<           (type->kind=array:(type->kind=subrange:
<               (expr->[value=0] int: 0
<                 type->(type->kind=integer))
<               (expr->[value=15] int: 15
<                 type->(type->kind=integer)))
<             (type->kind=ident: integer[6]))))
<       (decl->variable: a[9]
<         (type->kind=ident: at[9]))
<       (decl->variable: aa[10]
<         (type->kind=ident: aat[10]))
<       (decl->variable: i[11]
<         (type->kind=ident: integer[11]))
<       (decl->variable: j[11]
<         (type->kind=ident: integer[11]))
<       (decl->variable: ii[12]
<         (type->kind=subrange:
<           (expr->[value=1] int: 1
<             type->(type->kind=integer))
<           (expr->[value=10] int: 10
<             type->(type->kind=integer))))
<       (decl->variable: jj[12]
<         (type->kind=subrange:
<           (expr->[value=1] int: 1
<             type->(type->kind=integer))
<           (expr->[value=10] int: 10
<             type->(type->kind=integer))))
<       (decl->variable: ll[13]
<         (type->kind=subrange:
<           (expr->[value=0] int: 0
<             type->(type->kind=integer))
<           (expr->[value=9] int: 9
<             type->(type->kind=integer))))
<       (decl->variable: hh[14]
<         (type->kind=subrange:
<           (expr->[value=2] int: 2
<             type->(type->kind=integer))
<           (expr->[value=11] int: 11
<             type->(type->kind=integer))))
<       (decl->variable: b[15]
<         (type->kind=ident: bt[15]))
<       (decl->function: f1[17]
<         (type->kind=ident: integer[17])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: f1[19])
<               (expr->[value=1] int: 1
<                 type->(type->kind=integer)))
<             (stmt->emptystmt:)))))
<     (stmts: 
<       (stmt->ifstmt: 
<         (expr-> binexp: =
<           (expr-> binding: f1[23])
<           (expr->[value=0] int: 0
<             type->(type->kind=integer)))
<         (stmt->compoundstmt:
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: i[24])
<               (expr-> binexp: +
<                 (expr-> binexp: [
<                   (expr-> binding: a[24])
<                   (expr->[value=0] int: 0
<                     type->(type->kind=integer)))
<                 (expr-> binexp: [
<                   (expr-> binding: a[24])
<                   (expr->[value=11] int: 11
<                     type->(type->kind=integer)))))
<             (stmt->assignstmt:
<               (expr-> binexp: [
<                 (expr-> binding: a[25])
<                 (expr->[value=0] int: 0
<                   type->(type->kind=integer)))
<               (expr-> binding: j[25]))
<             (stmt->assignstmt:
<               (expr-> binexp: [
<                 (expr-> binding: a[26])
<                 (expr->[value=11] int: 11
<                   type->(type->kind=integer)))
<               (expr-> binding: i[26]))
<             (stmt->assignstmt:
<               (expr-> binding: j[27])
<               (expr-> binexp: +
<                 (expr-> binexp: +
<                   (expr-> binexp: +
<                     (expr-> binexp: +
<                       (expr-> binexp: [
<                         (expr-> binexp: [
<                           (expr-> binding: aa[27])
<                           (expr->[value=0] int: 0
<                             type->(type->kind=integer)))
<                         (expr-> binding: i[27]))
<                       (expr-> binexp: [
<                         (expr-> binexp: [
<                           (expr-> binding: aa[27])
<                           (expr-> binding: i[27]))
<                         (expr->[value=0] int: 0
<                           type->(type->kind=integer))))
<                     (expr-> binexp: [
<                       (expr-> binexp: [
<                         (expr-> binding: aa[27])
<                         (expr->[value=11] int: 11
<                           type->(type->kind=integer)))
<                       (expr-> binding: i[27])))
<                   (expr-> binexp: [
<                     (expr-> binexp: [
<                       (expr-> binding: aa[27])
<                       (expr-> binding: i[27]))
<                     (expr->[value=11] int: 11
<                       type->(type->kind=integer))))
<                 (expr-> binexp: [
<                   (expr-> binexp: [
<                     (expr-> binding: aa[28])
<                     (expr->[value=0] int: 0
<                       type->(type->kind=integer)))
<                   (expr->[value=11] int: 11
<                     type->(type->kind=integer)))))
<             (stmt->emptystmt:))))
<       (stmt->assignstmt:
<         (expr-> binding: j[30])
<         (expr-> binding: f1[30]))
<       (stmt->assignstmt:
<         (expr-> binding: i[31])
<         (expr-> binexp: [
<           (expr-> binexp: [
<             (expr-> binding: aa[31])
<             (expr-> binding: j[31]))
<           (expr->[value=1] int: 1
<             type->(type->kind=integer))))
<       (stmt->assignstmt:
<         (expr-> binding: i[32])
<         (expr-> binding: f1[32]))
<       (stmt->assignstmt:
<         (expr-> binexp: [
<           (expr-> binexp: [
<             (expr-> binding: aa[33])
<             (expr-> binding: i[33]))
<           (expr->[value=1] int: 1
<             type->(type->kind=integer)))
<         (expr-> binding: j[33]))
<       (stmt->assignstmt:
<         (expr-> binding: ii[34])
<         (expr-> binding: f1[34]))
<       (stmt->assignstmt:
<         (expr-> binding: jj[35])
<         (expr-> binding: f1[35]))
<       (stmt->assignstmt:
<         (expr-> binding: i[36])
<         (expr-> binexp: +
<           (expr-> binexp: +
<             (expr-> binexp: +
<               (expr-> binexp: +
<                 (expr-> binexp: +
<                   (expr-> binexp: [
<                     (expr-> binding: a[36])
<                     (expr-> binding: i[36]))
<                   (expr-> binexp: [
<                     (expr-> binding: a[36])
<                     (expr-> binding: ii[36])))
<                 (expr-> binexp: [
<                   (expr-> binexp: [
<                     (expr-> binding: aa[36])
<                     (expr-> binding: i[36]))
<                   (expr-> binding: j[36])))
<               (expr-> binexp: [
<                 (expr-> binexp: [
<                   (expr-> binding: aa[36])
<                   (expr-> binding: i[36]))
<                 (expr-> binding: jj[36])))
<             (expr-> binexp: [
<               (expr-> binexp: [
<                 (expr-> binding: aa[36])
<                 (expr-> binding: ii[36]))
<               (expr-> binding: j[36])))
<           (expr-> binexp: [
<             (expr-> binexp: [
<               (expr-> binding: aa[36])
<               (expr-> binding: ii[36]))
<             (expr-> binding: jj[36]))))
<       (stmt->assignstmt:
<         (expr-> binding: ii[37])
<         (expr-> binding: jj[37]))
<       (stmt->assignstmt:
<         (expr-> binding: ii[38])
<         (expr-> binding: i[38]))
<       (stmt->ifstmt: 
<         (expr-> binexp: =
<           (expr-> binding: f1[39])
<           (expr->[value=0] int: 0
<             type->(type->kind=integer)))
<         (stmt->compoundstmt:
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: ii[40])
<               (expr->[value=0] int: 0
<                 type->(type->kind=integer)))
<             (stmt->assignstmt:
<               (expr-> binding: ii[41])
<               (expr->[value=5] int: 5
<                 type->(type->kind=integer)))
<             (stmt->assignstmt:
<               (expr-> binding: ii[42])
<               (expr->[value=11] int: 11
<                 type->(type->kind=integer)))
<             (stmt->emptystmt:))))
<       (stmt->assignstmt:
<         (expr-> binding: ll[44])
<         (expr-> binding: f1[44]))
<       (stmt->assignstmt:
<         (expr-> binding: hh[45])
<         (expr-> binexp: +
<           (expr-> binding: f1[45])
<           (expr->[value=1] int: 1
<             type->(type->kind=integer))))
<       (stmt->assignstmt:
<         (expr-> binding: ii[46])
<         (expr-> binding: ll[46]))
<       (stmt->assignstmt:
<         (expr-> binding: ii[47])
<         (expr-> binding: hh[47]))
<       (stmt->assignstmt:
<         (expr-> binding: i[48])
<         (expr-> binexp: +
<           (expr-> binexp: [
<             (expr-> binding: a[48])
<             (expr-> binding: ll[48]))
<           (expr-> binexp: [
<             (expr-> binding: a[48])
<             (expr-> binding: hh[48]))))
<       (stmt->assignstmt:
<         (expr-> binding: i[49])
<         (expr-> binexp: +
<           (expr-> binexp: +
<             (expr-> binexp: [
<               (expr-> binexp: [
<                 (expr-> binding: b[49])
<                 (expr->[value=0] int: 0
<                   type->(type->kind=integer)))
<               (expr-> binding: ll[49]))
<             (expr-> binexp: [
<               (expr-> binexp: [
<                 (expr-> binding: b[49])
<                 (expr-> binding: ll[49]))
<               (expr->[value=0] int: 0
<                 type->(type->kind=integer))))
<           (expr-> binexp: [
<             (expr-> binexp: [
<               (expr-> binding: b[49])
<               (expr-> binding: ll[49]))
<             (expr-> binding: ll[49]))))
<       (stmt->emptystmt:))))


testsub2.err:
0a1,5
> Exception occurred:
> java.lang.NullPointerException
> 	at MPC.Parse.perform(Parse.java:58)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testsub2.parse:
1,185d0
< (program: 
<   (decls: 
<     (decl->program: testsub2[1]))
<   (block: 
<     (decls: 
<       (decl->type: at[4]
<         (type->kind=array:(type->kind=subrange:
<             (expr->[value=1] int: 1
<               type->(type->kind=integer))
<             (expr->[value=10] int: 10
<               type->(type->kind=integer)))
<           (type->kind=ident: integer[4])))
<       (decl->type: aat[5]
<         (type->kind=array:(type->kind=subrange:
<             (expr->[value=1] int: 1
<               type->(type->kind=integer))
<             (expr->[value=10] int: 10
<               type->(type->kind=integer)))
<           (type->kind=array:(type->kind=subrange:
<               (expr->[value=1] int: 1
<                 type->(type->kind=integer))
<               (expr->[value=10] int: 10
<                 type->(type->kind=integer)))
<             (type->kind=ident: integer[5]))))
<       (decl->type: bt[6]
<         (type->kind=array:(type->kind=subrange:
<             (expr->[value=0] int: 0
<               type->(type->kind=integer))
<             (expr->[value=9] int: 9
<               type->(type->kind=integer)))
<           (type->kind=array:(type->kind=subrange:
<               (expr->[value=0] int: 0
<                 type->(type->kind=integer))
<               (expr->[value=15] int: 15
<                 type->(type->kind=integer)))
<             (type->kind=ident: integer[6]))))
<       (decl->variable: a[9]
<         (type->kind=ident: at[9]))
<       (decl->variable: aa[10]
<         (type->kind=ident: aat[10]))
<       (decl->variable: i[11]
<         (type->kind=ident: integer[11]))
<       (decl->variable: j[11]
<         (type->kind=ident: integer[11]))
<       (decl->variable: ii[12]
<         (type->kind=subrange:
<           (expr->[value=1] int: 1
<             type->(type->kind=integer))
<           (expr->[value=10] int: 10
<             type->(type->kind=integer))))
<       (decl->variable: jj[12]
<         (type->kind=subrange:
<           (expr->[value=1] int: 1
<             type->(type->kind=integer))
<           (expr->[value=10] int: 10
<             type->(type->kind=integer))))
<       (decl->variable: ll[13]
<         (type->kind=subrange:
<           (expr->[value=0] int: 0
<             type->(type->kind=integer))
<           (expr->[value=9] int: 9
<             type->(type->kind=integer))))
<       (decl->variable: hh[14]
<         (type->kind=subrange:
<           (expr->[value=2] int: 2
<             type->(type->kind=integer))
<           (expr->[value=11] int: 11
<             type->(type->kind=integer))))
<       (decl->variable: b[15]
<         (type->kind=ident: bt[15]))
<       (decl->function: f1[17]
<         (type->kind=ident: integer[17])
<         (block: 
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: f1[19])
<               (expr->[value=1] int: 1
<                 type->(type->kind=integer)))
<             (stmt->emptystmt:)))))
<     (stmts: 
<       (stmt->assignstmt:
<         (expr-> binding: i[23])
<         (expr-> binexp: +
<           (expr-> binexp: +
<             (expr-> binexp: +
<               (expr-> binexp: +
<                 (expr-> binexp: +
<                   (expr-> binexp: [
<                     (expr-> binding: a[23])
<                     (expr-> binding: i[23]))
<                   (expr-> binexp: [
<                     (expr-> binding: a[23])
<                     (expr-> binding: ii[23])))
<                 (expr-> binexp: [
<                   (expr-> binexp: [
<                     (expr-> binding: aa[23])
<                     (expr-> binding: i[23]))
<                   (expr-> binding: j[23])))
<               (expr-> binexp: [
<                 (expr-> binexp: [
<                   (expr-> binding: aa[23])
<                   (expr-> binding: i[23]))
<                 (expr-> binding: jj[23])))
<             (expr-> binexp: [
<               (expr-> binexp: [
<                 (expr-> binding: aa[23])
<                 (expr-> binding: ii[23]))
<               (expr-> binding: j[23])))
<           (expr-> binexp: [
<             (expr-> binexp: [
<               (expr-> binding: aa[23])
<               (expr-> binding: ii[23]))
<             (expr-> binding: jj[23]))))
<       (stmt->assignstmt:
<         (expr-> binding: ii[24])
<         (expr-> binding: jj[24]))
<       (stmt->assignstmt:
<         (expr-> binding: ii[25])
<         (expr-> binding: i[25]))
<       (stmt->ifstmt: 
<         (expr-> binexp: =
<           (expr-> binding: f1[26])
<           (expr->[value=0] int: 0
<             type->(type->kind=integer)))
<         (stmt->compoundstmt:
<           (stmts: 
<             (stmt->assignstmt:
<               (expr-> binding: ii[27])
<               (expr->[value=0] int: 0
<                 type->(type->kind=integer)))
<             (stmt->assignstmt:
<               (expr-> binding: ii[28])
<               (expr->[value=5] int: 5
<                 type->(type->kind=integer)))
<             (stmt->assignstmt:
<               (expr-> binding: ii[29])
<               (expr->[value=11] int: 11
<                 type->(type->kind=integer)))
<             (stmt->emptystmt:))))
<       (stmt->assignstmt:
<         (expr-> binding: ll[31])
<         (expr-> binding: f1[31]))
<       (stmt->assignstmt:
<         (expr-> binding: hh[32])
<         (expr-> binexp: +
<           (expr-> binding: f1[32])
<           (expr->[value=1] int: 1
<             type->(type->kind=integer))))
<       (stmt->assignstmt:
<         (expr-> binding: ii[33])
<         (expr-> binding: ll[33]))
<       (stmt->assignstmt:
<         (expr-> binding: ii[34])
<         (expr-> binding: hh[34]))
<       (stmt->assignstmt:
<         (expr-> binding: i[35])
<         (expr-> binexp: +
<           (expr-> binexp: [
<             (expr-> binding: a[35])
<             (expr-> binding: ll[35]))
<           (expr-> binexp: [
<             (expr-> binding: a[35])
<             (expr-> binding: hh[35]))))
<       (stmt->assignstmt:
<         (expr-> binding: i[36])
<         (expr-> binexp: +
<           (expr-> binexp: +
<             (expr-> binexp: [
<               (expr-> binexp: [
<                 (expr-> binding: b[36])
<                 (expr->[value=0] int: 0
<                   type->(type->kind=integer)))
<               (expr-> binding: ll[36]))
<             (expr-> binexp: [
<               (expr-> binexp: [
<                 (expr-> binding: b[36])
<                 (expr-> binding: ll[36]))
<               (expr->[value=0] int: 0
<                 type->(type->kind=integer))))
<           (expr-> binexp: [
<             (expr-> binexp: [
<               (expr-> binding: b[36])
<               (expr-> binding: ll[36]))
<             (expr-> binding: ll[36]))))
<       (stmt->emptystmt:))))



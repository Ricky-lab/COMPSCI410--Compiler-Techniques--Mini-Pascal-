program
$testobject3
@;
type
$object1
@=
$integer
object
methods
procedure
$add
@(
$self
@:
$object1
@;
$x
@:
$integer
@)
@;
end
@;
$object2
@=
$object3
object
overrides
$method
@=
$object2method
end
@;
$object3
@=
object
$x
@:
$integer
methods
procedure
$method
@(
$self
@:
$object3
@)
@=
$object3method
@;
end
@;
$object4
@=
object
$x
@:
$integer
@;
methods
function
$multiply
@(
$self
@:
$object4
@;
$x
@:
$integer
@)
@:
$object4
@;
end
@;
$object5
@=
$object4
object
overrides
$multiply
@=
$object5multiply
end
@;
$object6
@=
$object4
abstract
object
overrides
$multiply
@=
$object6multiply
end
@;
$object7
@=
$object6
object
methods
function
$add
@(
$self
@:
$object7
@;
var
$x
@:
$integer
@)
@:
$object7
@=
$object7add
@;
end
@;
var
$o1
@:
$object1
@;
$o2
@:
$object2
@;
$o3
@:
$object3
@;
$o4
@:
$object4
@;
$o5
@:
$object5
@;
$o6
@:
$object6
@;
$o7
@:
$object7
@;
procedure
$object2method
@(
$self
@:
$object2
@)
@;
begin
$writeln
@(
$self
@.
$x
@)
@;
end
@;
function
$object3method
@(
$x
@:
$integer
@)
@:
$integer
@;
begin
$object3method
@:=
#2
@*
$x
@;
end
@;
function
$object5multiply
@(
$self
@:
$object5
@;
$x
@:
$integer
@)
@:
$integer
@;
begin
$object5multiply
@:=
$self
@.
$x
@*
$x
@;
end
@;
function
$object6multiply
@(
$self
@:
$object7
@;
$x
@:
$integer
@)
@:
$object6
@;
var
$obj
@:
$object6
@;
begin
$obj
@:=
$new
@(
$object7
@)
@;
$obj
@.
$x
@:=
$self
@.
$x
@*
$x
@;
$object6multiply
@:=
$obj
@;
end
@;
function
$object7add
@(
$self
@:
$object7
@;
$x
@:
$integer
@)
@:
$object7
@;
var
$obj
@:
$object7
@;
begin
$obj
@:=
$new
@(
$object7
@)
@;
$obj
@.
$x
@:=
$self
@.
$x
@+
$x
@;
$object7add
@:=
$obj
end
@;
begin
$o4
@:=
$new
@(
$object4
@)
@;
$writeln
@(
$o4
@^
@.
$x
@)
@;
$o6
@:=
$new
@(
$object6
@)
@;
$new
@(
$o6
@)
@;
$o6
@:=
$o4
@;
$o4
@:=
$o6
@;
$o4
@:=
$o4
@;
if
$istype
@(
$o4
@)
then
$writeln
@;
if
$istype
@(
$o4
@,
$object4
@,
#3
@)
then
$writeln
@;
if
$istype
@(
$o4
@,
$integer
@)
then
$writeln
@;
if
$istype
@(
$o4
@,
$object4
@)
then
$writeln
@;
if
$istype
@(
#35
@,
$object4
@)
then
$writeln
@;
if
$istype
@(
nil
@,
$object4
@)
then
$writeln
@;
$o4
@:=
$narrow
@(
$o4
@)
@;
$o4
@:=
$narrow
@(
$o4
@,
$object4
@,
#3
@)
@;
$o4
@:=
$narrow
@(
$o4
@,
$integer
@)
@;
$o4
@:=
$narrow
@(
$o4
@,
$object4
@)
@;
$o4
@:=
$narrow
@(
#35
@,
$object4
@)
@;
$o4
@:=
$narrow
@(
nil
@,
$object4
@)
@;
$o4
@:=
nil
@;
end
@.
EOF
EOF

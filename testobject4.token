program
$testobject4;

type
$hasequals
$= abstract
object
methods
function
$equals
$(elf
@:
$hasequals; other
@:
$root)
@:
$boolean;

$end;

$iterator
$= abstract
object
methods
function
$next
$(elf
@:
$iterator)
@:
$root;

function
$hasnext
$(elf
@:
$iterator)
@:
$boolean;

procedure
$remove
$(elf
@:
$iterator);

$end;

$iterable
$= abstract
object
methods
function
$getiterator
$(elf
@:
$iterable)
@:
$iterator;

$end;

$collection
$= iterable
abstract
object
methods
$(* *function
$size
$(elf
@:
$collection)
@:
$integer;

function
$isempty
$(elf
@:
$collection)
@:
$boolean;

$(* *function
$contains
$(elf
@:
$collection; o
@:
$hasequals)
@:
$boolean;

function
$add
$(elf
@:
$collection; o
@:
$hasequals)
@:
$boolean;

function
$remove
$(elf
@:
$collection; o
@:
$hasequals)
@:
$boolean;

$(* *procedure
$clear
$(elf
@:
$collection);

function
$addall
$(elf
$, other
@:
$collection)
@:
$boolean;

function
$containsall
$(elf
$, other
@:
$collection)
@:
$boolean;

function
$equals
$(elf
$, other
@:
$collection)
@:
$boolean;

function
$removeall
$(elf
$, other
@:
$collection)
@:
$boolean;

function
$retainall
$(elf
$, other
@:
$collection)
@:
$boolean;

$end;

type
$abscoll
$= collection
abstract
object
overrides
$isempty
$= acisempty;

$contains
$= accontains;

$clear
$= acclear;

$addall
$= acaddall;

$containsall
$= accontainsall;

$removeall
$= acremoveall;

$retainall
$= acretainall;

$end;

function
$acisempty
$(elf
@:
$abscoll)
@:
$boolean;
begin
$acisempty
$:= 

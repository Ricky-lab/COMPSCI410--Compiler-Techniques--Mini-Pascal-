program
$testobject
@;
type
$anyobject
@=
abstract
object
methods
procedure
$print
@(
$self
@:
$anyobject
@)
@;
end
@;
$month
@=
#1
@..
#12
@;
$dayofmonth
@=
#1
@..
#31
@;
$date
@=
$anyobject
object
$m
@:
$month
@;
$d
@:
$dayofmonth
@;
$y
@:
$integer
@;
methods
function
$dayofyear
@(
$self
@:
$date
@)
@:
$integer
@=
$datedayofyear
@;
procedure
$increment
@(
$self
@:
$date
@)
@=
$dateincrement
@;
function
$equalsdate
@(
$self
@,
$other
@:
$date
@)
@:
$boolean
@=
$dateequalsdate
@;
overrides
$print
@=
$dateprint
@;
end
@;
var
$d
@:
$date
@;
$a
@:
$anyobject
@;
$r
@:
$root
@;
procedure
$dateprint
@(
$self
@:
$date
@)
@;
begin
$writeln
@(
'Entered datePrint'
@)
@;
$write
@(
$self
@.
$m
@)
@;
$write
@(
'-'
@)
@;
$write
@(
$self
@.
$d
@)
@;
$write
@(
'-'
@)
@;
$write
@(
$self
@.
$y
@)
@;
end
@;
function
$mkdate
@(
$m
@:
$month
@;
$d
@:
$dayofmonth
@;
$y
@:
$integer
@)
@:
$date
@;
var
$ret
@:
$date
@;
begin
$writeln
@(
'Entered mkDate'
@)
@;
$ret
@:=
$new
@(
$date
@)
@;
$ret
@.
$m
@:=
$m
@;
$ret
@.
$d
@:=
$d
@;
$ret
@.
$y
@:=
$y
@;
$mkdate
@:=
$ret
@;
end
@;
function
$isleapyear
@(
$y
@:
$integer
@)
@:
$boolean
@;
var
$remainder
@:
$integer
@;
$ret
@:
$boolean
@;
begin
$writeln
@(
'Entered isLeapYear'
@)
@;
$remainder
@:=
$y
mod
#4
@;
if
$remainder
@<>
#0
then
$ret
@:=
$false
else
begin
$remainder
@:=
$y
mod
#400
@;
if
#0
@=
$remainder
then
$ret
@:=
$true
else
begin
$remainder
@:=
$y
mod
#100
@;
if
#0
@=
$remainder
then
$ret
@:=
$false
else
$ret
@:=
$true
end
end
@;
$isleapyear
@:=
$ret
end
@;
function
$daysinmonth
@(
$m
@:
$month
@;
$y
@:
$integer
@)
@:
$dayofmonth
@;
var
$ret
@:
$integer
@;
begin
$writeln
@(
'Entered daysInMonth'
@)
@;
case
$m
of
#9
@,
#4
@,
#6
@,
#11
@:
$ret
@:=
#30
@;
#2
@:
if
$isleapyear
@(
$y
@)
then
$ret
@:=
#29
else
$ret
@:=
#28
@;
#1
@,
#3
@,
#5
@,
#7
@,
#8
@,
#10
@,
#12
@:
$ret
@:=
#31
end
@;
$daysinmonth
@:=
$ret
end
@;
function
$datedayofyear
@(
$self
@:
$date
@)
@:
$integer
@;
var
$m
@,
$ret
@:
$integer
@;
begin
$writeln
@(
'Entered dateDayOfYear'
@)
@;
$m
@:=
$self
@.
$m
@-
#1
@;
$ret
@:=
$self
@.
$d
@;
for
$m
@:=
$m
downto
#1
do
$ret
@:=
$ret
@+
$daysinmonth
@(
$self
@.
$m
@,
$self
@.
$y
@)
@;
$datedayofyear
@:=
$ret
end
@;
procedure
$dateincrement
@(
$self
@:
$date
@)
@;
var
$dim
@:
$dayofmonth
@;
begin
$writeln
@(
'Entered dateIncrement'
@)
@;
$dim
@:=
$daysinmonth
@(
$self
@.
$m
@,
$self
@.
$y
@)
@;
if
$self
@.
$d
@=
$dim
then
begin
$self
@.
$d
@:=
#1
@;
if
$self
@.
$m
@=
#12
then
begin
$self
@.
$y
@:=
$self
@.
$y
@+
#1
@;
$self
@.
$m
@:=
#1
end
else
$self
@.
$m
@:=
$self
@.
$m
@+
#1
@;
end
else
$self
@.
$d
@:=
$self
@.
$d
@+
#1
end
@;
function
$dateequalsdate
@(
$self
@,
$other
@:
$date
@)
@:
$boolean
@;
var
$ret
@:
$boolean
@;
begin
$writeln
@(
'Entered dateEqualsDate'
@)
@;
if
$self
@.
$y
@=
$other
@.
$y
then
if
$self
@.
$m
@=
$other
@.
$m
then
if
$self
@.
$d
@=
$other
@.
$d
then
$ret
@:=
$true
else
$ret
@:=
$false
else
$ret
@:=
$false
else
$ret
@:=
$false
@;
$dateequalsdate
@:=
$ret
end
@;
begin
$d
@:=
$mkdate
@(
#2
@,
#9
@,
#1985
@)
@;
$d
@.
$increment
@;
$d
@.
$y
@:=
$d
@.
$y
@+
#10
@;
$d
@.
$print
@;
$writeln
@;
$writeln
@(
$d
@.
$dayofyear
@)
@;
$writeln
@(
$d
@.
$equalsdate
@(
$mkdate
@(
#2
@,
#10
@,
#1995
@)
@)
@)
@;
$a
@:=
$d
@;
$d
@:=
$narrow
@(
$a
@,
$date
@)
@;
$write
@(
'ISTYPE '
@,
#1
@)
@;
if
$istype
@(
$d
@,
$root
@)
then
$writeln
@(
' ok'
@)
else
$writeln
@(
' bad'
@)
@;
$write
@(
'ISTYPE '
@,
#2
@)
@;
if
$istype
@(
$d
@,
$date
@)
then
$writeln
@(
' ok'
@)
else
$writeln
@(
' bad'
@)
@;
$write
@(
'ISTYPE '
@,
#3
@)
@;
if
$istype
@(
$d
@,
$anyobject
@)
then
$writeln
@(
' ok'
@)
else
$writeln
@(
' bad'
@)
@;
$write
@(
'ISTYPE '
@,
#4
@)
@;
if
$istype
@(
nil
@,
$root
@)
then
$writeln
@(
' ok'
@)
else
$writeln
@(
' bad'
@)
@;
$write
@(
'ISTYPE '
@,
#5
@)
@;
if
$istype
@(
nil
@,
$date
@)
then
$writeln
@(
' ok'
@)
else
$writeln
@(
' bad'
@)
@;
$write
@(
'ISTYPE '
@,
#6
@)
@;
if
$istype
@(
nil
@,
$anyobject
@)
then
$writeln
@(
' ok'
@)
else
$writeln
@(
' bad'
@)
@;
$a
@:=
$narrow
@(
nil
@,
$anyobject
@)
@;
$writeln
@(
'should get here: NARROW(NIL, AnyObject)'
@)
@;
$a
@:=
$narrow
@(
nil
@,
$date
@)
@;
$writeln
@(
'should get here: NARROW(NIL, Date)'
@)
@;
$r
@:=
$new
@(
$root
@)
@;
$write
@(
'ISTYPE '
@,
#7
@)
@;
if
$istype
@(
$r
@,
$root
@)
then
$writeln
@(
' ok'
@)
else
$writeln
@(
' bad'
@)
@;
$write
@(
'ISTYPE '
@,
#8
@)
@;
if
$istype
@(
$r
@,
$date
@)
then
$writeln
@(
' bad'
@)
else
$writeln
@(
' ok'
@)
@;
$write
@(
'ISTYPE '
@,
#9
@)
@;
if
$istype
@(
$r
@,
$anyobject
@)
then
$writeln
@(
' bad'
@)
else
$writeln
@(
' ok'
@)
@;
$writeln
@(
'got here, now should fail at NARROW(r, Date)'
@)
@;
$d
@:=
$narrow
@(
$r
@,
$date
@)
@;
$writeln
@(
'should not get here'
@)
@;
end
@.
EOF
EOF

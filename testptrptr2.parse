(program: 
  (decls: 
    (decl->program: testptrptr2[1]))
  (block: 
    (decls: 
      (decl->type: pi[3]
        (type->kind=pointer:
          ))
      (decl->type: ppi[4]
        (type->kind=pointer:
          ))
      (decl->variable: i[5]
        (type->kind=ident: integer[5]))
      (decl->variable: p[5]
        (type->kind=ident: pi[5]))
      (decl->variable: q[5]
        (type->kind=ident: pi[5]))
      (decl->variable: pp[5]
        (type->kind=ident: ppi[5]))
      (decl->variable: qq[5]
        (type->kind=ident: ppi[5]))
      (decl->procedure: show[7]
        (block: 
          (stmts: 
            (stmt->callstmt:
              (expr-> call: isMethodCall=false write[9]
                (exprs: 
                  (expr->[value='  '] string: '  '
                    type->(type->kind=string)))))
            (stmt->ifstmt: 
              (expr-> binexp: =
                (expr-> binding: pp[10])
                (expr->[value=0] nil:
                  type->(type->kind=<NIL>)))
              (stmt->callstmt:
                (expr-> call: isMethodCall=false write[11]
                  (exprs: 
                    (expr->[value='pp = NIL'] string: 'pp = NIL'
                      type->(type->kind=string)))))
              (else: 
                (stmt->ifstmt: 
                  (expr-> binexp: =
                    (expr-> unexp: ^
                      (expr-> binding: pp[12]))
                    (expr->[value=0] nil:
                      type->(type->kind=<NIL>)))
                  (stmt->callstmt:
                    (expr-> call: isMethodCall=false write[13]
                      (exprs: 
                        (expr->[value='pp^ = NIL'] string: 'pp^ = NIL'
                          type->(type->kind=string)))))
                  (else: 
                    (stmt->callstmt:
                      (expr-> call: isMethodCall=false write[15]
                        (exprs: 
                          (expr->[value='pp^^ = '] string: 'pp^^ = '
                            type->(type->kind=string))
                          (expr-> unexp: ^
                            (expr-> unexp: ^
                              (expr-> binding: pp[15]))))))))))
            (stmt->callstmt:
              (expr-> call: isMethodCall=false write[16]
                (exprs: 
                  (expr->[value='; '] string: '; '
                    type->(type->kind=string)))))
            (stmt->ifstmt: 
              (expr-> binexp: =
                (expr-> binding: qq[17])
                (expr->[value=0] nil:
                  type->(type->kind=<NIL>)))
              (stmt->callstmt:
                (expr-> call: isMethodCall=false write[18]
                  (exprs: 
                    (expr->[value='qq = NIL'] string: 'qq = NIL'
                      type->(type->kind=string)))))
              (else: 
                (stmt->ifstmt: 
                  (expr-> binexp: =
                    (expr-> unexp: ^
                      (expr-> binding: qq[19]))
                    (expr->[value=0] nil:
                      type->(type->kind=<NIL>)))
                  (stmt->callstmt:
                    (expr-> call: isMethodCall=false write[20]
                      (exprs: 
                        (expr->[value='qq^ = NIL'] string: 'qq^ = NIL'
                          type->(type->kind=string)))))
                  (else: 
                    (stmt->callstmt:
                      (expr-> call: isMethodCall=false write[22]
                        (exprs: 
                          (expr->[value='qq^^ = '] string: 'qq^^ = '
                            type->(type->kind=string))
                          (expr-> unexp: ^
                            (expr-> unexp: ^
                              (expr-> binding: qq[22]))))))))))
            (stmt->callstmt:
              (expr-> call: isMethodCall=false write[23]
                (exprs: 
                  (expr->[value='; '] string: '; '
                    type->(type->kind=string)))))
            (stmt->ifstmt: 
              (expr-> binexp: =
                (expr-> binding: p[24])
                (expr->[value=0] nil:
                  type->(type->kind=<NIL>)))
              (stmt->callstmt:
                (expr-> call: isMethodCall=false write[25]
                  (exprs: 
                    (expr->[value='p = NIL'] string: 'p = NIL'
                      type->(type->kind=string)))))
              (else: 
                (stmt->callstmt:
                  (expr-> call: isMethodCall=false write[27]
                    (exprs: 
                      (expr->[value='p^ = '] string: 'p^ = '
                        type->(type->kind=string))
                      (expr-> unexp: ^
                        (expr-> binding: p[27])))))))
            (stmt->callstmt:
              (expr-> call: isMethodCall=false write[28]
                (exprs: 
                  (expr->[value='; '] string: '; '
                    type->(type->kind=string)))))
            (stmt->ifstmt: 
              (expr-> binexp: =
                (expr-> binding: q[29])
                (expr->[value=0] nil:
                  type->(type->kind=<NIL>)))
              (stmt->callstmt:
                (expr-> call: isMethodCall=false write[30]
                  (exprs: 
                    (expr->[value='q = NIL'] string: 'q = NIL'
                      type->(type->kind=string)))))
              (else: 
                (stmt->callstmt:
                  (expr-> call: isMethodCall=false write[32]
                    (exprs: 
                      (expr->[value='q^ = '] string: 'q^ = '
                        type->(type->kind=string))
                      (expr-> unexp: ^
                        (expr-> binding: q[32])))))))
            (stmt->callstmt:
              (expr-> binding: writeln[33]))
            (stmt->emptystmt:)))))
    (stmts: 
      (stmt->assignstmt:
        (expr-> binding: pp[37])
        (expr->[value=0] nil:
          type->(type->kind=<NIL>)))
      (stmt->assignstmt:
        (expr-> binding: qq[38])
        (expr->[value=0] nil:
          type->(type->kind=<NIL>)))
      (stmt->assignstmt:
        (expr-> binding: p[39])
        (expr->[value=0] nil:
          type->(type->kind=<NIL>)))
      (stmt->assignstmt:
        (expr-> binding: q[40])
        (expr->[value=0] nil:
          type->(type->kind=<NIL>)))
      (stmt->callstmt:
        (expr-> call: isMethodCall=false writeln[41]
          (exprs: 
            (expr->[value='p, q, pp, qq are NIL:'] string: 'p, q, pp, qq are NIL:'
              type->(type->kind=string)))))
      (stmt->callstmt:
        (expr-> binding: show[42]))
      (stmt->assignstmt:
        (expr-> binding: p[44])
        (expr-> binding: q[44]))
      (stmt->callstmt:
        (expr-> call: isMethodCall=false writeln[45]
          (exprs: 
            (expr->[value='after p := q:'] string: 'after p := q:'
              type->(type->kind=string)))))
      (stmt->callstmt:
        (expr-> binding: show[46]))
      (stmt->callstmt:
        (expr-> call: isMethodCall=false new[48]
          (exprs: 
            (expr-> binding: q[48]))))
      (stmt->assignstmt:
        (expr-> unexp: ^
          (expr-> binding: q[49]))
        (expr->[value=0] int: 0
          type->(type->kind=integer)))
      (stmt->callstmt:
        (expr-> call: isMethodCall=false writeln[50]
          (exprs: 
            (expr->[value='after new (q) and q^ := 0:'] string: 'after new (q) and q^ := 0:'
              type->(type->kind=string)))))
      (stmt->callstmt:
        (expr-> binding: show[51]))
      (stmt->assignstmt:
        (expr-> binding: p[53])
        (expr-> binding: q[53]))
      (stmt->callstmt:
        (expr-> call: isMethodCall=false writeln[54]
          (exprs: 
            (expr->[value='after p := q:'] string: 'after p := q:'
              type->(type->kind=string)))))
      (stmt->callstmt:
        (expr-> binding: show[55]))
      (stmt->assignstmt:
        (expr-> unexp: ^
          (expr-> binding: p[57]))
        (expr->[value=1] int: 1
          type->(type->kind=integer)))
      (stmt->callstmt:
        (expr-> call: isMethodCall=false writeln[58]
          (exprs: 
            (expr->[value='after p^ := 1:'] string: 'after p^ := 1:'
              type->(type->kind=string)))))
      (stmt->callstmt:
        (expr-> binding: show[59]))
      (stmt->callstmt:
        (expr-> call: isMethodCall=false new[61]
          (exprs: 
            (expr-> binding: q[61]))))
      (stmt->assignstmt:
        (expr-> unexp: ^
          (expr-> binding: q[62]))
        (expr->[value=0] int: 0
          type->(type->kind=integer)))
      (stmt->callstmt:
        (expr-> call: isMethodCall=false writeln[63]
          (exprs: 
            (expr->[value='after new (q) and q^ := 0:'] string: 'after new (q) and q^ := 0:'
              type->(type->kind=string)))))
      (stmt->callstmt:
        (expr-> binding: show[64]))
      (stmt->assignstmt:
        (expr-> binding: i[66])
        (expr->[value=2] int: 2
          type->(type->kind=integer)))
      (stmt->assignstmt:
        (expr-> unexp: ^
          (expr-> binding: p[67]))
        (expr-> binding: i[67]))
      (stmt->callstmt:
        (expr-> call: isMethodCall=false writeln[68]
          (exprs: 
            (expr->[value='after i := 2, p^ := i:'] string: 'after i := 2, p^ := i:'
              type->(type->kind=string)))))
      (stmt->callstmt:
        (expr-> binding: show[69]))
      (stmt->assignstmt:
        (expr-> unexp: ^
          (expr-> binding: q[71]))
        (expr->[value=3] int: 3
          type->(type->kind=integer)))
      (stmt->callstmt:
        (expr-> call: isMethodCall=false writeln[72]
          (exprs: 
            (expr->[value='after q^ := 3:'] string: 'after q^ := 3:'
              type->(type->kind=string)))))
      (stmt->callstmt:
        (expr-> binding: show[73]))
      (stmt->assignstmt:
        (expr-> unexp: ^
          (expr-> binding: p[75]))
        (expr-> unexp: ^
          (expr-> binding: q[75])))
      (stmt->callstmt:
        (expr-> call: isMethodCall=false writeln[76]
          (exprs: 
            (expr->[value='after p^ := q^:'] string: 'after p^ := q^:'
              type->(type->kind=string)))))
      (stmt->callstmt:
        (expr-> binding: show[77]))
      (stmt->callstmt:
        (expr-> call: isMethodCall=false new[79]
          (exprs: 
            (expr-> binding: pp[79]))))
      (stmt->assignstmt:
        (expr-> unexp: ^
          (expr-> binding: pp[80]))
        (expr->[value=0] nil:
          type->(type->kind=<NIL>)))
      (stmt->callstmt:
        (expr-> call: isMethodCall=false writeln[81]
          (exprs: 
            (expr->[value='after new (pp), pp^ := NIL:'] string: 'after new (pp), pp^ := NIL:'
              type->(type->kind=string)))))
      (stmt->callstmt:
        (expr-> binding: show[82]))
      (stmt->callstmt:
        (expr-> call: isMethodCall=false new[84]
          (exprs: 
            (expr-> binding: qq[84]))))
      (stmt->assignstmt:
        (expr-> unexp: ^
          (expr-> binding: qq[85]))
        (expr->[value=0] nil:
          type->(type->kind=<NIL>)))
      (stmt->callstmt:
        (expr-> call: isMethodCall=false writeln[86]
          (exprs: 
            (expr->[value='after new (qq), qq^ := NIL:'] string: 'after new (qq), qq^ := NIL:'
              type->(type->kind=string)))))
      (stmt->callstmt:
        (expr-> binding: show[87]))
      (stmt->assignstmt:
        (expr-> unexp: ^
          (expr-> binding: pp[89]))
        (expr-> binding: p[89]))
      (stmt->callstmt:
        (expr-> call: isMethodCall=false writeln[90]
          (exprs: 
            (expr->[value='after pp^ := p:'] string: 'after pp^ := p:'
              type->(type->kind=string)))))
      (stmt->callstmt:
        (expr-> binding: show[91]))
      (stmt->assignstmt:
        (expr-> unexp: ^
          (expr-> binding: qq[93]))
        (expr-> binding: q[93]))
      (stmt->callstmt:
        (expr-> call: isMethodCall=false writeln[94]
          (exprs: 
            (expr->[value='after qq^ := q:'] string: 'after qq^ := q:'
              type->(type->kind=string)))))
      (stmt->callstmt:
        (expr-> binding: show[95]))
      (stmt->assignstmt:
        (expr-> unexp: ^
          (expr-> unexp: ^
            (expr-> binding: pp[97])))
        (expr->[value=4] int: 4
          type->(type->kind=integer)))
      (stmt->callstmt:
        (expr-> call: isMethodCall=false writeln[98]
          (exprs: 
            (expr->[value='after pp^^ := 4:'] string: 'after pp^^ := 4:'
              type->(type->kind=string)))))
      (stmt->callstmt:
        (expr-> binding: show[99]))
      (stmt->assignstmt:
        (expr-> binding: qq[101])
        (expr-> binding: pp[101]))
      (stmt->callstmt:
        (expr-> call: isMethodCall=false writeln[102]
          (exprs: 
            (expr->[value='after qq := pp:'] string: 'after qq := pp:'
              type->(type->kind=string)))))
      (stmt->callstmt:
        (expr-> binding: show[103]))
      (stmt->assignstmt:
        (expr-> unexp: ^
          (expr-> unexp: ^
            (expr-> binding: qq[105])))
        (expr->[value=5] int: 5
          type->(type->kind=integer)))
      (stmt->callstmt:
        (expr-> call: isMethodCall=false writeln[106]
          (exprs: 
            (expr->[value='after qq^^ := 5:'] string: 'after qq^^ := 5:'
              type->(type->kind=string)))))
      (stmt->callstmt:
        (expr-> binding: show[107]))
      (stmt->emptystmt:))))

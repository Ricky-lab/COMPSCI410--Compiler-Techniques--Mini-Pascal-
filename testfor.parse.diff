testfor.parse:
1,85d0
< (program: 
<   (decls: 
<     (decl->program: testfor[1]))
<   (block: 
<     (decls: 
<       (decl->variable: i[3]
<         (type->kind=ident: integer[3]))
<       (decl->variable: m[4]
<         (type->kind=subrange:
<           (expr->[value=1] int: 1
<             type->(type->kind=integer))
<           (expr->[value=10] int: 10
<             type->(type->kind=integer))))
<       (decl->variable: n[4]
<         (type->kind=subrange:
<           (expr->[value=1] int: 1
<             type->(type->kind=integer))
<           (expr->[value=10] int: 10
<             type->(type->kind=integer))))
<       (decl->variable: x[5]
<         (type->kind=ident: integer[5])))
<     (stmts: 
<       (stmt->assignstmt:
<         (expr-> binding: x[7])
<         (expr->[value=0] int: 0
<           type->(type->kind=integer)))
<       (stmt->forstmt:i[8]
<         (expr->[value=1] int: 1
<           type->(type->kind=integer))
<         (expr->[value=10] int: 10
<           type->(type->kind=integer))
<         (upward:true)
<         (stmt->assignstmt:
<           (expr-> binding: x[9])
<           (expr-> binexp: +
<             (expr-> binding: x[9])
<             (expr-> binding: i[9]))))
<       (stmt->assignstmt:
<         (expr-> binding: x[10])
<         (expr->[value=0] int: 0
<           type->(type->kind=integer)))
<       (stmt->forstmt:n[11]
<         (expr->[value=1] int: 1
<           type->(type->kind=integer))
<         (expr->[value=10] int: 10
<           type->(type->kind=integer))
<         (upward:true)
<         (stmt->assignstmt:
<           (expr-> binding: x[12])
<           (expr-> binexp: +
<             (expr-> binding: x[12])
<             (expr->[value=1] int: 1
<               type->(type->kind=integer)))))
<       (stmt->forstmt:n[13]
<         (expr->[value=1] int: 1
<           type->(type->kind=integer))
<         (expr-> binding: m[13])
<         (upward:true)
<         (stmt->assignstmt:
<           (expr-> binding: x[14])
<           (expr-> binexp: +
<             (expr-> binding: x[14])
<             (expr->[value=1] int: 1
<               type->(type->kind=integer)))))
<       (stmt->forstmt:n[15]
<         (expr-> binding: m[15])
<         (expr-> binding: m[15])
<         (upward:false)
<         (stmt->assignstmt:
<           (expr-> binding: x[16])
<           (expr-> binexp: -
<             (expr-> binding: x[16])
<             (expr->[value=1] int: 1
<               type->(type->kind=integer)))))
<       (stmt->forstmt:n[17]
<         (expr-> binding: i[17])
<         (expr-> binding: i[17])
<         (upward:true)
<         (stmt->assignstmt:
<           (expr-> binding: x[18])
<           (expr-> binexp: +
<             (expr-> binding: x[18])
<             (expr->[value=2] int: 2
<               type->(type->kind=integer)))))
<       (stmt->emptystmt:))))



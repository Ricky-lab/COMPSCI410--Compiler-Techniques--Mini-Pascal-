testmisc2.err:
0a1,13
> Exception occurred:
> java.lang.IllegalStateException: Operator was not found in the operator table: 'string constant';
>   c2 = 100;
> 
> type
>   t1 = 100..
> 	at MPC.TokenOp.get(TokenOp.java:89)
> 	at MPC.MPCScanner.next_token(MPCScanner.java:498)
> 	at java_cup.runtime.lr_parser.scan(lr_parser.java:349)
> 	at java_cup.runtime.lr_parser.parse(lr_parser.java:578)
> 	at MPC.Parse.perform(Parse.java:45)
> 	at MPC.mpc.main(mpc.java:245)
> Aborting ...


testmisc2.token:
2,4c2
< $bigtest
< @;
< const
---
> $bigtest;const
7,789d4
< 'string constant'
< @;
< $c2
< @=
< #100
< @;
< type
< $t1
< @=
< #100
< @..
< #200
< @;
< $t2
< @=
< 'string1'
< @..
< 'string2'
< @;
< var
< $v1
< @,
< $v2
< @:
< array
< @[
< #10
< @..
< #20
< @,
< #20
< @..
< #30
< @,
< #30
< @..
< #40
< @]
< of
< $integer
< @;
< $v3
< @,
< $v4
< @:
< array
< @[
< #10
< @..
< #20
< @]
< of
< array
< @[
< #20
< @..
< #30
< @,
< #30
< @..
< #40
< @]
< of
< $integer
< @;
< $v5
< @:
< array
< @[
< #10
< @..
< #20
< @]
< of
< array
< @[
< #20
< @..
< #30
< @]
< of
< array
< @[
< #30
< @..
< #40
< @]
< of
< $integer
< @;
< procedure
< $p1
< @;
< begin
< end
< @;
< function
< $f1
< @:
< $integer
< @;
< begin
< @;
< end
< @;
< const
< $c1
< @=
< @+
< #100
< @;
< $c2
< @=
< @-
< $c1
< @;
< $c3
< @=
< @+
< #100
< @;
< $c4
< @=
< @-
< $c3
< @;
< var
< $a
< @,
< $b
< @,
< $c
< @,
< $d
< @,
< $e
< @,
< $f
< @,
< $g
< @,
< $h
< @,
< $i
< @:
< array
< @[
< #1
< @..
< #100
< @]
< of
< record
< $a
< @,
< $b
< @:
< array
< @[
< #50
< @..
< #60
< @]
< of
< $integer
< @;
< $c
< @,
< $d
< @,
< $e
< @,
< $f
< @:
< array
< @[
< #100
< @..
< #110
< @]
< of
< array
< @[
< #5
< @..
< #10
< @,
< #80
< @..
< #90
< @]
< of
< record
< end
< @;
< end
< @;
< type
< $ptr
< @=
< @^
< $sometype
< @;
< function
< $f1
< @(
< $a
< @:
< $integer
< @;
< var
< $a
< @,
< $b
< @,
< $c
< @:
< $integer
< @;
< $d
< @,
< $e
< @,
< $f
< @:
< $integer
< @;
< var
< $g
< @,
< $h
< @,
< $i
< @:
< $integer
< @)
< @:
< $sometype
< @;
< type
< $a
< @=
< record
< $a
< @:
< $integer
< @;
< $b
< @:
< $integer
< @;
< $c
< @:
< $integer
< @;
< end
< @;
< $b
< @=
< record
< $a
< @:
< $integer
< @;
< $b
< @:
< $integer
< @;
< $c
< @:
< $integer
< end
< @;
< const
< $constant
< @=
< #1000
< @;
< function
< $infunc
< @:
< $type1
< @;
< begin
< end
< @;
< var
< $x
< @,
< $y
< @,
< $z
< @:
< @^
< $integer
< @;
< const
< $c2
< @=
< #30000
< @;
< $c4
< @=
< @-
< #2
< @;
< $c5
< @=
< 'this is a test'
< @;
< procedure
< $inproc
< @(
< var
< $a
< @:
< $integer
< @;
< var
< $b
< @:
< $integer
< @;
< $c
< @:
< $integer
< @;
< $d
< @:
< $integer
< @;
< var
< $e
< @:
< $integer
< @)
< @;
< begin
< end
< @;
< begin
< end
< @;
< type
< $x
< @=
< record
< $y
< @:
< record
< $z
< @:
< record
< $a
< @:
< array
< @[
< #1
< @..
< #2
< @,
< #3
< @..
< #4
< @,
< #5
< @..
< #6
< @,
< #7
< @..
< #8
< @,
< #9
< @..
< #10
< @]
< of
< $integer
< @;
< end
< @;
< end
< @;
< end
< @;
< procedure
< $foo
< @;
< begin
< end
< @;
< type
< $a
< @=
< $integer
< @;
< var
< $a
< @:
< $integer
< @;
< function
< $func1
< @(
< var
< $a
< @,
< $b
< @,
< $c
< @,
< $d
< @,
< $e
< @,
< $f
< @,
< $g
< @,
< $h
< @,
< $i
< @,
< $j
< @,
< $k
< @,
< $l
< @,
< $m
< @,
< $n
< @,
< $o
< @,
< $p
< @,
< $q
< @,
< $r
< @,
< $s
< @,
< $t
< @,
< $u
< @,
< $v
< @,
< $w
< @,
< $x
< @,
< $y
< @,
< $z
< @:
< $type1
< @)
< @:
< $type2
< @;
< begin
< end
< @;
< procedure
< $proc1
< @;
< begin
< end
< @;
< begin
< if
< $a
< @=
< $b
< then
< if
< $c
< @=
< $d
< then
< if
< $e
< @=
< $f
< then
< $g
< @:=
< $h
< else
< $g
< @:=
< #2
< else
< $g
< @:=
< #3
< @;
< $a
< @:=
< #0
< @;
< while
< @(
< $a
< @<=
< #100
< @)
< or
< @(
< $b
< @>
< #20
< @)
< or
< @(
< $g
< @=
< #12
< @)
< do
< begin
< end
< @;
< repeat
< begin
< end
< @;
< until
< @(
< $a
< @<=
< #100
< @)
< or
< @(
< $b
< @>
< #20
< @)
< or
< @(
< $g
< @=
< #12
< @)
< @;
< $a
< @:=
< #10
< @;
< $b
< @:=
< #20
< @;
< $c
< @:=
< $a
< @*
< $b
< @;
< $a
< @:=
< $a
< @+
< #10
< @*
< $b
< @-
< $c
< @;
< $a
< @:=
< @-
< $a
< @+
< #10
< @*
< $b
< @-
< $c
< @;
< $a
< @:=
< #0
< @;
< $b
< @:=
< #2
< @;
< repeat
< $a
< @:=
< $a
< @+
< #1
< @;
< $b
< @:=
< $b
< @*
< #2
< @;
< until
< $a
< @=
< #10
< @;
< for
< $a
< @:=
< @(
< #10
< @+
< #20
< @)
< to
< @(
< #100
< @-
< #10
< @)
< do
< begin
< $b
< @:=
< $b
< @+
< #1
< @;
< $c
< @:=
< $c
< @+
< #2
< @;
< end
< @;
< for
< $a
< @:=
< @(
< #10
< @+
< #20
< @)
< downto
< @(
< #100
< @-
< #10
< @)
< do
< begin
< $b
< @:=
< $b
< @+
< #1
< @;
< $c
< @:=
< $c
< @+
< #2
< @;
< end
< @;
< case
< $a
< of
< #1
< @,
< #2
< @,
< #3
< @:
< $b
< @:=
< #10
< @;
< #4
< @,
< #5
< @,
< #6
< @:
< $b
< @:=
< #20
< end
< @;
< case
< $a
< of
< #1
< @,
< #2
< @,
< #3
< @:
< $b
< @:=
< #10
< @;
< #4
< @,
< #5
< @,
< #6
< @:
< $b
< @:=
< #20
< @;
< end
< @;
< $a
< @:=
< $a
< @.
< $b
< @.
< $c
< @.
< $d
< @;
< $a
< @:=
< $a
< @.
< $b
< @.
< $c
< @.
< $d
< @^
< @;
< $a
< @:=
< $a
< @;
< $b
< @:=
< $a
< @(
< #10
< @,
< $a
< @+
< $c
< @,
< 'this is a test'
< @)
< @;
< $a
< @:=
< $b
< @[
< #1
< @]
< @;
< $a
< @:=
< $b
< @[
< #1
< @,
< #2
< @,
< #3
< @,
< #4
< @,
< #5
< @]
< @;
< end
< @.
< EOF
< EOF



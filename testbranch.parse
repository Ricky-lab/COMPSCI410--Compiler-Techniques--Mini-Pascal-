(program: 
  (decls: 
    (decl->program: testbranch[1]))
  (block: 
    (decls: 
      (decl->procedure: reached[3]
        (block: 
          (decls: 
            (decl->variable: x[5]
              (type->kind=ident: integer[5]))
            (decl->variable: y[5]
              (type->kind=ident: integer[5])))
          (stmts: 
            (stmt->assignstmt:
              (expr-> binding: x[7])
              (expr->[value=1] int: 1
                type->(type->kind=integer)))
            (stmt->assignstmt:
              (expr-> binding: y[8])
              (expr-> binexp: -
                (expr->[value=2] int: 2
                  type->(type->kind=integer))
                (expr-> binding: x[8])))
            (stmt->ifstmt: 
              (expr-> binexp: <>
                (expr-> binding: x[9])
                (expr-> binding: y[9]))
              (stmt->compoundstmt:
                (stmts: 
                  (stmt->callstmt:
                    (expr-> binding: unreached[10]))
                  (stmt->callstmt:
                    (expr-> call: isMethodCall=false write[11]
                      (exprs: 
                        (expr->[value='bar'] string: 'bar'
                          type->(type->kind=string)))))
                  (stmt->emptystmt:))))
            (stmt->callstmt:
              (expr-> call: isMethodCall=false writeln[13]
                (exprs: 
                  (expr->[value='foo'] string: 'foo'
                    type->(type->kind=string)))))
            (stmt->emptystmt:))))
      (decl->procedure: unreached[16]
        (block: 
          (stmts: 
            (stmt->emptystmt:))))
      (decl->procedure: branchingforms[20]
        (block: 
          (decls: 
            (decl->variable: x[22]
              (type->kind=ident: integer[22]))
            (decl->variable: y[22]
              (type->kind=ident: integer[22]))
            (decl->variable: z[22]
              (type->kind=ident: integer[22]))
            (decl->variable: a[22]
              (type->kind=ident: integer[22]))
            (decl->variable: b[22]
              (type->kind=ident: integer[22]))
            (decl->variable: c[22]
              (type->kind=ident: integer[22]))
            (decl->variable: bb[23]
              (type->kind=ident: boolean[23])))
          (stmts: 
            (stmt->ifstmt: 
              (expr-> binexp: and
                (expr-> binexp: <
                  (expr-> binding: x[25])
                  (expr-> binding: y[25]))
                (expr-> binexp: <
                  (expr-> binding: y[25])
                  (expr-> binding: z[25])))
              (stmt->assignstmt:
                (expr-> binding: bb[25])
                (expr-> binding: true[25])))
            (stmt->whilestmt:
              (expr-> binexp: or
                (expr-> binexp: <>
                  (expr-> binding: a[26])
                  (expr-> binding: b[26]))
                (expr-> binexp: =
                  (expr-> binding: z[26])
                  (expr->[value=0] int: 0
                    type->(type->kind=integer))))
              (stmt->assignstmt:
                (expr-> binding: x[26])
                (expr-> binexp: +
                  (expr-> binding: x[26])
                  (expr->[value=1] int: 1
                    type->(type->kind=integer)))))
            (stmt->repeatstmt:
              (expr-> unexp: not
                (expr-> binexp: or
                  (expr-> binexp: or
                    (expr-> binexp: =
                      (expr-> binding: a[27])
                      (expr-> binding: b[27]))
                    (expr-> binexp: <>
                      (expr-> binding: y[27])
                      (expr-> binding: z[27])))
                  (expr-> binding: bb[27])))
              (stmts: 
                (stmt->assignstmt:
                  (expr-> binding: z[27])
                  (expr-> binexp: +
                    (expr-> binding: z[27])
                    (expr->[value=2] int: 2
                      type->(type->kind=integer))))
                (stmt->emptystmt:)))
            (stmt->emptystmt:))))
      (decl->variable: z[31]
        (type->kind=ident: integer[31])))
    (stmts: 
      (stmt->assignstmt:
        (expr-> binding: z[34])
        (expr->[value=0] int: 0
          type->(type->kind=integer)))
      (stmt->callstmt:
        (expr-> binding: reached[35]))
      (stmt->ifstmt: 
        (expr-> binexp: <>
          (expr-> binding: z[36])
          (expr->[value=0] int: 0
            type->(type->kind=integer)))
        (stmt->ifstmt: 
          (expr-> binexp: <>
            (expr-> binding: z[37])
            (expr->[value=1] int: 1
              type->(type->kind=integer)))
          (stmt->assignstmt:
            (expr-> binding: z[37])
            (expr->[value=2] int: 2
              type->(type->kind=integer)))
          (else: 
            (stmt->assignstmt:
              (expr-> binding: z[37])
              (expr->[value=3] int: 3
                type->(type->kind=integer)))))
        (else: 
          (stmt->ifstmt: 
            (expr-> binexp: <>
              (expr-> binding: z[38])
              (expr->[value=4] int: 4
                type->(type->kind=integer)))
            (stmt->assignstmt:
              (expr-> binding: z[38])
              (expr->[value=5] int: 5
                type->(type->kind=integer)))
            (else: 
              (stmt->assignstmt:
                (expr-> binding: z[38])
                (expr->[value=6] int: 6
                  type->(type->kind=integer)))))))
      (stmt->whilestmt:
        (expr-> binding: false[39])
        (stmt->assignstmt:
          (expr-> binding: z[40])
          (expr-> binexp: +
            (expr-> binding: z[40])
            (expr->[value=1] int: 1
              type->(type->kind=integer)))))
      (stmt->assignstmt:
        (expr-> binding: z[41])
        (expr-> binexp: +
          (expr-> binding: z[41])
          (expr->[value=100] int: 100
            type->(type->kind=integer))))
      (stmt->emptystmt:))))
